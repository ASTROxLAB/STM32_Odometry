
OdomSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080079b0  080079b0  000089b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d7c  08007d7c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d84  08007d84  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          0000098c  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b60  20000b60  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbbd  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c3  00000000  00000000  00018dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0001b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b9  00000000  00000000  0001bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f6f  00000000  00000000  0001c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc8a  00000000  00000000  00041658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbde8  00000000  00000000  0004f2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b0ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004680  00000000  00000000  0012b110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0012f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007998 	.word	0x08007998

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08007998 	.word	0x08007998

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <HAL_UART_RxCpltCallback>:
} posture;

static uint8_t count = 0;
static uint8_t i = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	@ (800102c <HAL_UART_RxCpltCallback+0x138>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 808d 	bne.w	8001022 <HAL_UART_RxCpltCallback+0x12e>
		switch (count) {
 8000f08:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d87c      	bhi.n	800100a <HAL_UART_RxCpltCallback+0x116>
 8000f10:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <HAL_UART_RxCpltCallback+0x24>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f2d 	.word	0x08000f2d
 8000f1c:	08000f4b 	.word	0x08000f4b
 8000f20:	08000f77 	.word	0x08000f77
 8000f24:	08000fad 	.word	0x08000fad
 8000f28:	08000fcb 	.word	0x08000fcb
		case 0:
			if (ch == 0x0d)
 8000f2c:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b0d      	cmp	r3, #13
 8000f32:	d106      	bne.n	8000f42 <HAL_UART_RxCpltCallback+0x4e>
				count++;
 8000f34:	4b3e      	ldr	r3, [pc, #248]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
			else
				count = 0;
			break;
 8000f40:	e06a      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
				count = 0;
 8000f42:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
			break;
 8000f48:	e066      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
		case 1:
			if (ch == 0x0a) {
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	d109      	bne.n	8000f66 <HAL_UART_RxCpltCallback+0x72>
				i = 0;
 8000f52:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
				count++;
 8000f58:	4b35      	ldr	r3, [pc, #212]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f62:	701a      	strb	r2, [r3, #0]
			} else if (ch != 0x0d) {
				count = 0;
			}
			break;
 8000f64:	e055      	b.n	8001012 <HAL_UART_RxCpltCallback+0x11e>
			} else if (ch != 0x0d) {
 8000f66:	4b33      	ldr	r3, [pc, #204]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b0d      	cmp	r3, #13
 8000f6c:	d051      	beq.n	8001012 <HAL_UART_RxCpltCallback+0x11e>
				count = 0;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			break;
 8000f74:	e04d      	b.n	8001012 <HAL_UART_RxCpltCallback+0x11e>
		case 2:
			posture.data[i] = ch;
 8000f76:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000f7e:	7819      	ldrb	r1, [r3, #0]
 8000f80:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000f82:	5499      	strb	r1, [r3, r2]
			i++;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f8e:	701a      	strb	r2, [r3, #0]
			if (i >= 24) {
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b17      	cmp	r3, #23
 8000f96:	d93e      	bls.n	8001016 <HAL_UART_RxCpltCallback+0x122>
				i = 0;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_UART_RxCpltCallback+0x144>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
				count++;
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000faa:	e034      	b.n	8001016 <HAL_UART_RxCpltCallback+0x122>
		case 3:
			if (ch == 0x0a)
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b0a      	cmp	r3, #10
 8000fb2:	d106      	bne.n	8000fc2 <HAL_UART_RxCpltCallback+0xce>
				count++;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
			else
				count = 0;
			break;
 8000fc0:	e02a      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
				count = 0;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
			break;
 8000fc8:	e026      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
		case 4:
			if (ch == 0x0d) {
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d117      	bne.n	8001002 <HAL_UART_RxCpltCallback+0x10e>
				zangle = posture.ActVal[0];
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_UART_RxCpltCallback+0x14c>)
 8000fd8:	6013      	str	r3, [r2, #0]
				xangle = posture.ActVal[1];
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_UART_RxCpltCallback+0x150>)
 8000fe0:	6013      	str	r3, [r2, #0]
				yangle = posture.ActVal[2];
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <HAL_UART_RxCpltCallback+0x154>)
 8000fe8:	6013      	str	r3, [r2, #0]
				pos_x = posture.ActVal[3];
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_UART_RxCpltCallback+0x158>)
 8000ff0:	6013      	str	r3, [r2, #0]
				pos_y = posture.ActVal[4];
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4a16      	ldr	r2, [pc, #88]	@ (8001050 <HAL_UART_RxCpltCallback+0x15c>)
 8000ff8:	6013      	str	r3, [r2, #0]
				w_z = posture.ActVal[5];
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_UART_RxCpltCallback+0x148>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <HAL_UART_RxCpltCallback+0x160>)
 8001000:	6013      	str	r3, [r2, #0]
			}
			count = 0;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
			break;
 8001008:	e006      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
		default:
			count = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_UART_RxCpltCallback+0x13c>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			break;
 8001010:	e002      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
			break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <HAL_UART_RxCpltCallback+0x124>
			break;
 8001016:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart2, &ch, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	4906      	ldr	r1, [pc, #24]	@ (8001034 <HAL_UART_RxCpltCallback+0x140>)
 800101c:	480e      	ldr	r0, [pc, #56]	@ (8001058 <HAL_UART_RxCpltCallback+0x164>)
 800101e:	f002 fbf6 	bl	800380e <HAL_UART_Receive_IT>
	}
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40004400 	.word	0x40004400
 8001030:	20000a00 	.word	0x20000a00
 8001034:	200009e4 	.word	0x200009e4
 8001038:	20000a01 	.word	0x20000a01
 800103c:	200009e8 	.word	0x200009e8
 8001040:	200009d4 	.word	0x200009d4
 8001044:	200009d8 	.word	0x200009d8
 8001048:	200009dc 	.word	0x200009dc
 800104c:	200009cc 	.word	0x200009cc
 8001050:	200009d0 	.word	0x200009d0
 8001054:	200009e0 	.word	0x200009e0
 8001058:	20000458 	.word	0x20000458

0800105c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800105c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001064:	f000 fd9a 	bl	8001b9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001068:	f000 f882 	bl	8001170 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800106c:	f000 f9ba 	bl	80013e4 <MX_GPIO_Init>
	MX_ETH_Init();
 8001070:	f000 f8e8 	bl	8001244 <MX_ETH_Init>
	MX_USART2_UART_Init();
 8001074:	f000 f934 	bl	80012e0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001078:	f000 f95c 	bl	8001334 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800107c:	f000 f984 	bl	8001388 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2, &ch, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	492e      	ldr	r1, [pc, #184]	@ (800113c <main+0xe0>)
 8001084:	482e      	ldr	r0, [pc, #184]	@ (8001140 <main+0xe4>)
 8001086:	f002 fbc2 	bl	800380e <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sprintf(txBuffer, "pos_x : %.2f, pos_y ; %.2f , theta ; %.2f\r\n",
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <main+0xe8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa6a 	bl	8000568 <__aeabi_f2d>
 8001094:	4680      	mov	r8, r0
 8001096:	4689      	mov	r9, r1
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <main+0xec>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa63 	bl	8000568 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4b29      	ldr	r3, [pc, #164]	@ (800114c <main+0xf0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa5c 	bl	8000568 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010b8:	e9cd 4500 	strd	r4, r5, [sp]
 80010bc:	4642      	mov	r2, r8
 80010be:	464b      	mov	r3, r9
 80010c0:	4923      	ldr	r1, [pc, #140]	@ (8001150 <main+0xf4>)
 80010c2:	4824      	ldr	r0, [pc, #144]	@ (8001154 <main+0xf8>)
 80010c4:	f004 fb34 	bl	8005730 <siprintf>
				pos_x, pos_y, zangle);
		HAL_UART_Transmit(&huart3, (uint8_t*) txBuffer, strlen(txBuffer), 50);
 80010c8:	4822      	ldr	r0, [pc, #136]	@ (8001154 <main+0xf8>)
 80010ca:	f7ff f8e1 	bl	8000290 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	2332      	movs	r3, #50	@ 0x32
 80010d4:	491f      	ldr	r1, [pc, #124]	@ (8001154 <main+0xf8>)
 80010d6:	4820      	ldr	r0, [pc, #128]	@ (8001158 <main+0xfc>)
 80010d8:	f002 fad8 	bl	800368c <HAL_UART_Transmit>

		state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80010dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e0:	481e      	ldr	r0, [pc, #120]	@ (800115c <main+0x100>)
 80010e2:	f001 fc91 	bl	8002a08 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <main+0x104>)
 80010ec:	601a      	str	r2, [r3, #0]
		if (state == GPIO_PIN_SET) {
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <main+0x104>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d1c9      	bne.n	800108a <main+0x2e>
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET) {
 80010f6:	e002      	b.n	80010fe <main+0xa2>
				HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fdc1 	bl	8001c80 <HAL_Delay>
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET) {
 80010fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001102:	4816      	ldr	r0, [pc, #88]	@ (800115c <main+0x100>)
 8001104:	f001 fc80 	bl	8002a08 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f4      	bne.n	80010f8 <main+0x9c>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800110e:	2101      	movs	r1, #1
 8001110:	4814      	ldr	r0, [pc, #80]	@ (8001164 <main+0x108>)
 8001112:	f001 fcaa 	bl	8002a6a <HAL_GPIO_TogglePin>
			sprintf(resetCmd, "ACT0\r\n");
 8001116:	4914      	ldr	r1, [pc, #80]	@ (8001168 <main+0x10c>)
 8001118:	4814      	ldr	r0, [pc, #80]	@ (800116c <main+0x110>)
 800111a:	f004 fb09 	bl	8005730 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) resetCmd,
					strlen(resetCmd));
 800111e:	4813      	ldr	r0, [pc, #76]	@ (800116c <main+0x110>)
 8001120:	f7ff f8b6 	bl	8000290 <strlen>
 8001124:	4603      	mov	r3, r0
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) resetCmd,
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4910      	ldr	r1, [pc, #64]	@ (800116c <main+0x110>)
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <main+0xe4>)
 800112e:	f002 fb38 	bl	80037a2 <HAL_UART_Transmit_IT>
			HAL_Delay(500);
 8001132:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001136:	f000 fda3 	bl	8001c80 <HAL_Delay>
		sprintf(txBuffer, "pos_x : %.2f, pos_y ; %.2f , theta ; %.2f\r\n",
 800113a:	e7a6      	b.n	800108a <main+0x2e>
 800113c:	200009e4 	.word	0x200009e4
 8001140:	20000458 	.word	0x20000458
 8001144:	200009cc 	.word	0x200009cc
 8001148:	200009d0 	.word	0x200009d0
 800114c:	200009d4 	.word	0x200009d4
 8001150:	080079b8 	.word	0x080079b8
 8001154:	200001f0 	.word	0x200001f0
 8001158:	200004a0 	.word	0x200004a0
 800115c:	40020800 	.word	0x40020800
 8001160:	2000022c 	.word	0x2000022c
 8001164:	40020400 	.word	0x40020400
 8001168:	080079e4 	.word	0x080079e4
 800116c:	20000224 	.word	0x20000224

08001170 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	@ 0x50
 8001174:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fb3b 	bl	80057fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b28      	ldr	r3, [pc, #160]	@ (800123c <SystemClock_Config+0xcc>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a27      	ldr	r2, [pc, #156]	@ (800123c <SystemClock_Config+0xcc>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b25      	ldr	r3, [pc, #148]	@ (800123c <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <SystemClock_Config+0xd0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <SystemClock_Config+0xd0>)
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80011e4:	23a8      	movs	r3, #168	@ 0xa8
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fd61 	bl	8002cbc <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x94>
		Error_Handler();
 8001200:	f000 f99e 	bl	8001540 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001210:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001214:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2105      	movs	r1, #5
 8001222:	4618      	mov	r0, r3
 8001224:	f001 ffc2 	bl	80031ac <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xc2>
		Error_Handler();
 800122e:	f000 f987 	bl	8001540 <Error_Handler>
	}
}
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	@ 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001248:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <MX_ETH_Init+0x84>)
 800124a:	4a20      	ldr	r2, [pc, #128]	@ (80012cc <MX_ETH_Init+0x88>)
 800124c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_ETH_Init+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_ETH_Init+0x8c>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_ETH_Init+0x8c>)
 800125c:	22e1      	movs	r2, #225	@ 0xe1
 800125e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_ETH_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_ETH_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_ETH_Init+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_ETH_Init+0x84>)
 8001274:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <MX_ETH_Init+0x8c>)
 8001276:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_ETH_Init+0x84>)
 800127a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800127e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_ETH_Init+0x84>)
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <MX_ETH_Init+0x90>)
 8001284:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_ETH_Init+0x84>)
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <MX_ETH_Init+0x94>)
 800128a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_ETH_Init+0x84>)
 800128e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001292:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_ETH_Init+0x84>)
 8001296:	f000 febb 	bl	8002010 <HAL_ETH_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ETH_Init+0x60>
		Error_Handler();
 80012a0:	f000 f94e 	bl	8001540 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80012a4:	2238      	movs	r2, #56	@ 0x38
 80012a6:	2100      	movs	r1, #0
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <MX_ETH_Init+0x98>)
 80012aa:	f004 faa6 	bl	80057fa <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_ETH_Init+0x98>)
 80012b0:	2221      	movs	r2, #33	@ 0x21
 80012b2:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_ETH_Init+0x98>)
 80012b6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80012ba:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_ETH_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003a8 	.word	0x200003a8
 80012cc:	40028000 	.word	0x40028000
 80012d0:	20000a04 	.word	0x20000a04
 80012d4:	20000308 	.word	0x20000308
 80012d8:	20000268 	.word	0x20000268
 80012dc:	20000230 	.word	0x20000230

080012e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <MX_USART2_UART_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_USART2_UART_Init+0x4c>)
 8001318:	f002 f968 	bl	80035ec <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001322:	f000 f90d 	bl	8001540 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000458 	.word	0x20000458
 8001330:	40004400 	.word	0x40004400

08001334 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART3_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART3_UART_Init+0x4c>)
 800136c:	f002 f93e 	bl	80035ec <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001376:	f000 f8e3 	bl	8001540 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200004a0 	.word	0x200004a0
 8001384:	40004800 	.word	0x40004800

08001388 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001392:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001396:	2204      	movs	r2, #4
 8001398:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139c:	2202      	movs	r2, #2
 800139e:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013cc:	f001 fb67 	bl	8002a9e <HAL_PCD_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80013d6:	f000 f8b3 	bl	8001540 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200004e8 	.word	0x200004e8

080013e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a4b      	ldr	r2, [pc, #300]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <MX_GPIO_Init+0x14c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <MX_GPIO_Init+0x14c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a3d      	ldr	r2, [pc, #244]	@ (8001530 <MX_GPIO_Init+0x14c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a36      	ldr	r2, [pc, #216]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a2f      	ldr	r2, [pc, #188]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <MX_GPIO_Init+0x14c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <MX_GPIO_Init+0x14c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_GPIO_Init+0x14c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014a8:	4822      	ldr	r0, [pc, #136]	@ (8001534 <MX_GPIO_Init+0x150>)
 80014aa:	f001 fac5 	bl	8002a38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80014ae:	2200      	movs	r2, #0
 80014b0:	2140      	movs	r1, #64	@ 0x40
 80014b2:	4821      	ldr	r0, [pc, #132]	@ (8001538 <MX_GPIO_Init+0x154>)
 80014b4:	f001 fac0 	bl	8002a38 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	481b      	ldr	r0, [pc, #108]	@ (800153c <MX_GPIO_Init+0x158>)
 80014d0:	f001 f8ee 	bl	80026b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80014d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80014d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4811      	ldr	r0, [pc, #68]	@ (8001534 <MX_GPIO_Init+0x150>)
 80014ee:	f001 f8df 	bl	80026b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014f2:	2340      	movs	r3, #64	@ 0x40
 80014f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	480b      	ldr	r0, [pc, #44]	@ (8001538 <MX_GPIO_Init+0x154>)
 800150a:	f001 f8d1 	bl	80026b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_GPIO_Init+0x154>)
 8001522:	f001 f8c5 	bl	80026b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	@ 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400
 8001538:	40021800 	.word	0x40021800
 800153c:	40020800 	.word	0x40020800

08001540 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <Error_Handler+0x8>

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	@ 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a55      	ldr	r2, [pc, #340]	@ (8001710 <HAL_ETH_MspInit+0x174>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 80a4 	bne.w	8001708 <HAL_ETH_MspInit+0x16c>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c8:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ec:	4b49      	ldr	r3, [pc, #292]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a44      	ldr	r2, [pc, #272]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
 8001608:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	4a3d      	ldr	r2, [pc, #244]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6313      	str	r3, [r2, #48]	@ 0x30
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	4a36      	ldr	r2, [pc, #216]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001640:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	4a2f      	ldr	r2, [pc, #188]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	6313      	str	r3, [r2, #48]	@ 0x30
 800165c:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001670:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 8001672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001676:	6313      	str	r3, [r2, #48]	@ 0x30
 8001678:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <HAL_ETH_MspInit+0x178>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001684:	2332      	movs	r3, #50	@ 0x32
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001694:	230b      	movs	r3, #11
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	481e      	ldr	r0, [pc, #120]	@ (8001718 <HAL_ETH_MspInit+0x17c>)
 80016a0:	f001 f806 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016a4:	2386      	movs	r3, #134	@ 0x86
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b4:	230b      	movs	r3, #11
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4817      	ldr	r0, [pc, #92]	@ (800171c <HAL_ETH_MspInit+0x180>)
 80016c0:	f000 fff6 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d6:	230b      	movs	r3, #11
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	480f      	ldr	r0, [pc, #60]	@ (8001720 <HAL_ETH_MspInit+0x184>)
 80016e2:	f000 ffe5 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f8:	230b      	movs	r3, #11
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4808      	ldr	r0, [pc, #32]	@ (8001724 <HAL_ETH_MspInit+0x188>)
 8001704:	f000 ffd4 	bl	80026b0 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	@ 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40028000 	.word	0x40028000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020800 	.word	0x40020800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40021800 	.word	0x40021800

08001728 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	@ 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a45      	ldr	r2, [pc, #276]	@ (800185c <HAL_UART_MspInit+0x134>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d152      	bne.n	80017f0 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_UART_MspInit+0x138>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <HAL_UART_MspInit+0x138>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a3c      	ldr	r2, [pc, #240]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b36      	ldr	r3, [pc, #216]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a35      	ldr	r2, [pc, #212]	@ (8001860 <HAL_UART_MspInit+0x138>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179e:	2308      	movs	r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	482a      	ldr	r0, [pc, #168]	@ (8001864 <HAL_UART_MspInit+0x13c>)
 80017ba:	f000 ff79 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017be:	2320      	movs	r3, #32
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ce:	2307      	movs	r3, #7
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4823      	ldr	r0, [pc, #140]	@ (8001868 <HAL_UART_MspInit+0x140>)
 80017da:	f000 ff69 	bl	80026b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2026      	movs	r0, #38	@ 0x26
 80017e4:	f000 fb4b 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e8:	2026      	movs	r0, #38	@ 0x26
 80017ea:	f000 fb64 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ee:	e031      	b.n	8001854 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_UART_MspInit+0x144>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_UART_MspInit+0x138>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_UART_MspInit+0x138>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_UART_MspInit+0x138>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001832:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001844:	2307      	movs	r3, #7
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	@ (8001868 <HAL_UART_MspInit+0x140>)
 8001850:	f000 ff2e 	bl	80026b0 <HAL_GPIO_Init>
}
 8001854:	bf00      	nop
 8001856:	3730      	adds	r7, #48	@ 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40004800 	.word	0x40004800

08001870 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001890:	d13f      	bne.n	8001912 <HAL_PCD_MspInit+0xa2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <HAL_PCD_MspInit+0xac>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a20      	ldr	r2, [pc, #128]	@ (800191c <HAL_PCD_MspInit+0xac>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <HAL_PCD_MspInit+0xac>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018ae:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c0:	230a      	movs	r3, #10
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4815      	ldr	r0, [pc, #84]	@ (8001920 <HAL_PCD_MspInit+0xb0>)
 80018cc:	f000 fef0 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	480e      	ldr	r0, [pc, #56]	@ (8001920 <HAL_PCD_MspInit+0xb0>)
 80018e6:	f000 fee3 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <HAL_PCD_MspInit+0xac>)
 80018ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ee:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_PCD_MspInit+0xac>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_PCD_MspInit+0xac>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a07      	ldr	r2, [pc, #28]	@ (800191c <HAL_PCD_MspInit+0xac>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_PCD_MspInit+0xac>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197a:	f000 f961 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <USART2_IRQHandler+0x10>)
 800198a:	f001 ff65 	bl	8003858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000458 	.word	0x20000458

08001998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_kill>:

int _kill(int pid, int sig)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019b2:	f003 ff75 	bl	80058a0 <__errno>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2216      	movs	r2, #22
 80019ba:	601a      	str	r2, [r3, #0]
  return -1;
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_exit>:

void _exit (int status)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffe7 	bl	80019a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019da:	bf00      	nop
 80019dc:	e7fd      	b.n	80019da <_exit+0x12>

080019de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e00a      	b.n	8001a06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f0:	f3af 8000 	nop.w
 80019f4:	4601      	mov	r1, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbf0      	blt.n	80019f0 <_read+0x12>
  }

  return len;
 8001a0e:	687b      	ldr	r3, [r7, #4]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e009      	b.n	8001a3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf1      	blt.n	8001a2a <_write+0x12>
  }
  return len;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_close>:

int _close(int file)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a78:	605a      	str	r2, [r3, #4]
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_isatty>:

int _isatty(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f003 feda 	bl	80058a0 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20030000 	.word	0x20030000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	20000a0c 	.word	0x20000a0c
 8001b20:	20000b60 	.word	0x20000b60

08001b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4c:	f7ff ffea 	bl	8001b24 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	@ (8001b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f003 fe99 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7a:	f7ff fa6f 	bl	800105c <main>
  bx  lr    
 8001b7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b8c:	08007d8c 	.word	0x08007d8c
  ldr r2, =_sbss
 8001b90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b94:	20000b60 	.word	0x20000b60

08001b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f94f 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff fcbc 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f967 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c1c:	f000 f92f 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000a10 	.word	0x20000a10

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000a10 	.word	0x20000a10

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff29 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff3e 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff8e 	bl	8001dbc <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5d 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff31 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff feb6 	bl	8001c68 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d008      	beq.n	8001f1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e052      	b.n	8001fc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0216 	bic.w	r2, r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <HAL_DMA_Abort+0x62>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0208 	bic.w	r2, r2, #8
 8001f5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6c:	e013      	b.n	8001f96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f6e:	f7ff fe7b 	bl	8001c68 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d90c      	bls.n	8001f96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2203      	movs	r2, #3
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e015      	b.n	8001fc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e4      	bne.n	8001f6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	223f      	movs	r2, #63	@ 0x3f
 8001faa:	409a      	lsls	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e00c      	b.n	8002002 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e08a      	b.n	8002138 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2223      	movs	r2, #35	@ 0x23
 8002030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fab1 	bl	800159c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_ETH_Init+0x130>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a3f      	ldr	r2, [pc, #252]	@ (8002140 <HAL_ETH_Init+0x130>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_ETH_Init+0x130>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_ETH_Init+0x134>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a3a      	ldr	r2, [pc, #232]	@ (8002144 <HAL_ETH_Init+0x134>)
 800205c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002060:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_ETH_Init+0x134>)
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4936      	ldr	r1, [pc, #216]	@ (8002144 <HAL_ETH_Init+0x134>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_ETH_Init+0x134>)
 8002072:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800208a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7ff fdec 	bl	8001c68 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002092:	e011      	b.n	80020b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002094:	f7ff fde8 	bl	8001c68 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020a2:	d909      	bls.n	80020b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2204      	movs	r2, #4
 80020a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	22e0      	movs	r2, #224	@ 0xe0
 80020b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e03f      	b.n	8002138 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e4      	bne.n	8002094 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f97a 	bl	80023c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fa25 	bl	8002520 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa7b 	bl	80025d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	461a      	mov	r2, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f9e3 	bl	80024b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800210e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002122:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2210      	movs	r2, #16
 8002132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800

08002148 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <ETH_SetMACConfig+0x164>)
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	7b9b      	ldrb	r3, [r3, #14]
 8002166:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	7c12      	ldrb	r2, [r2, #16]
 800216c:	2a00      	cmp	r2, #0
 800216e:	d102      	bne.n	8002176 <ETH_SetMACConfig+0x2e>
 8002170:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002174:	e000      	b.n	8002178 <ETH_SetMACConfig+0x30>
 8002176:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	7c52      	ldrb	r2, [r2, #17]
 800217e:	2a00      	cmp	r2, #0
 8002180:	d102      	bne.n	8002188 <ETH_SetMACConfig+0x40>
 8002182:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002186:	e000      	b.n	800218a <ETH_SetMACConfig+0x42>
 8002188:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800218a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002190:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7fdb      	ldrb	r3, [r3, #31]
 8002196:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002198:	431a      	orrs	r2, r3
                        macconf->Speed |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800219e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	7f92      	ldrb	r2, [r2, #30]
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d102      	bne.n	80021ae <ETH_SetMACConfig+0x66>
 80021a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ac:	e000      	b.n	80021b0 <ETH_SetMACConfig+0x68>
 80021ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80021b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7f1b      	ldrb	r3, [r3, #28]
 80021b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d102      	bne.n	80021d8 <ETH_SetMACConfig+0x90>
 80021d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d6:	e000      	b.n	80021da <ETH_SetMACConfig+0x92>
 80021d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7bdb      	ldrb	r3, [r3, #15]
 80021e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021f2:	4313      	orrs	r3, r2
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800220a:	2001      	movs	r0, #1
 800220c:	f7ff fd38 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002226:	4013      	ands	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002236:	2a00      	cmp	r2, #0
 8002238:	d101      	bne.n	800223e <ETH_SetMACConfig+0xf6>
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	e000      	b.n	8002240 <ETH_SetMACConfig+0xf8>
 800223e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002240:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002246:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800224e:	2a01      	cmp	r2, #1
 8002250:	d101      	bne.n	8002256 <ETH_SetMACConfig+0x10e>
 8002252:	2208      	movs	r2, #8
 8002254:	e000      	b.n	8002258 <ETH_SetMACConfig+0x110>
 8002256:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002258:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002260:	2a01      	cmp	r2, #1
 8002262:	d101      	bne.n	8002268 <ETH_SetMACConfig+0x120>
 8002264:	2204      	movs	r2, #4
 8002266:	e000      	b.n	800226a <ETH_SetMACConfig+0x122>
 8002268:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800226a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002272:	2a01      	cmp	r2, #1
 8002274:	d101      	bne.n	800227a <ETH_SetMACConfig+0x132>
 8002276:	2202      	movs	r2, #2
 8002278:	e000      	b.n	800227c <ETH_SetMACConfig+0x134>
 800227a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800227c:	4313      	orrs	r3, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff fcf3 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	619a      	str	r2, [r3, #24]
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	fd20810f 	.word	0xfd20810f

080022b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4b3d      	ldr	r3, [pc, #244]	@ (80023c0 <ETH_SetDMAConfig+0x110>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7b1b      	ldrb	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <ETH_SetDMAConfig+0x2c>
 80022d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022da:	e000      	b.n	80022de <ETH_SetDMAConfig+0x2e>
 80022dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7b5b      	ldrb	r3, [r3, #13]
 80022e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	7f52      	ldrb	r2, [r2, #29]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d102      	bne.n	80022f4 <ETH_SetDMAConfig+0x44>
 80022ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022f2:	e000      	b.n	80022f6 <ETH_SetDMAConfig+0x46>
 80022f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7b9b      	ldrb	r3, [r3, #14]
 80022fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7f1b      	ldrb	r3, [r3, #28]
 800230a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800230c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	7f9b      	ldrb	r3, [r3, #30]
 8002312:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002314:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800231a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002322:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002324:	4313      	orrs	r3, r2
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff fc9a 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002354:	461a      	mov	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	791b      	ldrb	r3, [r3, #4]
 800235e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002364:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800236a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002370:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002378:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800237a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002382:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002388:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002396:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff fc6b 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	f8de3f23 	.word	0xf8de3f23

080023c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0a6      	sub	sp, #152	@ 0x98
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023d8:	2300      	movs	r3, #0
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002406:	2300      	movs	r3, #0
 8002408:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002410:	2300      	movs	r3, #0
 8002412:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800242c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800243e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fe7f 	bl	8002148 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002476:	2301      	movs	r3, #1
 8002478:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800247a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800247e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002480:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002484:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800248a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff05 	bl	80022b0 <ETH_SetDMAConfig>
}
 80024a6:	bf00      	nop
 80024a8:	3798      	adds	r7, #152	@ 0x98
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3305      	adds	r3, #5
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	3204      	adds	r2, #4
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <ETH_MACAddressConfig+0x68>)
 80024d2:	4413      	add	r3, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3303      	adds	r3, #3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	061a      	lsls	r2, r3, #24
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3302      	adds	r3, #2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3301      	adds	r3, #1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4313      	orrs	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <ETH_MACAddressConfig+0x6c>)
 8002502:	4413      	add	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6013      	str	r3, [r2, #0]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40028040 	.word	0x40028040
 800251c:	40028044 	.word	0x40028044

08002520 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e03e      	b.n	80025ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	3206      	adds	r2, #6
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d80c      	bhi.n	8002590 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	e004      	b.n	800259a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d9bd      	bls.n	800252e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c4:	611a      	str	r2, [r3, #16]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	e048      	b.n	8002672 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6919      	ldr	r1, [r3, #16]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800261c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	3212      	adds	r2, #18
 800263e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d80c      	bhi.n	8002662 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6919      	ldr	r1, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	e004      	b.n	800266c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d9b3      	bls.n	80025e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	@ 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e177      	b.n	80029bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8166 	bne.w	80029b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d005      	beq.n	8002702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d017      	beq.n	80027a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80c0 	beq.w	80029b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <HAL_GPIO_Init+0x324>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	4a65      	ldr	r2, [pc, #404]	@ (80029d4 <HAL_GPIO_Init+0x324>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002844:	6453      	str	r3, [r2, #68]	@ 0x44
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_GPIO_Init+0x324>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a61      	ldr	r2, [pc, #388]	@ (80029d8 <HAL_GPIO_Init+0x328>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a58      	ldr	r2, [pc, #352]	@ (80029dc <HAL_GPIO_Init+0x32c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d037      	beq.n	80028ee <HAL_GPIO_Init+0x23e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a57      	ldr	r2, [pc, #348]	@ (80029e0 <HAL_GPIO_Init+0x330>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_GPIO_Init+0x23a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a56      	ldr	r2, [pc, #344]	@ (80029e4 <HAL_GPIO_Init+0x334>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x236>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a55      	ldr	r2, [pc, #340]	@ (80029e8 <HAL_GPIO_Init+0x338>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x232>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a54      	ldr	r2, [pc, #336]	@ (80029ec <HAL_GPIO_Init+0x33c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a53      	ldr	r2, [pc, #332]	@ (80029f0 <HAL_GPIO_Init+0x340>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x22a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	@ (80029f4 <HAL_GPIO_Init+0x344>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	@ (80029f8 <HAL_GPIO_Init+0x348>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	@ (80029fc <HAL_GPIO_Init+0x34c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a00 <HAL_GPIO_Init+0x350>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x21a>
 80028c6:	2309      	movs	r3, #9
 80028c8:	e012      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ca:	230a      	movs	r3, #10
 80028cc:	e010      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00e      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x240>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	@ (80029d8 <HAL_GPIO_Init+0x328>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002962:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002986:	4a1f      	ldr	r2, [pc, #124]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b0:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <HAL_GPIO_Init+0x354>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f ae84 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40021400 	.word	0x40021400
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40021c00 	.word	0x40021c00
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40022400 	.word	0x40022400
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	041a      	lsls	r2, r3, #16
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af02      	add	r7, sp, #8
 8002aa4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e101      	b.n	8002cb4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fed0 	bl	8001870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ade:	d102      	bne.n	8002ae6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 fe6e 	bl	80047cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7c1a      	ldrb	r2, [r3, #16]
 8002af8:	f88d 2000 	strb.w	r2, [sp]
 8002afc:	3304      	adds	r3, #4
 8002afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b00:	f001 fe00 	bl	8004704 <USB_CoreInit>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0ce      	b.n	8002cb4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fe66 	bl	80047ee <USB_SetCurrentMode>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0bf      	b.n	8002cb4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e04a      	b.n	8002bd0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3315      	adds	r3, #21
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	b298      	uxth	r0, r3
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	332e      	adds	r3, #46	@ 0x2e
 8002b76:	4602      	mov	r2, r0
 8002b78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3318      	adds	r3, #24
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	331c      	adds	r3, #28
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3320      	adds	r3, #32
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3324      	adds	r3, #36	@ 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	791b      	ldrb	r3, [r3, #4]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3af      	bcc.n	8002b3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e044      	b.n	8002c6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	3301      	adds	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	791b      	ldrb	r3, [r3, #4]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3b5      	bcc.n	8002be0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7c1a      	ldrb	r2, [r3, #16]
 8002c7c:	f88d 2000 	strb.w	r2, [sp]
 8002c80:	3304      	adds	r3, #4
 8002c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c84:	f001 fe00 	bl	8004888 <USB_DevInit>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00c      	b.n	8002cb4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 ffc8 	bl	8004c42 <USB_DevDisconnect>

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe ff78 	bl	8001c68 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe ff74 	bl	8001c68 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe ff64 	bl	8001c68 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe ff60 	bl	8001c68 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe ff19 	bl	8001c68 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe ff15 	bl	8001c68 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fef8 	bl	8001c68 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fef4 	bl	8001c68 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fed8 	bl	8001c68 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fed4 	bl	8001c68 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fec1 	bl	8001c68 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe febd 	bl	8001c68 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fe7d 	bl	8001c68 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe fe79 	bl	8001c68 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fe3e 	bl	8001c68 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fe3a 	bl	8001c68 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fe28 	bl	8001c68 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fe24 	bl	8001c68 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fdf8 	bl	8001c68 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fdf4 	bl	8001c68 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe fdcd 	bl	8001c68 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fdc9 	bl	8001c68 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fdb6 	bl	8001c68 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fdb2 	bl	8001c68 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fe fce4 	bl	8001c68 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fe fce0 	bl	8001c68 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fc44 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	080079ec 	.word	0x080079ec
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b094      	sub	sp, #80	@ 0x50
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80e1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e0db      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b73      	ldr	r3, [pc, #460]	@ (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b0:	e0db      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b73      	ldr	r3, [pc, #460]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x208>)
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b6:	e0d8      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4621      	mov	r1, r4
 8003404:	1a51      	subs	r1, r2, r1
 8003406:	6139      	str	r1, [r7, #16]
 8003408:	4629      	mov	r1, r5
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	018b      	lsls	r3, r1, #6
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003426:	4651      	mov	r1, sl
 8003428:	018a      	lsls	r2, r1, #6
 800342a:	4651      	mov	r1, sl
 800342c:	ebb2 0801 	subs.w	r8, r2, r1
 8003430:	4659      	mov	r1, fp
 8003432:	eb63 0901 	sbc.w	r9, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb18 0303 	adds.w	r3, r8, r3
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	462b      	mov	r3, r5
 8003458:	eb49 0303 	adc.w	r3, r9, r3
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346a:	4629      	mov	r1, r5
 800346c:	024b      	lsls	r3, r1, #9
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003474:	4621      	mov	r1, r4
 8003476:	024a      	lsls	r2, r1, #9
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003488:	f7fd fb9e 	bl	8000bc8 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003494:	e058      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	4611      	mov	r1, r2
 80034a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c2:	0150      	lsls	r0, r2, #5
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4641      	mov	r1, r8
 80034ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e8:	ebb2 040a 	subs.w	r4, r2, sl
 80034ec:	eb63 050b 	sbc.w	r5, r3, fp
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	464b      	mov	r3, r9
 800350c:	eb45 0303 	adc.w	r3, r5, r3
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	61fa      	str	r2, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	f7fd fb44 	bl	8000bc8 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003558:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 8003566:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800356c:	4618      	mov	r0, r3
 800356e:	3750      	adds	r7, #80	@ 0x50
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	080079fc 	.word	0x080079fc

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	080079fc 	.word	0x080079fc

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe f888 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fdf3 	bl	800421c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d175      	bne.n	8003798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Transmit+0x2c>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e06e      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	@ 0x21
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fe facd 	bl	8001c68 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003700:	e02e      	b.n	8003760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb55 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03a      	b.n	800379a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3302      	adds	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e007      	b.n	8003752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1cb      	bne.n	8003702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	@ 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb21 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d121      	bne.n	8003800 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Transmit_IT+0x26>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01a      	b.n	8003802 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2221      	movs	r2, #33	@ 0x21
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b20      	cmp	r3, #32
 8003826:	d112      	bne.n	800384e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Receive_IT+0x26>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e00b      	b.n	8003850 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	461a      	mov	r2, r3
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fb12 	bl	8003e6e <UART_Start_Receive_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	e000      	b.n	8003850 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b0ba      	sub	sp, #232	@ 0xe8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_UART_IRQHandler+0x66>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fbf2 	bl	80040a0 <UART_Receive_IT>
      return;
 80038bc:	e25b      	b.n	8003d76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80de 	beq.w	8003a84 <HAL_UART_IRQHandler+0x22c>
 80038c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80d1 	beq.w	8003a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_UART_IRQHandler+0xae>
 80038ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_UART_IRQHandler+0xd2>
 8003912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f043 0202 	orr.w	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_UART_IRQHandler+0xf6>
 8003936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f043 0204 	orr.w	r2, r3, #4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d011      	beq.n	800397e <HAL_UART_IRQHandler+0x126>
 800395a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f043 0208 	orr.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 81f2 	beq.w	8003d6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_UART_IRQHandler+0x14e>
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb7d 	bl	80040a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_UART_IRQHandler+0x17a>
 80039ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04f      	beq.n	8003a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa85 	bl	8003ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d141      	bne.n	8003a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1d9      	bne.n	80039e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d013      	beq.n	8003a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c38 <HAL_UART_IRQHandler+0x3e0>)
 8003a40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fabf 	bl	8001fca <HAL_DMA_Abort_IT>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e00e      	b.n	8003a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f994 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e00a      	b.n	8003a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f990 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	e006      	b.n	8003a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f98c 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a7e:	e175      	b.n	8003d6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	bf00      	nop
    return;
 8003a82:	e173      	b.n	8003d6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f040 814f 	bne.w	8003d2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8148 	beq.w	8003d2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8141 	beq.w	8003d2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	f040 80b6 	bne.w	8003c3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8145 	beq.w	8003d70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aee:	429a      	cmp	r2, r3
 8003af0:	f080 813e 	bcs.w	8003d70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b06:	f000 8088 	beq.w	8003c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1d9      	bne.n	8003b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e1      	bne.n	8003b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e3      	bne.n	8003b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bea:	f023 0310 	bic.w	r3, r3, #16
 8003bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e3      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe f968 	bl	8001eea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8b7 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c36:	e09b      	b.n	8003d70 <HAL_UART_IRQHandler+0x518>
 8003c38:	08003fa9 	.word	0x08003fa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 808e 	beq.w	8003d74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8089 	beq.w	8003d74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e3      	bne.n	8003c62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e3      	bne.n	8003c9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0310 	bic.w	r3, r3, #16
 8003cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	617b      	str	r3, [r7, #20]
   return(result);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e3      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f83d 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d2a:	e023      	b.n	8003d74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_UART_IRQHandler+0x4f4>
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f943 	bl	8003fd0 <UART_Transmit_IT>
    return;
 8003d4a:	e014      	b.n	8003d76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <HAL_UART_IRQHandler+0x51e>
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f983 	bl	8004070 <UART_EndTransmit_IT>
    return;
 8003d6a:	e004      	b.n	8003d76 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d6c:	bf00      	nop
 8003d6e:	e002      	b.n	8003d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d74:	bf00      	nop
  }
}
 8003d76:	37e8      	adds	r7, #232	@ 0xe8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	e03b      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd4:	d037      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fd ff47 	bl	8001c68 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	6a3a      	ldr	r2, [r7, #32]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <UART_WaitOnFlagUntilTimeout+0x30>
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03a      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d023      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b80      	cmp	r3, #128	@ 0x80
 8003e02:	d020      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b40      	cmp	r3, #64	@ 0x40
 8003e08:	d01d      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d116      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f857 	bl	8003ee2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2208      	movs	r2, #8
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d0b4      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2222      	movs	r2, #34	@ 0x22
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b095      	sub	sp, #84	@ 0x54
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e5      	bne.n	8003f1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d119      	bne.n	8003f8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 0310 	bic.w	r3, r3, #16
 8003f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f7a:	61ba      	str	r2, [r7, #24]
 8003f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	613b      	str	r3, [r7, #16]
   return(result);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f9c:	bf00      	nop
 8003f9e:	3754      	adds	r7, #84	@ 0x54
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fee4 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b21      	cmp	r3, #33	@ 0x21
 8003fe2:	d13e      	bne.n	8004062 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fec:	d114      	bne.n	8004018 <UART_Transmit_IT+0x48>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d110      	bne.n	8004018 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]
 8004016:	e008      	b.n	800402a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6211      	str	r1, [r2, #32]
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800404c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800405c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004086:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fe73 	bl	8003d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	@ 0x30
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b22      	cmp	r3, #34	@ 0x22
 80040b2:	f040 80ae 	bne.w	8004212 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040be:	d117      	bne.n	80040f0 <UART_Receive_IT+0x50>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	1c9a      	adds	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ee:	e026      	b.n	800413e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004102:	d007      	beq.n	8004114 <UART_Receive_IT+0x74>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <UART_Receive_IT+0x82>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e008      	b.n	8004134 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800412e:	b2da      	uxtb	r2, r3
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004132:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800414e:	2b00      	cmp	r3, #0
 8004150:	d15d      	bne.n	800420e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0220 	bic.w	r2, r2, #32
 8004160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d135      	bne.n	8004204 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f023 0310 	bic.w	r3, r3, #16
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041be:	623a      	str	r2, [r7, #32]
 80041c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d10a      	bne.n	80041f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041fa:	4619      	mov	r1, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fdd1 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
 8004202:	e002      	b.n	800420a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fc fe75 	bl	8000ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e002      	b.n	8004214 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e000      	b.n	8004214 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004212:	2302      	movs	r3, #2
  }
}
 8004214:	4618      	mov	r0, r3
 8004216:	3730      	adds	r7, #48	@ 0x30
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b0c0      	sub	sp, #256	@ 0x100
 8004222:	af00      	add	r7, sp, #0
 8004224:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	68d9      	ldr	r1, [r3, #12]
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	ea40 0301 	orr.w	r3, r0, r1
 8004244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	431a      	orrs	r2, r3
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004274:	f021 010c 	bic.w	r1, r1, #12
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004282:	430b      	orrs	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	6999      	ldr	r1, [r3, #24]
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	ea40 0301 	orr.w	r3, r0, r1
 80042a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b8f      	ldr	r3, [pc, #572]	@ (80044e8 <UART_SetConfig+0x2cc>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d005      	beq.n	80042bc <UART_SetConfig+0xa0>
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b8d      	ldr	r3, [pc, #564]	@ (80044ec <UART_SetConfig+0x2d0>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d104      	bne.n	80042c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042bc:	f7ff f982 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80042c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042c4:	e003      	b.n	80042ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7ff f969 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 80042ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d8:	f040 810c 	bne.w	80044f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042ee:	4622      	mov	r2, r4
 80042f0:	462b      	mov	r3, r5
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042f6:	415b      	adcs	r3, r3
 80042f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042fe:	4621      	mov	r1, r4
 8004300:	eb12 0801 	adds.w	r8, r2, r1
 8004304:	4629      	mov	r1, r5
 8004306:	eb43 0901 	adc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800432c:	462b      	mov	r3, r5
 800432e:	eb49 0303 	adc.w	r3, r9, r3
 8004332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004342:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800434a:	460b      	mov	r3, r1
 800434c:	18db      	adds	r3, r3, r3
 800434e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004350:	4613      	mov	r3, r2
 8004352:	eb42 0303 	adc.w	r3, r2, r3
 8004356:	657b      	str	r3, [r7, #84]	@ 0x54
 8004358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800435c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004360:	f7fc fc32 	bl	8000bc8 <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <UART_SetConfig+0x2d4>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	011c      	lsls	r4, r3, #4
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800437c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800438c:	415b      	adcs	r3, r3
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004394:	4641      	mov	r1, r8
 8004396:	eb12 0a01 	adds.w	sl, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0b01 	adc.w	fp, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b4:	4692      	mov	sl, r2
 80043b6:	469b      	mov	fp, r3
 80043b8:	4643      	mov	r3, r8
 80043ba:	eb1a 0303 	adds.w	r3, sl, r3
 80043be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c2:	464b      	mov	r3, r9
 80043c4:	eb4b 0303 	adc.w	r3, fp, r3
 80043c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043e0:	460b      	mov	r3, r1
 80043e2:	18db      	adds	r3, r3, r3
 80043e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e6:	4613      	mov	r3, r2
 80043e8:	eb42 0303 	adc.w	r3, r2, r3
 80043ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043f6:	f7fc fbe7 	bl	8000bc8 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2301 	umull	r2, r3, r3, r1
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2264      	movs	r2, #100	@ 0x64
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	1acb      	subs	r3, r1, r3
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004416:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <UART_SetConfig+0x2d4>)
 8004418:	fba3 2302 	umull	r2, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004424:	441c      	add	r4, r3
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004430:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004440:	415b      	adcs	r3, r3
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004448:	4641      	mov	r1, r8
 800444a:	1851      	adds	r1, r2, r1
 800444c:	6339      	str	r1, [r7, #48]	@ 0x30
 800444e:	4649      	mov	r1, r9
 8004450:	414b      	adcs	r3, r1
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004460:	4659      	mov	r1, fp
 8004462:	00cb      	lsls	r3, r1, #3
 8004464:	4651      	mov	r1, sl
 8004466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446a:	4651      	mov	r1, sl
 800446c:	00ca      	lsls	r2, r1, #3
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	4603      	mov	r3, r0
 8004474:	4642      	mov	r2, r8
 8004476:	189b      	adds	r3, r3, r2
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800447c:	464b      	mov	r3, r9
 800447e:	460a      	mov	r2, r1
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800449c:	460b      	mov	r3, r1
 800449e:	18db      	adds	r3, r3, r3
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a2:	4613      	mov	r3, r2
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044b2:	f7fc fb89 	bl	8000bc8 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x2d4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x2d4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 0207 	and.w	r2, r3, #7
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044e4:	e106      	b.n	80046f4 <UART_SetConfig+0x4d8>
 80044e6:	bf00      	nop
 80044e8:	40011000 	.word	0x40011000
 80044ec:	40011400 	.word	0x40011400
 80044f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004506:	4642      	mov	r2, r8
 8004508:	464b      	mov	r3, r9
 800450a:	1891      	adds	r1, r2, r2
 800450c:	6239      	str	r1, [r7, #32]
 800450e:	415b      	adcs	r3, r3
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
 8004512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004516:	4641      	mov	r1, r8
 8004518:	1854      	adds	r4, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb43 0501 	adc.w	r5, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	00eb      	lsls	r3, r5, #3
 800452a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	4643      	mov	r3, r8
 8004536:	18e3      	adds	r3, r4, r3
 8004538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800453c:	464b      	mov	r3, r9
 800453e:	eb45 0303 	adc.w	r3, r5, r3
 8004542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004562:	4629      	mov	r1, r5
 8004564:	008b      	lsls	r3, r1, #2
 8004566:	4621      	mov	r1, r4
 8004568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800456c:	4621      	mov	r1, r4
 800456e:	008a      	lsls	r2, r1, #2
 8004570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004574:	f7fc fb28 	bl	8000bc8 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4b60      	ldr	r3, [pc, #384]	@ (8004700 <UART_SetConfig+0x4e4>)
 800457e:	fba3 2302 	umull	r2, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	011c      	lsls	r4, r3, #4
 8004586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	61b9      	str	r1, [r7, #24]
 80045a0:	415b      	adcs	r3, r3
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a8:	4641      	mov	r1, r8
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	6139      	str	r1, [r7, #16]
 80045ae:	4649      	mov	r1, r9
 80045b0:	414b      	adcs	r3, r1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c0:	4659      	mov	r1, fp
 80045c2:	00cb      	lsls	r3, r1, #3
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ca:	4651      	mov	r1, sl
 80045cc:	00ca      	lsls	r2, r1, #3
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	4642      	mov	r2, r8
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045dc:	464b      	mov	r3, r9
 80045de:	460a      	mov	r2, r1
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004600:	4649      	mov	r1, r9
 8004602:	008b      	lsls	r3, r1, #2
 8004604:	4641      	mov	r1, r8
 8004606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460a:	4641      	mov	r1, r8
 800460c:	008a      	lsls	r2, r1, #2
 800460e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004612:	f7fc fad9 	bl	8000bc8 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4611      	mov	r1, r2
 800461c:	4b38      	ldr	r3, [pc, #224]	@ (8004700 <UART_SetConfig+0x4e4>)
 800461e:	fba3 2301 	umull	r2, r3, r3, r1
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2264      	movs	r2, #100	@ 0x64
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	1acb      	subs	r3, r1, r3
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3332      	adds	r3, #50	@ 0x32
 8004630:	4a33      	ldr	r2, [pc, #204]	@ (8004700 <UART_SetConfig+0x4e4>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800463c:	441c      	add	r4, r3
 800463e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004642:	2200      	movs	r2, #0
 8004644:	673b      	str	r3, [r7, #112]	@ 0x70
 8004646:	677a      	str	r2, [r7, #116]	@ 0x74
 8004648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	415b      	adcs	r3, r3
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800468e:	464b      	mov	r3, r9
 8004690:	460a      	mov	r2, r1
 8004692:	eb42 0303 	adc.w	r3, r2, r3
 8004696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80046a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046b0:	4649      	mov	r1, r9
 80046b2:	008b      	lsls	r3, r1, #2
 80046b4:	4641      	mov	r1, r8
 80046b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ba:	4641      	mov	r1, r8
 80046bc:	008a      	lsls	r2, r1, #2
 80046be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046c2:	f7fc fa81 	bl	8000bc8 <__aeabi_uldivmod>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <UART_SetConfig+0x4e4>)
 80046cc:	fba3 1302 	umull	r1, r3, r3, r2
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	2164      	movs	r1, #100	@ 0x64
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	3332      	adds	r3, #50	@ 0x32
 80046de:	4a08      	ldr	r2, [pc, #32]	@ (8004700 <UART_SetConfig+0x4e4>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	f003 020f 	and.w	r2, r3, #15
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4422      	add	r2, r4
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046fa:	46bd      	mov	sp, r7
 80046fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004700:	51eb851f 	.word	0x51eb851f

08004704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 001c 	add.w	r0, r7, #28
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800471a:	2b01      	cmp	r3, #1
 800471c:	d123      	bne.n	8004766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 faa0 	bl	8004ca0 <USB_CoreReset>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e01b      	b.n	800479e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa94 	bl	8004ca0 <USB_CoreReset>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800477c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004790:	e005      	b.n	800479e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800479e:	7fbb      	ldrb	r3, [r7, #30]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10b      	bne.n	80047bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f043 0206 	orr.w	r2, r3, #6
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c8:	b004      	add	sp, #16
 80047ca:	4770      	bx	lr

080047cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 0201 	bic.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d115      	bne.n	800483c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800481c:	200a      	movs	r0, #10
 800481e:	f7fd fa2f 	bl	8001c80 <HAL_Delay>
      ms += 10U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	330a      	adds	r3, #10
 8004826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa2b 	bl	8004c84 <USB_GetMode>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d01e      	beq.n	8004872 <USB_SetCurrentMode+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2bc7      	cmp	r3, #199	@ 0xc7
 8004838:	d9f0      	bls.n	800481c <USB_SetCurrentMode+0x2e>
 800483a:	e01a      	b.n	8004872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d115      	bne.n	800486e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800484e:	200a      	movs	r0, #10
 8004850:	f7fd fa16 	bl	8001c80 <HAL_Delay>
      ms += 10U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	330a      	adds	r3, #10
 8004858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa12 	bl	8004c84 <USB_GetMode>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <USB_SetCurrentMode+0x84>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2bc7      	cmp	r3, #199	@ 0xc7
 800486a:	d9f0      	bls.n	800484e <USB_SetCurrentMode+0x60>
 800486c:	e001      	b.n	8004872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e005      	b.n	800487e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2bc8      	cmp	r3, #200	@ 0xc8
 8004876:	d101      	bne.n	800487c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004888:	b084      	sub	sp, #16
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e009      	b.n	80048bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	3340      	adds	r3, #64	@ 0x40
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0e      	cmp	r3, #14
 80048c0:	d9f2      	bls.n	80048a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11c      	bne.n	8004904 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	@ 0x38
 8004902:	e00b      	b.n	800491c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004928:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10d      	bne.n	800494c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004938:	2100      	movs	r1, #0
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f968 	bl	8004c10 <USB_SetDevSpeed>
 8004940:	e008      	b.n	8004954 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004942:	2101      	movs	r1, #1
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f963 	bl	8004c10 <USB_SetDevSpeed>
 800494a:	e003      	b.n	8004954 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800494c:	2103      	movs	r1, #3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f95e 	bl	8004c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004954:	2110      	movs	r1, #16
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8fa 	bl	8004b50 <USB_FlushTxFifo>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f924 	bl	8004bb4 <USB_FlushRxFifo>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497c:	461a      	mov	r2, r3
 800497e:	2300      	movs	r3, #0
 8004980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e043      	b.n	8004a28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b6:	d118      	bne.n	80049ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e013      	b.n	80049fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e008      	b.n	80049fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d3b5      	bcc.n	80049a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e043      	b.n	8004ac2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a50:	d118      	bne.n	8004a84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e013      	b.n	8004a96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e008      	b.n	8004a96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d3b5      	bcc.n	8004a3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f043 0210 	orr.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <USB_DevInit+0x2c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f043 0208 	orr.w	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b48:	b004      	add	sp, #16
 8004b4a:	4770      	bx	lr
 8004b4c:	803c3800 	.word	0x803c3800

08004b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b6a:	d901      	bls.n	8004b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e01b      	b.n	8004ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	daf2      	bge.n	8004b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b94:	d901      	bls.n	8004b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e006      	b.n	8004ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d0f0      	beq.n	8004b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bcc:	d901      	bls.n	8004bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e018      	b.n	8004c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	daf2      	bge.n	8004bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2210      	movs	r2, #16
 8004be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bf0:	d901      	bls.n	8004bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e006      	b.n	8004c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d0f0      	beq.n	8004be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0301 	and.w	r3, r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cb8:	d901      	bls.n	8004cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e01b      	b.n	8004cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	daf2      	bge.n	8004cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ce2:	d901      	bls.n	8004ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d0f0      	beq.n	8004cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <__cvt>:
 8004d02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d06:	ec57 6b10 	vmov	r6, r7, d0
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	4619      	mov	r1, r3
 8004d10:	463b      	mov	r3, r7
 8004d12:	bfbb      	ittet	lt
 8004d14:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d18:	461f      	movlt	r7, r3
 8004d1a:	2300      	movge	r3, #0
 8004d1c:	232d      	movlt	r3, #45	@ 0x2d
 8004d1e:	700b      	strb	r3, [r1, #0]
 8004d20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d22:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d26:	4691      	mov	r9, r2
 8004d28:	f023 0820 	bic.w	r8, r3, #32
 8004d2c:	bfbc      	itt	lt
 8004d2e:	4632      	movlt	r2, r6
 8004d30:	4616      	movlt	r6, r2
 8004d32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d36:	d005      	beq.n	8004d44 <__cvt+0x42>
 8004d38:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d3c:	d100      	bne.n	8004d40 <__cvt+0x3e>
 8004d3e:	3401      	adds	r4, #1
 8004d40:	2102      	movs	r1, #2
 8004d42:	e000      	b.n	8004d46 <__cvt+0x44>
 8004d44:	2103      	movs	r1, #3
 8004d46:	ab03      	add	r3, sp, #12
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	ab02      	add	r3, sp, #8
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	ec47 6b10 	vmov	d0, r6, r7
 8004d52:	4653      	mov	r3, sl
 8004d54:	4622      	mov	r2, r4
 8004d56:	f000 fe5b 	bl	8005a10 <_dtoa_r>
 8004d5a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d5e:	4605      	mov	r5, r0
 8004d60:	d119      	bne.n	8004d96 <__cvt+0x94>
 8004d62:	f019 0f01 	tst.w	r9, #1
 8004d66:	d00e      	beq.n	8004d86 <__cvt+0x84>
 8004d68:	eb00 0904 	add.w	r9, r0, r4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d78:	b108      	cbz	r0, 8004d7e <__cvt+0x7c>
 8004d7a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d7e:	2230      	movs	r2, #48	@ 0x30
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	454b      	cmp	r3, r9
 8004d84:	d31e      	bcc.n	8004dc4 <__cvt+0xc2>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d8a:	1b5b      	subs	r3, r3, r5
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	b004      	add	sp, #16
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d9a:	eb00 0904 	add.w	r9, r0, r4
 8004d9e:	d1e5      	bne.n	8004d6c <__cvt+0x6a>
 8004da0:	7803      	ldrb	r3, [r0, #0]
 8004da2:	2b30      	cmp	r3, #48	@ 0x30
 8004da4:	d10a      	bne.n	8004dbc <__cvt+0xba>
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	4639      	mov	r1, r7
 8004dae:	f7fb fe9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8004db2:	b918      	cbnz	r0, 8004dbc <__cvt+0xba>
 8004db4:	f1c4 0401 	rsb	r4, r4, #1
 8004db8:	f8ca 4000 	str.w	r4, [sl]
 8004dbc:	f8da 3000 	ldr.w	r3, [sl]
 8004dc0:	4499      	add	r9, r3
 8004dc2:	e7d3      	b.n	8004d6c <__cvt+0x6a>
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	9103      	str	r1, [sp, #12]
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e7d9      	b.n	8004d80 <__cvt+0x7e>

08004dcc <__exponent>:
 8004dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	bfba      	itte	lt
 8004dd2:	4249      	neglt	r1, r1
 8004dd4:	232d      	movlt	r3, #45	@ 0x2d
 8004dd6:	232b      	movge	r3, #43	@ 0x2b
 8004dd8:	2909      	cmp	r1, #9
 8004dda:	7002      	strb	r2, [r0, #0]
 8004ddc:	7043      	strb	r3, [r0, #1]
 8004dde:	dd29      	ble.n	8004e34 <__exponent+0x68>
 8004de0:	f10d 0307 	add.w	r3, sp, #7
 8004de4:	461d      	mov	r5, r3
 8004de6:	270a      	movs	r7, #10
 8004de8:	461a      	mov	r2, r3
 8004dea:	fbb1 f6f7 	udiv	r6, r1, r7
 8004dee:	fb07 1416 	mls	r4, r7, r6, r1
 8004df2:	3430      	adds	r4, #48	@ 0x30
 8004df4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004df8:	460c      	mov	r4, r1
 8004dfa:	2c63      	cmp	r4, #99	@ 0x63
 8004dfc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004e00:	4631      	mov	r1, r6
 8004e02:	dcf1      	bgt.n	8004de8 <__exponent+0x1c>
 8004e04:	3130      	adds	r1, #48	@ 0x30
 8004e06:	1e94      	subs	r4, r2, #2
 8004e08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e0c:	1c41      	adds	r1, r0, #1
 8004e0e:	4623      	mov	r3, r4
 8004e10:	42ab      	cmp	r3, r5
 8004e12:	d30a      	bcc.n	8004e2a <__exponent+0x5e>
 8004e14:	f10d 0309 	add.w	r3, sp, #9
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	42ac      	cmp	r4, r5
 8004e1c:	bf88      	it	hi
 8004e1e:	2300      	movhi	r3, #0
 8004e20:	3302      	adds	r3, #2
 8004e22:	4403      	add	r3, r0
 8004e24:	1a18      	subs	r0, r3, r0
 8004e26:	b003      	add	sp, #12
 8004e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e32:	e7ed      	b.n	8004e10 <__exponent+0x44>
 8004e34:	2330      	movs	r3, #48	@ 0x30
 8004e36:	3130      	adds	r1, #48	@ 0x30
 8004e38:	7083      	strb	r3, [r0, #2]
 8004e3a:	70c1      	strb	r1, [r0, #3]
 8004e3c:	1d03      	adds	r3, r0, #4
 8004e3e:	e7f1      	b.n	8004e24 <__exponent+0x58>

08004e40 <_printf_float>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	b08d      	sub	sp, #52	@ 0x34
 8004e46:	460c      	mov	r4, r1
 8004e48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	461f      	mov	r7, r3
 8004e50:	4605      	mov	r5, r0
 8004e52:	f000 fcdb 	bl	800580c <_localeconv_r>
 8004e56:	6803      	ldr	r3, [r0, #0]
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fa18 	bl	8000290 <strlen>
 8004e60:	2300      	movs	r3, #0
 8004e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e64:	f8d8 3000 	ldr.w	r3, [r8]
 8004e68:	9005      	str	r0, [sp, #20]
 8004e6a:	3307      	adds	r3, #7
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e78:	f8d4 b000 	ldr.w	fp, [r4]
 8004e7c:	f8c8 2000 	str.w	r2, [r8]
 8004e80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e96:	4b9c      	ldr	r3, [pc, #624]	@ (8005108 <_printf_float+0x2c8>)
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e9c:	f7fb fe56 	bl	8000b4c <__aeabi_dcmpun>
 8004ea0:	bb70      	cbnz	r0, 8004f00 <_printf_float+0xc0>
 8004ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea6:	4b98      	ldr	r3, [pc, #608]	@ (8005108 <_printf_float+0x2c8>)
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eac:	f7fb fe30 	bl	8000b10 <__aeabi_dcmple>
 8004eb0:	bb30      	cbnz	r0, 8004f00 <_printf_float+0xc0>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb fe1f 	bl	8000afc <__aeabi_dcmplt>
 8004ebe:	b110      	cbz	r0, 8004ec6 <_printf_float+0x86>
 8004ec0:	232d      	movs	r3, #45	@ 0x2d
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec6:	4a91      	ldr	r2, [pc, #580]	@ (800510c <_printf_float+0x2cc>)
 8004ec8:	4b91      	ldr	r3, [pc, #580]	@ (8005110 <_printf_float+0x2d0>)
 8004eca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ece:	bf8c      	ite	hi
 8004ed0:	4690      	movhi	r8, r2
 8004ed2:	4698      	movls	r8, r3
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	f02b 0304 	bic.w	r3, fp, #4
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	9700      	str	r7, [sp, #0]
 8004ee4:	4633      	mov	r3, r6
 8004ee6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 f9d2 	bl	8005294 <_printf_common>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f040 808d 	bne.w	8005010 <_printf_float+0x1d0>
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004efa:	b00d      	add	sp, #52	@ 0x34
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb fe20 	bl	8000b4c <__aeabi_dcmpun>
 8004f0c:	b140      	cbz	r0, 8004f20 <_printf_float+0xe0>
 8004f0e:	464b      	mov	r3, r9
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bfbc      	itt	lt
 8004f14:	232d      	movlt	r3, #45	@ 0x2d
 8004f16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005114 <_printf_float+0x2d4>)
 8004f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005118 <_printf_float+0x2d8>)
 8004f1e:	e7d4      	b.n	8004eca <_printf_float+0x8a>
 8004f20:	6863      	ldr	r3, [r4, #4]
 8004f22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f26:	9206      	str	r2, [sp, #24]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	d13b      	bne.n	8004fa4 <_printf_float+0x164>
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	6063      	str	r3, [r4, #4]
 8004f30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f34:	2300      	movs	r3, #0
 8004f36:	6022      	str	r2, [r4, #0]
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f40:	ab09      	add	r3, sp, #36	@ 0x24
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	ec49 8b10 	vmov	d0, r8, r9
 8004f4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff fed7 	bl	8004d02 <__cvt>
 8004f54:	9b06      	ldr	r3, [sp, #24]
 8004f56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f58:	2b47      	cmp	r3, #71	@ 0x47
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	d129      	bne.n	8004fb2 <_printf_float+0x172>
 8004f5e:	1cc8      	adds	r0, r1, #3
 8004f60:	db02      	blt.n	8004f68 <_printf_float+0x128>
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	4299      	cmp	r1, r3
 8004f66:	dd41      	ble.n	8004fec <_printf_float+0x1ac>
 8004f68:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f6c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f70:	3901      	subs	r1, #1
 8004f72:	4652      	mov	r2, sl
 8004f74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f78:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f7a:	f7ff ff27 	bl	8004dcc <__exponent>
 8004f7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f80:	1813      	adds	r3, r2, r0
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	4681      	mov	r9, r0
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	dc02      	bgt.n	8004f90 <_printf_float+0x150>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	07d2      	lsls	r2, r2, #31
 8004f8e:	d501      	bpl.n	8004f94 <_printf_float+0x154>
 8004f90:	3301      	adds	r3, #1
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0a2      	beq.n	8004ee2 <_printf_float+0xa2>
 8004f9c:	232d      	movs	r3, #45	@ 0x2d
 8004f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fa2:	e79e      	b.n	8004ee2 <_printf_float+0xa2>
 8004fa4:	9a06      	ldr	r2, [sp, #24]
 8004fa6:	2a47      	cmp	r2, #71	@ 0x47
 8004fa8:	d1c2      	bne.n	8004f30 <_printf_float+0xf0>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1c0      	bne.n	8004f30 <_printf_float+0xf0>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e7bd      	b.n	8004f2e <_printf_float+0xee>
 8004fb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fb6:	d9db      	bls.n	8004f70 <_printf_float+0x130>
 8004fb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004fbc:	d118      	bne.n	8004ff0 <_printf_float+0x1b0>
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	dd0b      	ble.n	8004fdc <_printf_float+0x19c>
 8004fc4:	6121      	str	r1, [r4, #16]
 8004fc6:	b913      	cbnz	r3, 8004fce <_printf_float+0x18e>
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	07d0      	lsls	r0, r2, #31
 8004fcc:	d502      	bpl.n	8004fd4 <_printf_float+0x194>
 8004fce:	3301      	adds	r3, #1
 8004fd0:	440b      	add	r3, r1
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004fd6:	f04f 0900 	mov.w	r9, #0
 8004fda:	e7db      	b.n	8004f94 <_printf_float+0x154>
 8004fdc:	b913      	cbnz	r3, 8004fe4 <_printf_float+0x1a4>
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	07d2      	lsls	r2, r2, #31
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_float+0x1a8>
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	e7f4      	b.n	8004fd2 <_printf_float+0x192>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e7f2      	b.n	8004fd2 <_printf_float+0x192>
 8004fec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	db05      	blt.n	8005002 <_printf_float+0x1c2>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	6121      	str	r1, [r4, #16]
 8004ffa:	07d8      	lsls	r0, r3, #31
 8004ffc:	d5ea      	bpl.n	8004fd4 <_printf_float+0x194>
 8004ffe:	1c4b      	adds	r3, r1, #1
 8005000:	e7e7      	b.n	8004fd2 <_printf_float+0x192>
 8005002:	2900      	cmp	r1, #0
 8005004:	bfd4      	ite	le
 8005006:	f1c1 0202 	rsble	r2, r1, #2
 800500a:	2201      	movgt	r2, #1
 800500c:	4413      	add	r3, r2
 800500e:	e7e0      	b.n	8004fd2 <_printf_float+0x192>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	055a      	lsls	r2, r3, #21
 8005014:	d407      	bmi.n	8005026 <_printf_float+0x1e6>
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	4642      	mov	r2, r8
 800501a:	4631      	mov	r1, r6
 800501c:	4628      	mov	r0, r5
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	d12b      	bne.n	800507c <_printf_float+0x23c>
 8005024:	e767      	b.n	8004ef6 <_printf_float+0xb6>
 8005026:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800502a:	f240 80dd 	bls.w	80051e8 <_printf_float+0x3a8>
 800502e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	f7fb fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 800503a:	2800      	cmp	r0, #0
 800503c:	d033      	beq.n	80050a6 <_printf_float+0x266>
 800503e:	4a37      	ldr	r2, [pc, #220]	@ (800511c <_printf_float+0x2dc>)
 8005040:	2301      	movs	r3, #1
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af54 	beq.w	8004ef6 <_printf_float+0xb6>
 800504e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005052:	4543      	cmp	r3, r8
 8005054:	db02      	blt.n	800505c <_printf_float+0x21c>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	07d8      	lsls	r0, r3, #31
 800505a:	d50f      	bpl.n	800507c <_printf_float+0x23c>
 800505c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af45 	beq.w	8004ef6 <_printf_float+0xb6>
 800506c:	f04f 0900 	mov.w	r9, #0
 8005070:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005074:	f104 0a1a 	add.w	sl, r4, #26
 8005078:	45c8      	cmp	r8, r9
 800507a:	dc09      	bgt.n	8005090 <_printf_float+0x250>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	079b      	lsls	r3, r3, #30
 8005080:	f100 8103 	bmi.w	800528a <_printf_float+0x44a>
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005088:	4298      	cmp	r0, r3
 800508a:	bfb8      	it	lt
 800508c:	4618      	movlt	r0, r3
 800508e:	e734      	b.n	8004efa <_printf_float+0xba>
 8005090:	2301      	movs	r3, #1
 8005092:	4652      	mov	r2, sl
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af2b 	beq.w	8004ef6 <_printf_float+0xb6>
 80050a0:	f109 0901 	add.w	r9, r9, #1
 80050a4:	e7e8      	b.n	8005078 <_printf_float+0x238>
 80050a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc39      	bgt.n	8005120 <_printf_float+0x2e0>
 80050ac:	4a1b      	ldr	r2, [pc, #108]	@ (800511c <_printf_float+0x2dc>)
 80050ae:	2301      	movs	r3, #1
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af1d 	beq.w	8004ef6 <_printf_float+0xb6>
 80050bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80050c0:	ea59 0303 	orrs.w	r3, r9, r3
 80050c4:	d102      	bne.n	80050cc <_printf_float+0x28c>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	07d9      	lsls	r1, r3, #31
 80050ca:	d5d7      	bpl.n	800507c <_printf_float+0x23c>
 80050cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af0d 	beq.w	8004ef6 <_printf_float+0xb6>
 80050dc:	f04f 0a00 	mov.w	sl, #0
 80050e0:	f104 0b1a 	add.w	fp, r4, #26
 80050e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e6:	425b      	negs	r3, r3
 80050e8:	4553      	cmp	r3, sl
 80050ea:	dc01      	bgt.n	80050f0 <_printf_float+0x2b0>
 80050ec:	464b      	mov	r3, r9
 80050ee:	e793      	b.n	8005018 <_printf_float+0x1d8>
 80050f0:	2301      	movs	r3, #1
 80050f2:	465a      	mov	r2, fp
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f aefb 	beq.w	8004ef6 <_printf_float+0xb6>
 8005100:	f10a 0a01 	add.w	sl, sl, #1
 8005104:	e7ee      	b.n	80050e4 <_printf_float+0x2a4>
 8005106:	bf00      	nop
 8005108:	7fefffff 	.word	0x7fefffff
 800510c:	08007a08 	.word	0x08007a08
 8005110:	08007a04 	.word	0x08007a04
 8005114:	08007a10 	.word	0x08007a10
 8005118:	08007a0c 	.word	0x08007a0c
 800511c:	08007a14 	.word	0x08007a14
 8005120:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005122:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005126:	4553      	cmp	r3, sl
 8005128:	bfa8      	it	ge
 800512a:	4653      	movge	r3, sl
 800512c:	2b00      	cmp	r3, #0
 800512e:	4699      	mov	r9, r3
 8005130:	dc36      	bgt.n	80051a0 <_printf_float+0x360>
 8005132:	f04f 0b00 	mov.w	fp, #0
 8005136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800513a:	f104 021a 	add.w	r2, r4, #26
 800513e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005140:	9306      	str	r3, [sp, #24]
 8005142:	eba3 0309 	sub.w	r3, r3, r9
 8005146:	455b      	cmp	r3, fp
 8005148:	dc31      	bgt.n	80051ae <_printf_float+0x36e>
 800514a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514c:	459a      	cmp	sl, r3
 800514e:	dc3a      	bgt.n	80051c6 <_printf_float+0x386>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07da      	lsls	r2, r3, #31
 8005154:	d437      	bmi.n	80051c6 <_printf_float+0x386>
 8005156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005158:	ebaa 0903 	sub.w	r9, sl, r3
 800515c:	9b06      	ldr	r3, [sp, #24]
 800515e:	ebaa 0303 	sub.w	r3, sl, r3
 8005162:	4599      	cmp	r9, r3
 8005164:	bfa8      	it	ge
 8005166:	4699      	movge	r9, r3
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	dc33      	bgt.n	80051d6 <_printf_float+0x396>
 800516e:	f04f 0800 	mov.w	r8, #0
 8005172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005176:	f104 0b1a 	add.w	fp, r4, #26
 800517a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800517c:	ebaa 0303 	sub.w	r3, sl, r3
 8005180:	eba3 0309 	sub.w	r3, r3, r9
 8005184:	4543      	cmp	r3, r8
 8005186:	f77f af79 	ble.w	800507c <_printf_float+0x23c>
 800518a:	2301      	movs	r3, #1
 800518c:	465a      	mov	r2, fp
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f aeae 	beq.w	8004ef6 <_printf_float+0xb6>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	e7ec      	b.n	800517a <_printf_float+0x33a>
 80051a0:	4642      	mov	r2, r8
 80051a2:	4631      	mov	r1, r6
 80051a4:	4628      	mov	r0, r5
 80051a6:	47b8      	blx	r7
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1c2      	bne.n	8005132 <_printf_float+0x2f2>
 80051ac:	e6a3      	b.n	8004ef6 <_printf_float+0xb6>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	9206      	str	r2, [sp, #24]
 80051b6:	47b8      	blx	r7
 80051b8:	3001      	adds	r0, #1
 80051ba:	f43f ae9c 	beq.w	8004ef6 <_printf_float+0xb6>
 80051be:	9a06      	ldr	r2, [sp, #24]
 80051c0:	f10b 0b01 	add.w	fp, fp, #1
 80051c4:	e7bb      	b.n	800513e <_printf_float+0x2fe>
 80051c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	d1c0      	bne.n	8005156 <_printf_float+0x316>
 80051d4:	e68f      	b.n	8004ef6 <_printf_float+0xb6>
 80051d6:	9a06      	ldr	r2, [sp, #24]
 80051d8:	464b      	mov	r3, r9
 80051da:	4442      	add	r2, r8
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	d1c3      	bne.n	800516e <_printf_float+0x32e>
 80051e6:	e686      	b.n	8004ef6 <_printf_float+0xb6>
 80051e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051ec:	f1ba 0f01 	cmp.w	sl, #1
 80051f0:	dc01      	bgt.n	80051f6 <_printf_float+0x3b6>
 80051f2:	07db      	lsls	r3, r3, #31
 80051f4:	d536      	bpl.n	8005264 <_printf_float+0x424>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4642      	mov	r2, r8
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae78 	beq.w	8004ef6 <_printf_float+0xb6>
 8005206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae70 	beq.w	8004ef6 <_printf_float+0xb6>
 8005216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800521a:	2200      	movs	r2, #0
 800521c:	2300      	movs	r3, #0
 800521e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005222:	f7fb fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 8005226:	b9c0      	cbnz	r0, 800525a <_printf_float+0x41a>
 8005228:	4653      	mov	r3, sl
 800522a:	f108 0201 	add.w	r2, r8, #1
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	d10c      	bne.n	8005252 <_printf_float+0x412>
 8005238:	e65d      	b.n	8004ef6 <_printf_float+0xb6>
 800523a:	2301      	movs	r3, #1
 800523c:	465a      	mov	r2, fp
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f ae56 	beq.w	8004ef6 <_printf_float+0xb6>
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	45d0      	cmp	r8, sl
 8005250:	dbf3      	blt.n	800523a <_printf_float+0x3fa>
 8005252:	464b      	mov	r3, r9
 8005254:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005258:	e6df      	b.n	800501a <_printf_float+0x1da>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 0b1a 	add.w	fp, r4, #26
 8005262:	e7f4      	b.n	800524e <_printf_float+0x40e>
 8005264:	2301      	movs	r3, #1
 8005266:	4642      	mov	r2, r8
 8005268:	e7e1      	b.n	800522e <_printf_float+0x3ee>
 800526a:	2301      	movs	r3, #1
 800526c:	464a      	mov	r2, r9
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae3e 	beq.w	8004ef6 <_printf_float+0xb6>
 800527a:	f108 0801 	add.w	r8, r8, #1
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	4543      	cmp	r3, r8
 8005286:	dcf0      	bgt.n	800526a <_printf_float+0x42a>
 8005288:	e6fc      	b.n	8005084 <_printf_float+0x244>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	f104 0919 	add.w	r9, r4, #25
 8005292:	e7f4      	b.n	800527e <_printf_float+0x43e>

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4698      	mov	r8, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfb8      	it	lt
 80052a8:	4613      	movlt	r3, r2
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052b0:	4607      	mov	r7, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc26      	bgt.n	800532a <_printf_common+0x96>
 80052dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052e0:	6822      	ldr	r2, [r4, #0]
 80052e2:	3b00      	subs	r3, #0
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d42b      	bmi.n	8005344 <_printf_common+0xb0>
 80052ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052f0:	4641      	mov	r1, r8
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c8      	blx	r9
 80052f6:	3001      	adds	r0, #1
 80052f8:	d01e      	beq.n	8005338 <_printf_common+0xa4>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf02      	ittt	eq
 8005306:	68e5      	ldreq	r5, [r4, #12]
 8005308:	6833      	ldreq	r3, [r6, #0]
 800530a:	1aed      	subeq	r5, r5, r3
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	bf0c      	ite	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	2500      	movne	r5, #0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfc4      	itt	gt
 800531a:	1a9b      	subgt	r3, r3, r2
 800531c:	18ed      	addgt	r5, r5, r3
 800531e:	2600      	movs	r6, #0
 8005320:	341a      	adds	r4, #26
 8005322:	42b5      	cmp	r5, r6
 8005324:	d11a      	bne.n	800535c <_printf_common+0xc8>
 8005326:	2000      	movs	r0, #0
 8005328:	e008      	b.n	800533c <_printf_common+0xa8>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4641      	mov	r1, r8
 8005330:	4638      	mov	r0, r7
 8005332:	47c8      	blx	r9
 8005334:	3001      	adds	r0, #1
 8005336:	d103      	bne.n	8005340 <_printf_common+0xac>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	3501      	adds	r5, #1
 8005342:	e7c6      	b.n	80052d2 <_printf_common+0x3e>
 8005344:	18e1      	adds	r1, r4, r3
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	2030      	movs	r0, #48	@ 0x30
 800534a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800534e:	4422      	add	r2, r4
 8005350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005358:	3302      	adds	r3, #2
 800535a:	e7c7      	b.n	80052ec <_printf_common+0x58>
 800535c:	2301      	movs	r3, #1
 800535e:	4622      	mov	r2, r4
 8005360:	4641      	mov	r1, r8
 8005362:	4638      	mov	r0, r7
 8005364:	47c8      	blx	r9
 8005366:	3001      	adds	r0, #1
 8005368:	d0e6      	beq.n	8005338 <_printf_common+0xa4>
 800536a:	3601      	adds	r6, #1
 800536c:	e7d9      	b.n	8005322 <_printf_common+0x8e>
	...

08005370 <_printf_i>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	7e0f      	ldrb	r7, [r1, #24]
 8005376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005378:	2f78      	cmp	r7, #120	@ 0x78
 800537a:	4691      	mov	r9, r2
 800537c:	4680      	mov	r8, r0
 800537e:	460c      	mov	r4, r1
 8005380:	469a      	mov	sl, r3
 8005382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005386:	d807      	bhi.n	8005398 <_printf_i+0x28>
 8005388:	2f62      	cmp	r7, #98	@ 0x62
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x32>
 800538c:	2f00      	cmp	r7, #0
 800538e:	f000 80d1 	beq.w	8005534 <_printf_i+0x1c4>
 8005392:	2f58      	cmp	r7, #88	@ 0x58
 8005394:	f000 80b8 	beq.w	8005508 <_printf_i+0x198>
 8005398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800539c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053a0:	e03a      	b.n	8005418 <_printf_i+0xa8>
 80053a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053a6:	2b15      	cmp	r3, #21
 80053a8:	d8f6      	bhi.n	8005398 <_printf_i+0x28>
 80053aa:	a101      	add	r1, pc, #4	@ (adr r1, 80053b0 <_printf_i+0x40>)
 80053ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	08005399 	.word	0x08005399
 80053bc:	08005399 	.word	0x08005399
 80053c0:	08005399 	.word	0x08005399
 80053c4:	08005399 	.word	0x08005399
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005399 	.word	0x08005399
 80053d0:	08005399 	.word	0x08005399
 80053d4:	08005399 	.word	0x08005399
 80053d8:	08005399 	.word	0x08005399
 80053dc:	0800551b 	.word	0x0800551b
 80053e0:	08005447 	.word	0x08005447
 80053e4:	080054d5 	.word	0x080054d5
 80053e8:	08005399 	.word	0x08005399
 80053ec:	08005399 	.word	0x08005399
 80053f0:	0800553d 	.word	0x0800553d
 80053f4:	08005399 	.word	0x08005399
 80053f8:	08005447 	.word	0x08005447
 80053fc:	08005399 	.word	0x08005399
 8005400:	08005399 	.word	0x08005399
 8005404:	080054dd 	.word	0x080054dd
 8005408:	6833      	ldr	r3, [r6, #0]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6032      	str	r2, [r6, #0]
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005418:	2301      	movs	r3, #1
 800541a:	e09c      	b.n	8005556 <_printf_i+0x1e6>
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	6820      	ldr	r0, [r4, #0]
 8005420:	1d19      	adds	r1, r3, #4
 8005422:	6031      	str	r1, [r6, #0]
 8005424:	0606      	lsls	r6, r0, #24
 8005426:	d501      	bpl.n	800542c <_printf_i+0xbc>
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	e003      	b.n	8005434 <_printf_i+0xc4>
 800542c:	0645      	lsls	r5, r0, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0xb8>
 8005430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005434:	2d00      	cmp	r5, #0
 8005436:	da03      	bge.n	8005440 <_printf_i+0xd0>
 8005438:	232d      	movs	r3, #45	@ 0x2d
 800543a:	426d      	negs	r5, r5
 800543c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005440:	4858      	ldr	r0, [pc, #352]	@ (80055a4 <_printf_i+0x234>)
 8005442:	230a      	movs	r3, #10
 8005444:	e011      	b.n	800546a <_printf_i+0xfa>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	0608      	lsls	r0, r1, #24
 800544c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005450:	d402      	bmi.n	8005458 <_printf_i+0xe8>
 8005452:	0649      	lsls	r1, r1, #25
 8005454:	bf48      	it	mi
 8005456:	b2ad      	uxthmi	r5, r5
 8005458:	2f6f      	cmp	r7, #111	@ 0x6f
 800545a:	4852      	ldr	r0, [pc, #328]	@ (80055a4 <_printf_i+0x234>)
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	bf14      	ite	ne
 8005460:	230a      	movne	r3, #10
 8005462:	2308      	moveq	r3, #8
 8005464:	2100      	movs	r1, #0
 8005466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800546a:	6866      	ldr	r6, [r4, #4]
 800546c:	60a6      	str	r6, [r4, #8]
 800546e:	2e00      	cmp	r6, #0
 8005470:	db05      	blt.n	800547e <_printf_i+0x10e>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	432e      	orrs	r6, r5
 8005476:	f021 0104 	bic.w	r1, r1, #4
 800547a:	6021      	str	r1, [r4, #0]
 800547c:	d04b      	beq.n	8005516 <_printf_i+0x1a6>
 800547e:	4616      	mov	r6, r2
 8005480:	fbb5 f1f3 	udiv	r1, r5, r3
 8005484:	fb03 5711 	mls	r7, r3, r1, r5
 8005488:	5dc7      	ldrb	r7, [r0, r7]
 800548a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800548e:	462f      	mov	r7, r5
 8005490:	42bb      	cmp	r3, r7
 8005492:	460d      	mov	r5, r1
 8005494:	d9f4      	bls.n	8005480 <_printf_i+0x110>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d10b      	bne.n	80054b2 <_printf_i+0x142>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	07df      	lsls	r7, r3, #31
 800549e:	d508      	bpl.n	80054b2 <_printf_i+0x142>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	4299      	cmp	r1, r3
 80054a6:	bfde      	ittt	le
 80054a8:	2330      	movle	r3, #48	@ 0x30
 80054aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054b2:	1b92      	subs	r2, r2, r6
 80054b4:	6122      	str	r2, [r4, #16]
 80054b6:	f8cd a000 	str.w	sl, [sp]
 80054ba:	464b      	mov	r3, r9
 80054bc:	aa03      	add	r2, sp, #12
 80054be:	4621      	mov	r1, r4
 80054c0:	4640      	mov	r0, r8
 80054c2:	f7ff fee7 	bl	8005294 <_printf_common>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d14a      	bne.n	8005560 <_printf_i+0x1f0>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	f043 0320 	orr.w	r3, r3, #32
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	4832      	ldr	r0, [pc, #200]	@ (80055a8 <_printf_i+0x238>)
 80054de:	2778      	movs	r7, #120	@ 0x78
 80054e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	6831      	ldr	r1, [r6, #0]
 80054e8:	061f      	lsls	r7, r3, #24
 80054ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80054ee:	d402      	bmi.n	80054f6 <_printf_i+0x186>
 80054f0:	065f      	lsls	r7, r3, #25
 80054f2:	bf48      	it	mi
 80054f4:	b2ad      	uxthmi	r5, r5
 80054f6:	6031      	str	r1, [r6, #0]
 80054f8:	07d9      	lsls	r1, r3, #31
 80054fa:	bf44      	itt	mi
 80054fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005500:	6023      	strmi	r3, [r4, #0]
 8005502:	b11d      	cbz	r5, 800550c <_printf_i+0x19c>
 8005504:	2310      	movs	r3, #16
 8005506:	e7ad      	b.n	8005464 <_printf_i+0xf4>
 8005508:	4826      	ldr	r0, [pc, #152]	@ (80055a4 <_printf_i+0x234>)
 800550a:	e7e9      	b.n	80054e0 <_printf_i+0x170>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	e7f6      	b.n	8005504 <_printf_i+0x194>
 8005516:	4616      	mov	r6, r2
 8005518:	e7bd      	b.n	8005496 <_printf_i+0x126>
 800551a:	6833      	ldr	r3, [r6, #0]
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	6961      	ldr	r1, [r4, #20]
 8005520:	1d18      	adds	r0, r3, #4
 8005522:	6030      	str	r0, [r6, #0]
 8005524:	062e      	lsls	r6, r5, #24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	d501      	bpl.n	800552e <_printf_i+0x1be>
 800552a:	6019      	str	r1, [r3, #0]
 800552c:	e002      	b.n	8005534 <_printf_i+0x1c4>
 800552e:	0668      	lsls	r0, r5, #25
 8005530:	d5fb      	bpl.n	800552a <_printf_i+0x1ba>
 8005532:	8019      	strh	r1, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	4616      	mov	r6, r2
 800553a:	e7bc      	b.n	80054b6 <_printf_i+0x146>
 800553c:	6833      	ldr	r3, [r6, #0]
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	6032      	str	r2, [r6, #0]
 8005542:	681e      	ldr	r6, [r3, #0]
 8005544:	6862      	ldr	r2, [r4, #4]
 8005546:	2100      	movs	r1, #0
 8005548:	4630      	mov	r0, r6
 800554a:	f7fa fe51 	bl	80001f0 <memchr>
 800554e:	b108      	cbz	r0, 8005554 <_printf_i+0x1e4>
 8005550:	1b80      	subs	r0, r0, r6
 8005552:	6060      	str	r0, [r4, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800555e:	e7aa      	b.n	80054b6 <_printf_i+0x146>
 8005560:	6923      	ldr	r3, [r4, #16]
 8005562:	4632      	mov	r2, r6
 8005564:	4649      	mov	r1, r9
 8005566:	4640      	mov	r0, r8
 8005568:	47d0      	blx	sl
 800556a:	3001      	adds	r0, #1
 800556c:	d0ad      	beq.n	80054ca <_printf_i+0x15a>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	079b      	lsls	r3, r3, #30
 8005572:	d413      	bmi.n	800559c <_printf_i+0x22c>
 8005574:	68e0      	ldr	r0, [r4, #12]
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	4298      	cmp	r0, r3
 800557a:	bfb8      	it	lt
 800557c:	4618      	movlt	r0, r3
 800557e:	e7a6      	b.n	80054ce <_printf_i+0x15e>
 8005580:	2301      	movs	r3, #1
 8005582:	4632      	mov	r2, r6
 8005584:	4649      	mov	r1, r9
 8005586:	4640      	mov	r0, r8
 8005588:	47d0      	blx	sl
 800558a:	3001      	adds	r0, #1
 800558c:	d09d      	beq.n	80054ca <_printf_i+0x15a>
 800558e:	3501      	adds	r5, #1
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	1a5b      	subs	r3, r3, r1
 8005596:	42ab      	cmp	r3, r5
 8005598:	dcf2      	bgt.n	8005580 <_printf_i+0x210>
 800559a:	e7eb      	b.n	8005574 <_printf_i+0x204>
 800559c:	2500      	movs	r5, #0
 800559e:	f104 0619 	add.w	r6, r4, #25
 80055a2:	e7f5      	b.n	8005590 <_printf_i+0x220>
 80055a4:	08007a16 	.word	0x08007a16
 80055a8:	08007a27 	.word	0x08007a27

080055ac <std>:
 80055ac:	2300      	movs	r3, #0
 80055ae:	b510      	push	{r4, lr}
 80055b0:	4604      	mov	r4, r0
 80055b2:	e9c0 3300 	strd	r3, r3, [r0]
 80055b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ba:	6083      	str	r3, [r0, #8]
 80055bc:	8181      	strh	r1, [r0, #12]
 80055be:	6643      	str	r3, [r0, #100]	@ 0x64
 80055c0:	81c2      	strh	r2, [r0, #14]
 80055c2:	6183      	str	r3, [r0, #24]
 80055c4:	4619      	mov	r1, r3
 80055c6:	2208      	movs	r2, #8
 80055c8:	305c      	adds	r0, #92	@ 0x5c
 80055ca:	f000 f916 	bl	80057fa <memset>
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <std+0x58>)
 80055d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80055d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <std+0x5c>)
 80055d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <std+0x60>)
 80055d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <std+0x64>)
 80055dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <std+0x68>)
 80055e0:	6224      	str	r4, [r4, #32]
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d006      	beq.n	80055f4 <std+0x48>
 80055e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055ea:	4294      	cmp	r4, r2
 80055ec:	d002      	beq.n	80055f4 <std+0x48>
 80055ee:	33d0      	adds	r3, #208	@ 0xd0
 80055f0:	429c      	cmp	r4, r3
 80055f2:	d105      	bne.n	8005600 <std+0x54>
 80055f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055fc:	f000 b97a 	b.w	80058f4 <__retarget_lock_init_recursive>
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	08005775 	.word	0x08005775
 8005608:	08005797 	.word	0x08005797
 800560c:	080057cf 	.word	0x080057cf
 8005610:	080057f3 	.word	0x080057f3
 8005614:	20000a14 	.word	0x20000a14

08005618 <stdio_exit_handler>:
 8005618:	4a02      	ldr	r2, [pc, #8]	@ (8005624 <stdio_exit_handler+0xc>)
 800561a:	4903      	ldr	r1, [pc, #12]	@ (8005628 <stdio_exit_handler+0x10>)
 800561c:	4803      	ldr	r0, [pc, #12]	@ (800562c <stdio_exit_handler+0x14>)
 800561e:	f000 b869 	b.w	80056f4 <_fwalk_sglue>
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
 8005628:	0800725d 	.word	0x0800725d
 800562c:	2000001c 	.word	0x2000001c

08005630 <cleanup_stdio>:
 8005630:	6841      	ldr	r1, [r0, #4]
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <cleanup_stdio+0x34>)
 8005634:	4299      	cmp	r1, r3
 8005636:	b510      	push	{r4, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	d001      	beq.n	8005640 <cleanup_stdio+0x10>
 800563c:	f001 fe0e 	bl	800725c <_fflush_r>
 8005640:	68a1      	ldr	r1, [r4, #8]
 8005642:	4b09      	ldr	r3, [pc, #36]	@ (8005668 <cleanup_stdio+0x38>)
 8005644:	4299      	cmp	r1, r3
 8005646:	d002      	beq.n	800564e <cleanup_stdio+0x1e>
 8005648:	4620      	mov	r0, r4
 800564a:	f001 fe07 	bl	800725c <_fflush_r>
 800564e:	68e1      	ldr	r1, [r4, #12]
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <cleanup_stdio+0x3c>)
 8005652:	4299      	cmp	r1, r3
 8005654:	d004      	beq.n	8005660 <cleanup_stdio+0x30>
 8005656:	4620      	mov	r0, r4
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800565c:	f001 bdfe 	b.w	800725c <_fflush_r>
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	20000a14 	.word	0x20000a14
 8005668:	20000a7c 	.word	0x20000a7c
 800566c:	20000ae4 	.word	0x20000ae4

08005670 <global_stdio_init.part.0>:
 8005670:	b510      	push	{r4, lr}
 8005672:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <global_stdio_init.part.0+0x30>)
 8005674:	4c0b      	ldr	r4, [pc, #44]	@ (80056a4 <global_stdio_init.part.0+0x34>)
 8005676:	4a0c      	ldr	r2, [pc, #48]	@ (80056a8 <global_stdio_init.part.0+0x38>)
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	4620      	mov	r0, r4
 800567c:	2200      	movs	r2, #0
 800567e:	2104      	movs	r1, #4
 8005680:	f7ff ff94 	bl	80055ac <std>
 8005684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005688:	2201      	movs	r2, #1
 800568a:	2109      	movs	r1, #9
 800568c:	f7ff ff8e 	bl	80055ac <std>
 8005690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005694:	2202      	movs	r2, #2
 8005696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569a:	2112      	movs	r1, #18
 800569c:	f7ff bf86 	b.w	80055ac <std>
 80056a0:	20000b4c 	.word	0x20000b4c
 80056a4:	20000a14 	.word	0x20000a14
 80056a8:	08005619 	.word	0x08005619

080056ac <__sfp_lock_acquire>:
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <__sfp_lock_acquire+0x8>)
 80056ae:	f000 b922 	b.w	80058f6 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	20000b55 	.word	0x20000b55

080056b8 <__sfp_lock_release>:
 80056b8:	4801      	ldr	r0, [pc, #4]	@ (80056c0 <__sfp_lock_release+0x8>)
 80056ba:	f000 b91d 	b.w	80058f8 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	20000b55 	.word	0x20000b55

080056c4 <__sinit>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	f7ff fff0 	bl	80056ac <__sfp_lock_acquire>
 80056cc:	6a23      	ldr	r3, [r4, #32]
 80056ce:	b11b      	cbz	r3, 80056d8 <__sinit+0x14>
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f7ff bff0 	b.w	80056b8 <__sfp_lock_release>
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <__sinit+0x28>)
 80056da:	6223      	str	r3, [r4, #32]
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <__sinit+0x2c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f5      	bne.n	80056d0 <__sinit+0xc>
 80056e4:	f7ff ffc4 	bl	8005670 <global_stdio_init.part.0>
 80056e8:	e7f2      	b.n	80056d0 <__sinit+0xc>
 80056ea:	bf00      	nop
 80056ec:	08005631 	.word	0x08005631
 80056f0:	20000b4c 	.word	0x20000b4c

080056f4 <_fwalk_sglue>:
 80056f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f8:	4607      	mov	r7, r0
 80056fa:	4688      	mov	r8, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	2600      	movs	r6, #0
 8005700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005704:	f1b9 0901 	subs.w	r9, r9, #1
 8005708:	d505      	bpl.n	8005716 <_fwalk_sglue+0x22>
 800570a:	6824      	ldr	r4, [r4, #0]
 800570c:	2c00      	cmp	r4, #0
 800570e:	d1f7      	bne.n	8005700 <_fwalk_sglue+0xc>
 8005710:	4630      	mov	r0, r6
 8005712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d907      	bls.n	800572c <_fwalk_sglue+0x38>
 800571c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005720:	3301      	adds	r3, #1
 8005722:	d003      	beq.n	800572c <_fwalk_sglue+0x38>
 8005724:	4629      	mov	r1, r5
 8005726:	4638      	mov	r0, r7
 8005728:	47c0      	blx	r8
 800572a:	4306      	orrs	r6, r0
 800572c:	3568      	adds	r5, #104	@ 0x68
 800572e:	e7e9      	b.n	8005704 <_fwalk_sglue+0x10>

08005730 <siprintf>:
 8005730:	b40e      	push	{r1, r2, r3}
 8005732:	b510      	push	{r4, lr}
 8005734:	b09d      	sub	sp, #116	@ 0x74
 8005736:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9006      	str	r0, [sp, #24]
 800573c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005740:	480a      	ldr	r0, [pc, #40]	@ (800576c <siprintf+0x3c>)
 8005742:	9107      	str	r1, [sp, #28]
 8005744:	9104      	str	r1, [sp, #16]
 8005746:	490a      	ldr	r1, [pc, #40]	@ (8005770 <siprintf+0x40>)
 8005748:	f853 2b04 	ldr.w	r2, [r3], #4
 800574c:	9105      	str	r1, [sp, #20]
 800574e:	2400      	movs	r4, #0
 8005750:	a902      	add	r1, sp, #8
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005758:	f001 fc00 	bl	8006f5c <_svfiprintf_r>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	701c      	strb	r4, [r3, #0]
 8005760:	b01d      	add	sp, #116	@ 0x74
 8005762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005766:	b003      	add	sp, #12
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000018 	.word	0x20000018
 8005770:	ffff0208 	.word	0xffff0208

08005774 <__sread>:
 8005774:	b510      	push	{r4, lr}
 8005776:	460c      	mov	r4, r1
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	f000 f86c 	bl	8005858 <_read_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	bfab      	itete	ge
 8005784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005786:	89a3      	ldrhlt	r3, [r4, #12]
 8005788:	181b      	addge	r3, r3, r0
 800578a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800578e:	bfac      	ite	ge
 8005790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005792:	81a3      	strhlt	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__swrite>:
 8005796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	461f      	mov	r7, r3
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	05db      	lsls	r3, r3, #23
 80057a0:	4605      	mov	r5, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4616      	mov	r6, r2
 80057a6:	d505      	bpl.n	80057b4 <__swrite+0x1e>
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	2302      	movs	r3, #2
 80057ae:	2200      	movs	r2, #0
 80057b0:	f000 f840 	bl	8005834 <_lseek_r>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	f000 b857 	b.w	800587c <_write_r>

080057ce <__sseek>:
 80057ce:	b510      	push	{r4, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 f82d 	bl	8005834 <_lseek_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	bf15      	itete	ne
 80057e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057ea:	81a3      	strheq	r3, [r4, #12]
 80057ec:	bf18      	it	ne
 80057ee:	81a3      	strhne	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__sclose>:
 80057f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f6:	f000 b80d 	b.w	8005814 <_close_r>

080057fa <memset>:
 80057fa:	4402      	add	r2, r0
 80057fc:	4603      	mov	r3, r0
 80057fe:	4293      	cmp	r3, r2
 8005800:	d100      	bne.n	8005804 <memset+0xa>
 8005802:	4770      	bx	lr
 8005804:	f803 1b01 	strb.w	r1, [r3], #1
 8005808:	e7f9      	b.n	80057fe <memset+0x4>
	...

0800580c <_localeconv_r>:
 800580c:	4800      	ldr	r0, [pc, #0]	@ (8005810 <_localeconv_r+0x4>)
 800580e:	4770      	bx	lr
 8005810:	20000158 	.word	0x20000158

08005814 <_close_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	@ (8005830 <_close_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fc f916 	bl	8001a50 <_close>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_close_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_close_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	20000b50 	.word	0x20000b50

08005834 <_lseek_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d07      	ldr	r5, [pc, #28]	@ (8005854 <_lseek_r+0x20>)
 8005838:	4604      	mov	r4, r0
 800583a:	4608      	mov	r0, r1
 800583c:	4611      	mov	r1, r2
 800583e:	2200      	movs	r2, #0
 8005840:	602a      	str	r2, [r5, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	f7fc f92b 	bl	8001a9e <_lseek>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_lseek_r+0x1e>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_lseek_r+0x1e>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20000b50 	.word	0x20000b50

08005858 <_read_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d07      	ldr	r5, [pc, #28]	@ (8005878 <_read_r+0x20>)
 800585c:	4604      	mov	r4, r0
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	2200      	movs	r2, #0
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f7fc f8b9 	bl	80019de <_read>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_read_r+0x1e>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_read_r+0x1e>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000b50 	.word	0x20000b50

0800587c <_write_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	@ (800589c <_write_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fc f8c4 	bl	8001a18 <_write>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_write_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_write_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20000b50 	.word	0x20000b50

080058a0 <__errno>:
 80058a0:	4b01      	ldr	r3, [pc, #4]	@ (80058a8 <__errno+0x8>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000018 	.word	0x20000018

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4d0d      	ldr	r5, [pc, #52]	@ (80058e4 <__libc_init_array+0x38>)
 80058b0:	4c0d      	ldr	r4, [pc, #52]	@ (80058e8 <__libc_init_array+0x3c>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	2600      	movs	r6, #0
 80058b8:	42a6      	cmp	r6, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	4d0b      	ldr	r5, [pc, #44]	@ (80058ec <__libc_init_array+0x40>)
 80058be:	4c0c      	ldr	r4, [pc, #48]	@ (80058f0 <__libc_init_array+0x44>)
 80058c0:	f002 f86a 	bl	8007998 <_init>
 80058c4:	1b64      	subs	r4, r4, r5
 80058c6:	10a4      	asrs	r4, r4, #2
 80058c8:	2600      	movs	r6, #0
 80058ca:	42a6      	cmp	r6, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d4:	4798      	blx	r3
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	f855 3b04 	ldr.w	r3, [r5], #4
 80058de:	4798      	blx	r3
 80058e0:	3601      	adds	r6, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	08007d84 	.word	0x08007d84
 80058e8:	08007d84 	.word	0x08007d84
 80058ec:	08007d84 	.word	0x08007d84
 80058f0:	08007d88 	.word	0x08007d88

080058f4 <__retarget_lock_init_recursive>:
 80058f4:	4770      	bx	lr

080058f6 <__retarget_lock_acquire_recursive>:
 80058f6:	4770      	bx	lr

080058f8 <__retarget_lock_release_recursive>:
 80058f8:	4770      	bx	lr

080058fa <quorem>:
 80058fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fe:	6903      	ldr	r3, [r0, #16]
 8005900:	690c      	ldr	r4, [r1, #16]
 8005902:	42a3      	cmp	r3, r4
 8005904:	4607      	mov	r7, r0
 8005906:	db7e      	blt.n	8005a06 <quorem+0x10c>
 8005908:	3c01      	subs	r4, #1
 800590a:	f101 0814 	add.w	r8, r1, #20
 800590e:	00a3      	lsls	r3, r4, #2
 8005910:	f100 0514 	add.w	r5, r0, #20
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005924:	3301      	adds	r3, #1
 8005926:	429a      	cmp	r2, r3
 8005928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800592c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005930:	d32e      	bcc.n	8005990 <quorem+0x96>
 8005932:	f04f 0a00 	mov.w	sl, #0
 8005936:	46c4      	mov	ip, r8
 8005938:	46ae      	mov	lr, r5
 800593a:	46d3      	mov	fp, sl
 800593c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005940:	b298      	uxth	r0, r3
 8005942:	fb06 a000 	mla	r0, r6, r0, sl
 8005946:	0c02      	lsrs	r2, r0, #16
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	fb06 2303 	mla	r3, r6, r3, r2
 800594e:	f8de 2000 	ldr.w	r2, [lr]
 8005952:	b280      	uxth	r0, r0
 8005954:	b292      	uxth	r2, r2
 8005956:	1a12      	subs	r2, r2, r0
 8005958:	445a      	add	r2, fp
 800595a:	f8de 0000 	ldr.w	r0, [lr]
 800595e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005962:	b29b      	uxth	r3, r3
 8005964:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005968:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800596c:	b292      	uxth	r2, r2
 800596e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005972:	45e1      	cmp	r9, ip
 8005974:	f84e 2b04 	str.w	r2, [lr], #4
 8005978:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800597c:	d2de      	bcs.n	800593c <quorem+0x42>
 800597e:	9b00      	ldr	r3, [sp, #0]
 8005980:	58eb      	ldr	r3, [r5, r3]
 8005982:	b92b      	cbnz	r3, 8005990 <quorem+0x96>
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	3b04      	subs	r3, #4
 8005988:	429d      	cmp	r5, r3
 800598a:	461a      	mov	r2, r3
 800598c:	d32f      	bcc.n	80059ee <quorem+0xf4>
 800598e:	613c      	str	r4, [r7, #16]
 8005990:	4638      	mov	r0, r7
 8005992:	f001 f97f 	bl	8006c94 <__mcmp>
 8005996:	2800      	cmp	r0, #0
 8005998:	db25      	blt.n	80059e6 <quorem+0xec>
 800599a:	4629      	mov	r1, r5
 800599c:	2000      	movs	r0, #0
 800599e:	f858 2b04 	ldr.w	r2, [r8], #4
 80059a2:	f8d1 c000 	ldr.w	ip, [r1]
 80059a6:	fa1f fe82 	uxth.w	lr, r2
 80059aa:	fa1f f38c 	uxth.w	r3, ip
 80059ae:	eba3 030e 	sub.w	r3, r3, lr
 80059b2:	4403      	add	r3, r0
 80059b4:	0c12      	lsrs	r2, r2, #16
 80059b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c4:	45c1      	cmp	r9, r8
 80059c6:	f841 3b04 	str.w	r3, [r1], #4
 80059ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059ce:	d2e6      	bcs.n	800599e <quorem+0xa4>
 80059d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059d8:	b922      	cbnz	r2, 80059e4 <quorem+0xea>
 80059da:	3b04      	subs	r3, #4
 80059dc:	429d      	cmp	r5, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	d30b      	bcc.n	80059fa <quorem+0x100>
 80059e2:	613c      	str	r4, [r7, #16]
 80059e4:	3601      	adds	r6, #1
 80059e6:	4630      	mov	r0, r6
 80059e8:	b003      	add	sp, #12
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	3b04      	subs	r3, #4
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	d1cb      	bne.n	800598e <quorem+0x94>
 80059f6:	3c01      	subs	r4, #1
 80059f8:	e7c6      	b.n	8005988 <quorem+0x8e>
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	3b04      	subs	r3, #4
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d1ef      	bne.n	80059e2 <quorem+0xe8>
 8005a02:	3c01      	subs	r4, #1
 8005a04:	e7ea      	b.n	80059dc <quorem+0xe2>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7ee      	b.n	80059e8 <quorem+0xee>
 8005a0a:	0000      	movs	r0, r0
 8005a0c:	0000      	movs	r0, r0
	...

08005a10 <_dtoa_r>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	69c7      	ldr	r7, [r0, #28]
 8005a16:	b097      	sub	sp, #92	@ 0x5c
 8005a18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005a1c:	ec55 4b10 	vmov	r4, r5, d0
 8005a20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005a22:	9107      	str	r1, [sp, #28]
 8005a24:	4681      	mov	r9, r0
 8005a26:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a28:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a2a:	b97f      	cbnz	r7, 8005a4c <_dtoa_r+0x3c>
 8005a2c:	2010      	movs	r0, #16
 8005a2e:	f000 fe09 	bl	8006644 <malloc>
 8005a32:	4602      	mov	r2, r0
 8005a34:	f8c9 001c 	str.w	r0, [r9, #28]
 8005a38:	b920      	cbnz	r0, 8005a44 <_dtoa_r+0x34>
 8005a3a:	4ba9      	ldr	r3, [pc, #676]	@ (8005ce0 <_dtoa_r+0x2d0>)
 8005a3c:	21ef      	movs	r1, #239	@ 0xef
 8005a3e:	48a9      	ldr	r0, [pc, #676]	@ (8005ce4 <_dtoa_r+0x2d4>)
 8005a40:	f001 fc6c 	bl	800731c <__assert_func>
 8005a44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a48:	6007      	str	r7, [r0, #0]
 8005a4a:	60c7      	str	r7, [r0, #12]
 8005a4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	b159      	cbz	r1, 8005a6c <_dtoa_r+0x5c>
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	604a      	str	r2, [r1, #4]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4093      	lsls	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
 8005a5e:	4648      	mov	r0, r9
 8005a60:	f000 fee6 	bl	8006830 <_Bfree>
 8005a64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	1e2b      	subs	r3, r5, #0
 8005a6e:	bfb9      	ittee	lt
 8005a70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	9305      	strlt	r3, [sp, #20]
 8005a76:	2300      	movge	r3, #0
 8005a78:	6033      	strge	r3, [r6, #0]
 8005a7a:	9f05      	ldr	r7, [sp, #20]
 8005a7c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ce8 <_dtoa_r+0x2d8>)
 8005a7e:	bfbc      	itt	lt
 8005a80:	2201      	movlt	r2, #1
 8005a82:	6032      	strlt	r2, [r6, #0]
 8005a84:	43bb      	bics	r3, r7
 8005a86:	d112      	bne.n	8005aae <_dtoa_r+0x9e>
 8005a88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005a8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a94:	4323      	orrs	r3, r4
 8005a96:	f000 855a 	beq.w	800654e <_dtoa_r+0xb3e>
 8005a9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005cfc <_dtoa_r+0x2ec>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 855c 	beq.w	800655e <_dtoa_r+0xb4e>
 8005aa6:	f10a 0303 	add.w	r3, sl, #3
 8005aaa:	f000 bd56 	b.w	800655a <_dtoa_r+0xb4a>
 8005aae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	ec51 0b17 	vmov	r0, r1, d7
 8005ab8:	2300      	movs	r3, #0
 8005aba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005abe:	f7fb f813 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	b158      	cbz	r0, 8005ade <_dtoa_r+0xce>
 8005ac6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ac8:	2301      	movs	r3, #1
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ace:	b113      	cbz	r3, 8005ad6 <_dtoa_r+0xc6>
 8005ad0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005ad2:	4b86      	ldr	r3, [pc, #536]	@ (8005cec <_dtoa_r+0x2dc>)
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005d00 <_dtoa_r+0x2f0>
 8005ada:	f000 bd40 	b.w	800655e <_dtoa_r+0xb4e>
 8005ade:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005ae2:	aa14      	add	r2, sp, #80	@ 0x50
 8005ae4:	a915      	add	r1, sp, #84	@ 0x54
 8005ae6:	4648      	mov	r0, r9
 8005ae8:	f001 f984 	bl	8006df4 <__d2b>
 8005aec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005af0:	9002      	str	r0, [sp, #8]
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	d078      	beq.n	8005be8 <_dtoa_r+0x1d8>
 8005af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005af8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b10:	4619      	mov	r1, r3
 8005b12:	2200      	movs	r2, #0
 8005b14:	4b76      	ldr	r3, [pc, #472]	@ (8005cf0 <_dtoa_r+0x2e0>)
 8005b16:	f7fa fbc7 	bl	80002a8 <__aeabi_dsub>
 8005b1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005cc8 <_dtoa_r+0x2b8>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fd7a 	bl	8000618 <__aeabi_dmul>
 8005b24:	a36a      	add	r3, pc, #424	@ (adr r3, 8005cd0 <_dtoa_r+0x2c0>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fbbf 	bl	80002ac <__adddf3>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4630      	mov	r0, r6
 8005b32:	460d      	mov	r5, r1
 8005b34:	f7fa fd06 	bl	8000544 <__aeabi_i2d>
 8005b38:	a367      	add	r3, pc, #412	@ (adr r3, 8005cd8 <_dtoa_r+0x2c8>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fd6b 	bl	8000618 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fbaf 	bl	80002ac <__adddf3>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	f7fb f811 	bl	8000b78 <__aeabi_d2iz>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4607      	mov	r7, r0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa ffcc 	bl	8000afc <__aeabi_dcmplt>
 8005b64:	b140      	cbz	r0, 8005b78 <_dtoa_r+0x168>
 8005b66:	4638      	mov	r0, r7
 8005b68:	f7fa fcec 	bl	8000544 <__aeabi_i2d>
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	f7fa ffba 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b74:	b900      	cbnz	r0, 8005b78 <_dtoa_r+0x168>
 8005b76:	3f01      	subs	r7, #1
 8005b78:	2f16      	cmp	r7, #22
 8005b7a:	d852      	bhi.n	8005c22 <_dtoa_r+0x212>
 8005b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8005cf4 <_dtoa_r+0x2e4>)
 8005b7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b8a:	f7fa ffb7 	bl	8000afc <__aeabi_dcmplt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d049      	beq.n	8005c26 <_dtoa_r+0x216>
 8005b92:	3f01      	subs	r7, #1
 8005b94:	2300      	movs	r3, #0
 8005b96:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b9a:	1b9b      	subs	r3, r3, r6
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	bf45      	ittet	mi
 8005ba0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ba4:	9300      	strmi	r3, [sp, #0]
 8005ba6:	2300      	movpl	r3, #0
 8005ba8:	2300      	movmi	r3, #0
 8005baa:	9206      	str	r2, [sp, #24]
 8005bac:	bf54      	ite	pl
 8005bae:	9300      	strpl	r3, [sp, #0]
 8005bb0:	9306      	strmi	r3, [sp, #24]
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	db39      	blt.n	8005c2a <_dtoa_r+0x21a>
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005bba:	443b      	add	r3, r7
 8005bbc:	9306      	str	r3, [sp, #24]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9308      	str	r3, [sp, #32]
 8005bc2:	9b07      	ldr	r3, [sp, #28]
 8005bc4:	2b09      	cmp	r3, #9
 8005bc6:	d863      	bhi.n	8005c90 <_dtoa_r+0x280>
 8005bc8:	2b05      	cmp	r3, #5
 8005bca:	bfc4      	itt	gt
 8005bcc:	3b04      	subgt	r3, #4
 8005bce:	9307      	strgt	r3, [sp, #28]
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd6:	bfcc      	ite	gt
 8005bd8:	2400      	movgt	r4, #0
 8005bda:	2401      	movle	r4, #1
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d863      	bhi.n	8005ca8 <_dtoa_r+0x298>
 8005be0:	e8df f003 	tbb	[pc, r3]
 8005be4:	2b375452 	.word	0x2b375452
 8005be8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005bec:	441e      	add	r6, r3
 8005bee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	bfc1      	itttt	gt
 8005bf6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005bfa:	409f      	lslgt	r7, r3
 8005bfc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c00:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c04:	bfd6      	itet	le
 8005c06:	f1c3 0320 	rsble	r3, r3, #32
 8005c0a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c0e:	fa04 f003 	lslle.w	r0, r4, r3
 8005c12:	f7fa fc87 	bl	8000524 <__aeabi_ui2d>
 8005c16:	2201      	movs	r2, #1
 8005c18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c1c:	3e01      	subs	r6, #1
 8005c1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c20:	e776      	b.n	8005b10 <_dtoa_r+0x100>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7b7      	b.n	8005b96 <_dtoa_r+0x186>
 8005c26:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c28:	e7b6      	b.n	8005b98 <_dtoa_r+0x188>
 8005c2a:	9b00      	ldr	r3, [sp, #0]
 8005c2c:	1bdb      	subs	r3, r3, r7
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	427b      	negs	r3, r7
 8005c32:	9308      	str	r3, [sp, #32]
 8005c34:	2300      	movs	r3, #0
 8005c36:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c38:	e7c3      	b.n	8005bc2 <_dtoa_r+0x1b2>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c40:	eb07 0b03 	add.w	fp, r7, r3
 8005c44:	f10b 0301 	add.w	r3, fp, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	bfb8      	it	lt
 8005c4e:	2301      	movlt	r3, #1
 8005c50:	e006      	b.n	8005c60 <_dtoa_r+0x250>
 8005c52:	2301      	movs	r3, #1
 8005c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dd28      	ble.n	8005cae <_dtoa_r+0x29e>
 8005c5c:	469b      	mov	fp, r3
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005c64:	2100      	movs	r1, #0
 8005c66:	2204      	movs	r2, #4
 8005c68:	f102 0514 	add.w	r5, r2, #20
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	d926      	bls.n	8005cbe <_dtoa_r+0x2ae>
 8005c70:	6041      	str	r1, [r0, #4]
 8005c72:	4648      	mov	r0, r9
 8005c74:	f000 fd9c 	bl	80067b0 <_Balloc>
 8005c78:	4682      	mov	sl, r0
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d142      	bne.n	8005d04 <_dtoa_r+0x2f4>
 8005c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <_dtoa_r+0x2e8>)
 8005c80:	4602      	mov	r2, r0
 8005c82:	f240 11af 	movw	r1, #431	@ 0x1af
 8005c86:	e6da      	b.n	8005a3e <_dtoa_r+0x2e>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e7e3      	b.n	8005c54 <_dtoa_r+0x244>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7d5      	b.n	8005c3c <_dtoa_r+0x22c>
 8005c90:	2401      	movs	r4, #1
 8005c92:	2300      	movs	r3, #0
 8005c94:	9307      	str	r3, [sp, #28]
 8005c96:	9409      	str	r4, [sp, #36]	@ 0x24
 8005c98:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ca2:	2312      	movs	r3, #18
 8005ca4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ca6:	e7db      	b.n	8005c60 <_dtoa_r+0x250>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cac:	e7f4      	b.n	8005c98 <_dtoa_r+0x288>
 8005cae:	f04f 0b01 	mov.w	fp, #1
 8005cb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cb6:	465b      	mov	r3, fp
 8005cb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005cbc:	e7d0      	b.n	8005c60 <_dtoa_r+0x250>
 8005cbe:	3101      	adds	r1, #1
 8005cc0:	0052      	lsls	r2, r2, #1
 8005cc2:	e7d1      	b.n	8005c68 <_dtoa_r+0x258>
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	636f4361 	.word	0x636f4361
 8005ccc:	3fd287a7 	.word	0x3fd287a7
 8005cd0:	8b60c8b3 	.word	0x8b60c8b3
 8005cd4:	3fc68a28 	.word	0x3fc68a28
 8005cd8:	509f79fb 	.word	0x509f79fb
 8005cdc:	3fd34413 	.word	0x3fd34413
 8005ce0:	08007a45 	.word	0x08007a45
 8005ce4:	08007a5c 	.word	0x08007a5c
 8005ce8:	7ff00000 	.word	0x7ff00000
 8005cec:	08007a15 	.word	0x08007a15
 8005cf0:	3ff80000 	.word	0x3ff80000
 8005cf4:	08007bb0 	.word	0x08007bb0
 8005cf8:	08007ab4 	.word	0x08007ab4
 8005cfc:	08007a41 	.word	0x08007a41
 8005d00:	08007a14 	.word	0x08007a14
 8005d04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d08:	6018      	str	r0, [r3, #0]
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	2b0e      	cmp	r3, #14
 8005d0e:	f200 80a1 	bhi.w	8005e54 <_dtoa_r+0x444>
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	f000 809e 	beq.w	8005e54 <_dtoa_r+0x444>
 8005d18:	2f00      	cmp	r7, #0
 8005d1a:	dd33      	ble.n	8005d84 <_dtoa_r+0x374>
 8005d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005f90 <_dtoa_r+0x580>)
 8005d1e:	f007 020f 	and.w	r2, r7, #15
 8005d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d26:	ed93 7b00 	vldr	d7, [r3]
 8005d2a:	05f8      	lsls	r0, r7, #23
 8005d2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005d30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d34:	d516      	bpl.n	8005d64 <_dtoa_r+0x354>
 8005d36:	4b97      	ldr	r3, [pc, #604]	@ (8005f94 <_dtoa_r+0x584>)
 8005d38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d40:	f7fa fd94 	bl	800086c <__aeabi_ddiv>
 8005d44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d48:	f004 040f 	and.w	r4, r4, #15
 8005d4c:	2603      	movs	r6, #3
 8005d4e:	4d91      	ldr	r5, [pc, #580]	@ (8005f94 <_dtoa_r+0x584>)
 8005d50:	b954      	cbnz	r4, 8005d68 <_dtoa_r+0x358>
 8005d52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d5a:	f7fa fd87 	bl	800086c <__aeabi_ddiv>
 8005d5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d62:	e028      	b.n	8005db6 <_dtoa_r+0x3a6>
 8005d64:	2602      	movs	r6, #2
 8005d66:	e7f2      	b.n	8005d4e <_dtoa_r+0x33e>
 8005d68:	07e1      	lsls	r1, r4, #31
 8005d6a:	d508      	bpl.n	8005d7e <_dtoa_r+0x36e>
 8005d6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005d70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d74:	f7fa fc50 	bl	8000618 <__aeabi_dmul>
 8005d78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	1064      	asrs	r4, r4, #1
 8005d80:	3508      	adds	r5, #8
 8005d82:	e7e5      	b.n	8005d50 <_dtoa_r+0x340>
 8005d84:	f000 80af 	beq.w	8005ee6 <_dtoa_r+0x4d6>
 8005d88:	427c      	negs	r4, r7
 8005d8a:	4b81      	ldr	r3, [pc, #516]	@ (8005f90 <_dtoa_r+0x580>)
 8005d8c:	4d81      	ldr	r5, [pc, #516]	@ (8005f94 <_dtoa_r+0x584>)
 8005d8e:	f004 020f 	and.w	r2, r4, #15
 8005d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d9e:	f7fa fc3b 	bl	8000618 <__aeabi_dmul>
 8005da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005da6:	1124      	asrs	r4, r4, #4
 8005da8:	2300      	movs	r3, #0
 8005daa:	2602      	movs	r6, #2
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	f040 808f 	bne.w	8005ed0 <_dtoa_r+0x4c0>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1d3      	bne.n	8005d5e <_dtoa_r+0x34e>
 8005db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005db8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8094 	beq.w	8005eea <_dtoa_r+0x4da>
 8005dc2:	4b75      	ldr	r3, [pc, #468]	@ (8005f98 <_dtoa_r+0x588>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fe97 	bl	8000afc <__aeabi_dcmplt>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f000 808b 	beq.w	8005eea <_dtoa_r+0x4da>
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8087 	beq.w	8005eea <_dtoa_r+0x4da>
 8005ddc:	f1bb 0f00 	cmp.w	fp, #0
 8005de0:	dd34      	ble.n	8005e4c <_dtoa_r+0x43c>
 8005de2:	4620      	mov	r0, r4
 8005de4:	4b6d      	ldr	r3, [pc, #436]	@ (8005f9c <_dtoa_r+0x58c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa fc15 	bl	8000618 <__aeabi_dmul>
 8005dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005df2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005df6:	3601      	adds	r6, #1
 8005df8:	465c      	mov	r4, fp
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7fa fba2 	bl	8000544 <__aeabi_i2d>
 8005e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e04:	f7fa fc08 	bl	8000618 <__aeabi_dmul>
 8005e08:	4b65      	ldr	r3, [pc, #404]	@ (8005fa0 <_dtoa_r+0x590>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f7fa fa4e 	bl	80002ac <__adddf3>
 8005e10:	4605      	mov	r5, r0
 8005e12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e16:	2c00      	cmp	r4, #0
 8005e18:	d16a      	bne.n	8005ef0 <_dtoa_r+0x4e0>
 8005e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e1e:	4b61      	ldr	r3, [pc, #388]	@ (8005fa4 <_dtoa_r+0x594>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	f7fa fa41 	bl	80002a8 <__aeabi_dsub>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4633      	mov	r3, r6
 8005e32:	f7fa fe81 	bl	8000b38 <__aeabi_dcmpgt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f040 8298 	bne.w	800636c <_dtoa_r+0x95c>
 8005e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e40:	462a      	mov	r2, r5
 8005e42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e46:	f7fa fe59 	bl	8000afc <__aeabi_dcmplt>
 8005e4a:	bb38      	cbnz	r0, 8005e9c <_dtoa_r+0x48c>
 8005e4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005e50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f2c0 8157 	blt.w	800610a <_dtoa_r+0x6fa>
 8005e5c:	2f0e      	cmp	r7, #14
 8005e5e:	f300 8154 	bgt.w	800610a <_dtoa_r+0x6fa>
 8005e62:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <_dtoa_r+0x580>)
 8005e64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e68:	ed93 7b00 	vldr	d7, [r3]
 8005e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	ed8d 7b00 	vstr	d7, [sp]
 8005e74:	f280 80e5 	bge.w	8006042 <_dtoa_r+0x632>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f300 80e1 	bgt.w	8006042 <_dtoa_r+0x632>
 8005e80:	d10c      	bne.n	8005e9c <_dtoa_r+0x48c>
 8005e82:	4b48      	ldr	r3, [pc, #288]	@ (8005fa4 <_dtoa_r+0x594>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	ec51 0b17 	vmov	r0, r1, d7
 8005e8a:	f7fa fbc5 	bl	8000618 <__aeabi_dmul>
 8005e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e92:	f7fa fe47 	bl	8000b24 <__aeabi_dcmpge>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f000 8266 	beq.w	8006368 <_dtoa_r+0x958>
 8005e9c:	2400      	movs	r4, #0
 8005e9e:	4625      	mov	r5, r4
 8005ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ea2:	4656      	mov	r6, sl
 8005ea4:	ea6f 0803 	mvn.w	r8, r3
 8005ea8:	2700      	movs	r7, #0
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4648      	mov	r0, r9
 8005eae:	f000 fcbf 	bl	8006830 <_Bfree>
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	f000 80bd 	beq.w	8006032 <_dtoa_r+0x622>
 8005eb8:	b12f      	cbz	r7, 8005ec6 <_dtoa_r+0x4b6>
 8005eba:	42af      	cmp	r7, r5
 8005ebc:	d003      	beq.n	8005ec6 <_dtoa_r+0x4b6>
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	f000 fcb5 	bl	8006830 <_Bfree>
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	4648      	mov	r0, r9
 8005eca:	f000 fcb1 	bl	8006830 <_Bfree>
 8005ece:	e0b0      	b.n	8006032 <_dtoa_r+0x622>
 8005ed0:	07e2      	lsls	r2, r4, #31
 8005ed2:	d505      	bpl.n	8005ee0 <_dtoa_r+0x4d0>
 8005ed4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ed8:	f7fa fb9e 	bl	8000618 <__aeabi_dmul>
 8005edc:	3601      	adds	r6, #1
 8005ede:	2301      	movs	r3, #1
 8005ee0:	1064      	asrs	r4, r4, #1
 8005ee2:	3508      	adds	r5, #8
 8005ee4:	e762      	b.n	8005dac <_dtoa_r+0x39c>
 8005ee6:	2602      	movs	r6, #2
 8005ee8:	e765      	b.n	8005db6 <_dtoa_r+0x3a6>
 8005eea:	9c03      	ldr	r4, [sp, #12]
 8005eec:	46b8      	mov	r8, r7
 8005eee:	e784      	b.n	8005dfa <_dtoa_r+0x3ea>
 8005ef0:	4b27      	ldr	r3, [pc, #156]	@ (8005f90 <_dtoa_r+0x580>)
 8005ef2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005efc:	4454      	add	r4, sl
 8005efe:	2900      	cmp	r1, #0
 8005f00:	d054      	beq.n	8005fac <_dtoa_r+0x59c>
 8005f02:	4929      	ldr	r1, [pc, #164]	@ (8005fa8 <_dtoa_r+0x598>)
 8005f04:	2000      	movs	r0, #0
 8005f06:	f7fa fcb1 	bl	800086c <__aeabi_ddiv>
 8005f0a:	4633      	mov	r3, r6
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	f7fa f9cb 	bl	80002a8 <__aeabi_dsub>
 8005f12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f16:	4656      	mov	r6, sl
 8005f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1c:	f7fa fe2c 	bl	8000b78 <__aeabi_d2iz>
 8005f20:	4605      	mov	r5, r0
 8005f22:	f7fa fb0f 	bl	8000544 <__aeabi_i2d>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2e:	f7fa f9bb 	bl	80002a8 <__aeabi_dsub>
 8005f32:	3530      	adds	r5, #48	@ 0x30
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f3c:	f806 5b01 	strb.w	r5, [r6], #1
 8005f40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f44:	f7fa fdda 	bl	8000afc <__aeabi_dcmplt>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d172      	bne.n	8006032 <_dtoa_r+0x622>
 8005f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f50:	4911      	ldr	r1, [pc, #68]	@ (8005f98 <_dtoa_r+0x588>)
 8005f52:	2000      	movs	r0, #0
 8005f54:	f7fa f9a8 	bl	80002a8 <__aeabi_dsub>
 8005f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f5c:	f7fa fdce 	bl	8000afc <__aeabi_dcmplt>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f040 80b4 	bne.w	80060ce <_dtoa_r+0x6be>
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	f43f af70 	beq.w	8005e4c <_dtoa_r+0x43c>
 8005f6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <_dtoa_r+0x58c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	f7fa fb50 	bl	8000618 <__aeabi_dmul>
 8005f78:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <_dtoa_r+0x58c>)
 8005f7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f7e:	2200      	movs	r2, #0
 8005f80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f84:	f7fa fb48 	bl	8000618 <__aeabi_dmul>
 8005f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f8c:	e7c4      	b.n	8005f18 <_dtoa_r+0x508>
 8005f8e:	bf00      	nop
 8005f90:	08007bb0 	.word	0x08007bb0
 8005f94:	08007b88 	.word	0x08007b88
 8005f98:	3ff00000 	.word	0x3ff00000
 8005f9c:	40240000 	.word	0x40240000
 8005fa0:	401c0000 	.word	0x401c0000
 8005fa4:	40140000 	.word	0x40140000
 8005fa8:	3fe00000 	.word	0x3fe00000
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f7fa fb32 	bl	8000618 <__aeabi_dmul>
 8005fb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005fba:	4656      	mov	r6, sl
 8005fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc0:	f7fa fdda 	bl	8000b78 <__aeabi_d2iz>
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	f7fa fabd 	bl	8000544 <__aeabi_i2d>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd2:	f7fa f969 	bl	80002a8 <__aeabi_dsub>
 8005fd6:	3530      	adds	r5, #48	@ 0x30
 8005fd8:	f806 5b01 	strb.w	r5, [r6], #1
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	d124      	bne.n	8006036 <_dtoa_r+0x626>
 8005fec:	4baf      	ldr	r3, [pc, #700]	@ (80062ac <_dtoa_r+0x89c>)
 8005fee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005ff2:	f7fa f95b 	bl	80002ac <__adddf3>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ffe:	f7fa fd9b 	bl	8000b38 <__aeabi_dcmpgt>
 8006002:	2800      	cmp	r0, #0
 8006004:	d163      	bne.n	80060ce <_dtoa_r+0x6be>
 8006006:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800600a:	49a8      	ldr	r1, [pc, #672]	@ (80062ac <_dtoa_r+0x89c>)
 800600c:	2000      	movs	r0, #0
 800600e:	f7fa f94b 	bl	80002a8 <__aeabi_dsub>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800601a:	f7fa fd6f 	bl	8000afc <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	f43f af14 	beq.w	8005e4c <_dtoa_r+0x43c>
 8006024:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006026:	1e73      	subs	r3, r6, #1
 8006028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800602a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800602e:	2b30      	cmp	r3, #48	@ 0x30
 8006030:	d0f8      	beq.n	8006024 <_dtoa_r+0x614>
 8006032:	4647      	mov	r7, r8
 8006034:	e03b      	b.n	80060ae <_dtoa_r+0x69e>
 8006036:	4b9e      	ldr	r3, [pc, #632]	@ (80062b0 <_dtoa_r+0x8a0>)
 8006038:	f7fa faee 	bl	8000618 <__aeabi_dmul>
 800603c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006040:	e7bc      	b.n	8005fbc <_dtoa_r+0x5ac>
 8006042:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006046:	4656      	mov	r6, sl
 8006048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa fc0c 	bl	800086c <__aeabi_ddiv>
 8006054:	f7fa fd90 	bl	8000b78 <__aeabi_d2iz>
 8006058:	4680      	mov	r8, r0
 800605a:	f7fa fa73 	bl	8000544 <__aeabi_i2d>
 800605e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006062:	f7fa fad9 	bl	8000618 <__aeabi_dmul>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006072:	f7fa f919 	bl	80002a8 <__aeabi_dsub>
 8006076:	f806 4b01 	strb.w	r4, [r6], #1
 800607a:	9d03      	ldr	r5, [sp, #12]
 800607c:	eba6 040a 	sub.w	r4, r6, sl
 8006080:	42a5      	cmp	r5, r4
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	d133      	bne.n	80060f0 <_dtoa_r+0x6e0>
 8006088:	f7fa f910 	bl	80002ac <__adddf3>
 800608c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	f7fa fd50 	bl	8000b38 <__aeabi_dcmpgt>
 8006098:	b9c0      	cbnz	r0, 80060cc <_dtoa_r+0x6bc>
 800609a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 80060a6:	b110      	cbz	r0, 80060ae <_dtoa_r+0x69e>
 80060a8:	f018 0f01 	tst.w	r8, #1
 80060ac:	d10e      	bne.n	80060cc <_dtoa_r+0x6bc>
 80060ae:	9902      	ldr	r1, [sp, #8]
 80060b0:	4648      	mov	r0, r9
 80060b2:	f000 fbbd 	bl	8006830 <_Bfree>
 80060b6:	2300      	movs	r3, #0
 80060b8:	7033      	strb	r3, [r6, #0]
 80060ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80060bc:	3701      	adds	r7, #1
 80060be:	601f      	str	r7, [r3, #0]
 80060c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 824b 	beq.w	800655e <_dtoa_r+0xb4e>
 80060c8:	601e      	str	r6, [r3, #0]
 80060ca:	e248      	b.n	800655e <_dtoa_r+0xb4e>
 80060cc:	46b8      	mov	r8, r7
 80060ce:	4633      	mov	r3, r6
 80060d0:	461e      	mov	r6, r3
 80060d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060d6:	2a39      	cmp	r2, #57	@ 0x39
 80060d8:	d106      	bne.n	80060e8 <_dtoa_r+0x6d8>
 80060da:	459a      	cmp	sl, r3
 80060dc:	d1f8      	bne.n	80060d0 <_dtoa_r+0x6c0>
 80060de:	2230      	movs	r2, #48	@ 0x30
 80060e0:	f108 0801 	add.w	r8, r8, #1
 80060e4:	f88a 2000 	strb.w	r2, [sl]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	3201      	adds	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e7a0      	b.n	8006032 <_dtoa_r+0x622>
 80060f0:	4b6f      	ldr	r3, [pc, #444]	@ (80062b0 <_dtoa_r+0x8a0>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	f7fa fa90 	bl	8000618 <__aeabi_dmul>
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	f7fa fcf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006104:	2800      	cmp	r0, #0
 8006106:	d09f      	beq.n	8006048 <_dtoa_r+0x638>
 8006108:	e7d1      	b.n	80060ae <_dtoa_r+0x69e>
 800610a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800610c:	2a00      	cmp	r2, #0
 800610e:	f000 80ea 	beq.w	80062e6 <_dtoa_r+0x8d6>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	2a01      	cmp	r2, #1
 8006116:	f300 80cd 	bgt.w	80062b4 <_dtoa_r+0x8a4>
 800611a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800611c:	2a00      	cmp	r2, #0
 800611e:	f000 80c1 	beq.w	80062a4 <_dtoa_r+0x894>
 8006122:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006126:	9c08      	ldr	r4, [sp, #32]
 8006128:	9e00      	ldr	r6, [sp, #0]
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	441a      	add	r2, r3
 800612e:	9200      	str	r2, [sp, #0]
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2101      	movs	r1, #1
 8006134:	441a      	add	r2, r3
 8006136:	4648      	mov	r0, r9
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	f000 fc2d 	bl	8006998 <__i2b>
 800613e:	4605      	mov	r5, r0
 8006140:	b166      	cbz	r6, 800615c <_dtoa_r+0x74c>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd09      	ble.n	800615c <_dtoa_r+0x74c>
 8006148:	42b3      	cmp	r3, r6
 800614a:	9a00      	ldr	r2, [sp, #0]
 800614c:	bfa8      	it	ge
 800614e:	4633      	movge	r3, r6
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	9200      	str	r2, [sp, #0]
 8006154:	9a06      	ldr	r2, [sp, #24]
 8006156:	1af6      	subs	r6, r6, r3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	9306      	str	r3, [sp, #24]
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	b30b      	cbz	r3, 80061a4 <_dtoa_r+0x794>
 8006160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80c6 	beq.w	80062f4 <_dtoa_r+0x8e4>
 8006168:	2c00      	cmp	r4, #0
 800616a:	f000 80c0 	beq.w	80062ee <_dtoa_r+0x8de>
 800616e:	4629      	mov	r1, r5
 8006170:	4622      	mov	r2, r4
 8006172:	4648      	mov	r0, r9
 8006174:	f000 fcc8 	bl	8006b08 <__pow5mult>
 8006178:	9a02      	ldr	r2, [sp, #8]
 800617a:	4601      	mov	r1, r0
 800617c:	4605      	mov	r5, r0
 800617e:	4648      	mov	r0, r9
 8006180:	f000 fc20 	bl	80069c4 <__multiply>
 8006184:	9902      	ldr	r1, [sp, #8]
 8006186:	4680      	mov	r8, r0
 8006188:	4648      	mov	r0, r9
 800618a:	f000 fb51 	bl	8006830 <_Bfree>
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	1b1b      	subs	r3, r3, r4
 8006192:	9308      	str	r3, [sp, #32]
 8006194:	f000 80b1 	beq.w	80062fa <_dtoa_r+0x8ea>
 8006198:	9a08      	ldr	r2, [sp, #32]
 800619a:	4641      	mov	r1, r8
 800619c:	4648      	mov	r0, r9
 800619e:	f000 fcb3 	bl	8006b08 <__pow5mult>
 80061a2:	9002      	str	r0, [sp, #8]
 80061a4:	2101      	movs	r1, #1
 80061a6:	4648      	mov	r0, r9
 80061a8:	f000 fbf6 	bl	8006998 <__i2b>
 80061ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061ae:	4604      	mov	r4, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 81d8 	beq.w	8006566 <_dtoa_r+0xb56>
 80061b6:	461a      	mov	r2, r3
 80061b8:	4601      	mov	r1, r0
 80061ba:	4648      	mov	r0, r9
 80061bc:	f000 fca4 	bl	8006b08 <__pow5mult>
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	4604      	mov	r4, r0
 80061c6:	f300 809f 	bgt.w	8006308 <_dtoa_r+0x8f8>
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f040 8097 	bne.w	8006300 <_dtoa_r+0x8f0>
 80061d2:	9b05      	ldr	r3, [sp, #20]
 80061d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8093 	bne.w	8006304 <_dtoa_r+0x8f4>
 80061de:	9b05      	ldr	r3, [sp, #20]
 80061e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061e4:	0d1b      	lsrs	r3, r3, #20
 80061e6:	051b      	lsls	r3, r3, #20
 80061e8:	b133      	cbz	r3, 80061f8 <_dtoa_r+0x7e8>
 80061ea:	9b00      	ldr	r3, [sp, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9b06      	ldr	r3, [sp, #24]
 80061f2:	3301      	adds	r3, #1
 80061f4:	9306      	str	r3, [sp, #24]
 80061f6:	2301      	movs	r3, #1
 80061f8:	9308      	str	r3, [sp, #32]
 80061fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 81b8 	beq.w	8006572 <_dtoa_r+0xb62>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006208:	6918      	ldr	r0, [r3, #16]
 800620a:	f000 fb79 	bl	8006900 <__hi0bits>
 800620e:	f1c0 0020 	rsb	r0, r0, #32
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	4418      	add	r0, r3
 8006216:	f010 001f 	ands.w	r0, r0, #31
 800621a:	f000 8082 	beq.w	8006322 <_dtoa_r+0x912>
 800621e:	f1c0 0320 	rsb	r3, r0, #32
 8006222:	2b04      	cmp	r3, #4
 8006224:	dd73      	ble.n	800630e <_dtoa_r+0x8fe>
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	f1c0 001c 	rsb	r0, r0, #28
 800622c:	4403      	add	r3, r0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	9b06      	ldr	r3, [sp, #24]
 8006232:	4403      	add	r3, r0
 8006234:	4406      	add	r6, r0
 8006236:	9306      	str	r3, [sp, #24]
 8006238:	9b00      	ldr	r3, [sp, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	dd05      	ble.n	800624a <_dtoa_r+0x83a>
 800623e:	9902      	ldr	r1, [sp, #8]
 8006240:	461a      	mov	r2, r3
 8006242:	4648      	mov	r0, r9
 8006244:	f000 fcba 	bl	8006bbc <__lshift>
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9b06      	ldr	r3, [sp, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd05      	ble.n	800625c <_dtoa_r+0x84c>
 8006250:	4621      	mov	r1, r4
 8006252:	461a      	mov	r2, r3
 8006254:	4648      	mov	r0, r9
 8006256:	f000 fcb1 	bl	8006bbc <__lshift>
 800625a:	4604      	mov	r4, r0
 800625c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d061      	beq.n	8006326 <_dtoa_r+0x916>
 8006262:	9802      	ldr	r0, [sp, #8]
 8006264:	4621      	mov	r1, r4
 8006266:	f000 fd15 	bl	8006c94 <__mcmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	da5b      	bge.n	8006326 <_dtoa_r+0x916>
 800626e:	2300      	movs	r3, #0
 8006270:	9902      	ldr	r1, [sp, #8]
 8006272:	220a      	movs	r2, #10
 8006274:	4648      	mov	r0, r9
 8006276:	f000 fafd 	bl	8006874 <__multadd>
 800627a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8177 	beq.w	8006576 <_dtoa_r+0xb66>
 8006288:	4629      	mov	r1, r5
 800628a:	2300      	movs	r3, #0
 800628c:	220a      	movs	r2, #10
 800628e:	4648      	mov	r0, r9
 8006290:	f000 faf0 	bl	8006874 <__multadd>
 8006294:	f1bb 0f00 	cmp.w	fp, #0
 8006298:	4605      	mov	r5, r0
 800629a:	dc6f      	bgt.n	800637c <_dtoa_r+0x96c>
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	dc49      	bgt.n	8006336 <_dtoa_r+0x926>
 80062a2:	e06b      	b.n	800637c <_dtoa_r+0x96c>
 80062a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062aa:	e73c      	b.n	8006126 <_dtoa_r+0x716>
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	40240000 	.word	0x40240000
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	1e5c      	subs	r4, r3, #1
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	db09      	blt.n	80062d2 <_dtoa_r+0x8c2>
 80062be:	1b1c      	subs	r4, r3, r4
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f6bf af30 	bge.w	8006128 <_dtoa_r+0x718>
 80062c8:	9b00      	ldr	r3, [sp, #0]
 80062ca:	9a03      	ldr	r2, [sp, #12]
 80062cc:	1a9e      	subs	r6, r3, r2
 80062ce:	2300      	movs	r3, #0
 80062d0:	e72b      	b.n	800612a <_dtoa_r+0x71a>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062d6:	9408      	str	r4, [sp, #32]
 80062d8:	1ae3      	subs	r3, r4, r3
 80062da:	441a      	add	r2, r3
 80062dc:	9e00      	ldr	r6, [sp, #0]
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80062e2:	2400      	movs	r4, #0
 80062e4:	e721      	b.n	800612a <_dtoa_r+0x71a>
 80062e6:	9c08      	ldr	r4, [sp, #32]
 80062e8:	9e00      	ldr	r6, [sp, #0]
 80062ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80062ec:	e728      	b.n	8006140 <_dtoa_r+0x730>
 80062ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80062f2:	e751      	b.n	8006198 <_dtoa_r+0x788>
 80062f4:	9a08      	ldr	r2, [sp, #32]
 80062f6:	9902      	ldr	r1, [sp, #8]
 80062f8:	e750      	b.n	800619c <_dtoa_r+0x78c>
 80062fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80062fe:	e751      	b.n	80061a4 <_dtoa_r+0x794>
 8006300:	2300      	movs	r3, #0
 8006302:	e779      	b.n	80061f8 <_dtoa_r+0x7e8>
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	e777      	b.n	80061f8 <_dtoa_r+0x7e8>
 8006308:	2300      	movs	r3, #0
 800630a:	9308      	str	r3, [sp, #32]
 800630c:	e779      	b.n	8006202 <_dtoa_r+0x7f2>
 800630e:	d093      	beq.n	8006238 <_dtoa_r+0x828>
 8006310:	9a00      	ldr	r2, [sp, #0]
 8006312:	331c      	adds	r3, #28
 8006314:	441a      	add	r2, r3
 8006316:	9200      	str	r2, [sp, #0]
 8006318:	9a06      	ldr	r2, [sp, #24]
 800631a:	441a      	add	r2, r3
 800631c:	441e      	add	r6, r3
 800631e:	9206      	str	r2, [sp, #24]
 8006320:	e78a      	b.n	8006238 <_dtoa_r+0x828>
 8006322:	4603      	mov	r3, r0
 8006324:	e7f4      	b.n	8006310 <_dtoa_r+0x900>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	46b8      	mov	r8, r7
 800632c:	dc20      	bgt.n	8006370 <_dtoa_r+0x960>
 800632e:	469b      	mov	fp, r3
 8006330:	9b07      	ldr	r3, [sp, #28]
 8006332:	2b02      	cmp	r3, #2
 8006334:	dd1e      	ble.n	8006374 <_dtoa_r+0x964>
 8006336:	f1bb 0f00 	cmp.w	fp, #0
 800633a:	f47f adb1 	bne.w	8005ea0 <_dtoa_r+0x490>
 800633e:	4621      	mov	r1, r4
 8006340:	465b      	mov	r3, fp
 8006342:	2205      	movs	r2, #5
 8006344:	4648      	mov	r0, r9
 8006346:	f000 fa95 	bl	8006874 <__multadd>
 800634a:	4601      	mov	r1, r0
 800634c:	4604      	mov	r4, r0
 800634e:	9802      	ldr	r0, [sp, #8]
 8006350:	f000 fca0 	bl	8006c94 <__mcmp>
 8006354:	2800      	cmp	r0, #0
 8006356:	f77f ada3 	ble.w	8005ea0 <_dtoa_r+0x490>
 800635a:	4656      	mov	r6, sl
 800635c:	2331      	movs	r3, #49	@ 0x31
 800635e:	f806 3b01 	strb.w	r3, [r6], #1
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	e59f      	b.n	8005ea8 <_dtoa_r+0x498>
 8006368:	9c03      	ldr	r4, [sp, #12]
 800636a:	46b8      	mov	r8, r7
 800636c:	4625      	mov	r5, r4
 800636e:	e7f4      	b.n	800635a <_dtoa_r+0x94a>
 8006370:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8101 	beq.w	800657e <_dtoa_r+0xb6e>
 800637c:	2e00      	cmp	r6, #0
 800637e:	dd05      	ble.n	800638c <_dtoa_r+0x97c>
 8006380:	4629      	mov	r1, r5
 8006382:	4632      	mov	r2, r6
 8006384:	4648      	mov	r0, r9
 8006386:	f000 fc19 	bl	8006bbc <__lshift>
 800638a:	4605      	mov	r5, r0
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d05c      	beq.n	800644c <_dtoa_r+0xa3c>
 8006392:	6869      	ldr	r1, [r5, #4]
 8006394:	4648      	mov	r0, r9
 8006396:	f000 fa0b 	bl	80067b0 <_Balloc>
 800639a:	4606      	mov	r6, r0
 800639c:	b928      	cbnz	r0, 80063aa <_dtoa_r+0x99a>
 800639e:	4b82      	ldr	r3, [pc, #520]	@ (80065a8 <_dtoa_r+0xb98>)
 80063a0:	4602      	mov	r2, r0
 80063a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063a6:	f7ff bb4a 	b.w	8005a3e <_dtoa_r+0x2e>
 80063aa:	692a      	ldr	r2, [r5, #16]
 80063ac:	3202      	adds	r2, #2
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	f105 010c 	add.w	r1, r5, #12
 80063b4:	300c      	adds	r0, #12
 80063b6:	f000 ffa3 	bl	8007300 <memcpy>
 80063ba:	2201      	movs	r2, #1
 80063bc:	4631      	mov	r1, r6
 80063be:	4648      	mov	r0, r9
 80063c0:	f000 fbfc 	bl	8006bbc <__lshift>
 80063c4:	f10a 0301 	add.w	r3, sl, #1
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	eb0a 030b 	add.w	r3, sl, fp
 80063ce:	9308      	str	r3, [sp, #32]
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	462f      	mov	r7, r5
 80063d8:	9306      	str	r3, [sp, #24]
 80063da:	4605      	mov	r5, r0
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	9802      	ldr	r0, [sp, #8]
 80063e0:	4621      	mov	r1, r4
 80063e2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80063e6:	f7ff fa88 	bl	80058fa <quorem>
 80063ea:	4603      	mov	r3, r0
 80063ec:	3330      	adds	r3, #48	@ 0x30
 80063ee:	9003      	str	r0, [sp, #12]
 80063f0:	4639      	mov	r1, r7
 80063f2:	9802      	ldr	r0, [sp, #8]
 80063f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f6:	f000 fc4d 	bl	8006c94 <__mcmp>
 80063fa:	462a      	mov	r2, r5
 80063fc:	9004      	str	r0, [sp, #16]
 80063fe:	4621      	mov	r1, r4
 8006400:	4648      	mov	r0, r9
 8006402:	f000 fc63 	bl	8006ccc <__mdiff>
 8006406:	68c2      	ldr	r2, [r0, #12]
 8006408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640a:	4606      	mov	r6, r0
 800640c:	bb02      	cbnz	r2, 8006450 <_dtoa_r+0xa40>
 800640e:	4601      	mov	r1, r0
 8006410:	9802      	ldr	r0, [sp, #8]
 8006412:	f000 fc3f 	bl	8006c94 <__mcmp>
 8006416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006418:	4602      	mov	r2, r0
 800641a:	4631      	mov	r1, r6
 800641c:	4648      	mov	r0, r9
 800641e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006420:	9309      	str	r3, [sp, #36]	@ 0x24
 8006422:	f000 fa05 	bl	8006830 <_Bfree>
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800642a:	9e00      	ldr	r6, [sp, #0]
 800642c:	ea42 0103 	orr.w	r1, r2, r3
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	4319      	orrs	r1, r3
 8006434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006436:	d10d      	bne.n	8006454 <_dtoa_r+0xa44>
 8006438:	2b39      	cmp	r3, #57	@ 0x39
 800643a:	d027      	beq.n	800648c <_dtoa_r+0xa7c>
 800643c:	9a04      	ldr	r2, [sp, #16]
 800643e:	2a00      	cmp	r2, #0
 8006440:	dd01      	ble.n	8006446 <_dtoa_r+0xa36>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	3331      	adds	r3, #49	@ 0x31
 8006446:	f88b 3000 	strb.w	r3, [fp]
 800644a:	e52e      	b.n	8005eaa <_dtoa_r+0x49a>
 800644c:	4628      	mov	r0, r5
 800644e:	e7b9      	b.n	80063c4 <_dtoa_r+0x9b4>
 8006450:	2201      	movs	r2, #1
 8006452:	e7e2      	b.n	800641a <_dtoa_r+0xa0a>
 8006454:	9904      	ldr	r1, [sp, #16]
 8006456:	2900      	cmp	r1, #0
 8006458:	db04      	blt.n	8006464 <_dtoa_r+0xa54>
 800645a:	9807      	ldr	r0, [sp, #28]
 800645c:	4301      	orrs	r1, r0
 800645e:	9806      	ldr	r0, [sp, #24]
 8006460:	4301      	orrs	r1, r0
 8006462:	d120      	bne.n	80064a6 <_dtoa_r+0xa96>
 8006464:	2a00      	cmp	r2, #0
 8006466:	ddee      	ble.n	8006446 <_dtoa_r+0xa36>
 8006468:	9902      	ldr	r1, [sp, #8]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2201      	movs	r2, #1
 800646e:	4648      	mov	r0, r9
 8006470:	f000 fba4 	bl	8006bbc <__lshift>
 8006474:	4621      	mov	r1, r4
 8006476:	9002      	str	r0, [sp, #8]
 8006478:	f000 fc0c 	bl	8006c94 <__mcmp>
 800647c:	2800      	cmp	r0, #0
 800647e:	9b00      	ldr	r3, [sp, #0]
 8006480:	dc02      	bgt.n	8006488 <_dtoa_r+0xa78>
 8006482:	d1e0      	bne.n	8006446 <_dtoa_r+0xa36>
 8006484:	07da      	lsls	r2, r3, #31
 8006486:	d5de      	bpl.n	8006446 <_dtoa_r+0xa36>
 8006488:	2b39      	cmp	r3, #57	@ 0x39
 800648a:	d1da      	bne.n	8006442 <_dtoa_r+0xa32>
 800648c:	2339      	movs	r3, #57	@ 0x39
 800648e:	f88b 3000 	strb.w	r3, [fp]
 8006492:	4633      	mov	r3, r6
 8006494:	461e      	mov	r6, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800649c:	2a39      	cmp	r2, #57	@ 0x39
 800649e:	d04e      	beq.n	800653e <_dtoa_r+0xb2e>
 80064a0:	3201      	adds	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e501      	b.n	8005eaa <_dtoa_r+0x49a>
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	dd03      	ble.n	80064b2 <_dtoa_r+0xaa2>
 80064aa:	2b39      	cmp	r3, #57	@ 0x39
 80064ac:	d0ee      	beq.n	800648c <_dtoa_r+0xa7c>
 80064ae:	3301      	adds	r3, #1
 80064b0:	e7c9      	b.n	8006446 <_dtoa_r+0xa36>
 80064b2:	9a00      	ldr	r2, [sp, #0]
 80064b4:	9908      	ldr	r1, [sp, #32]
 80064b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064ba:	428a      	cmp	r2, r1
 80064bc:	d028      	beq.n	8006510 <_dtoa_r+0xb00>
 80064be:	9902      	ldr	r1, [sp, #8]
 80064c0:	2300      	movs	r3, #0
 80064c2:	220a      	movs	r2, #10
 80064c4:	4648      	mov	r0, r9
 80064c6:	f000 f9d5 	bl	8006874 <__multadd>
 80064ca:	42af      	cmp	r7, r5
 80064cc:	9002      	str	r0, [sp, #8]
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	f04f 020a 	mov.w	r2, #10
 80064d6:	4639      	mov	r1, r7
 80064d8:	4648      	mov	r0, r9
 80064da:	d107      	bne.n	80064ec <_dtoa_r+0xadc>
 80064dc:	f000 f9ca 	bl	8006874 <__multadd>
 80064e0:	4607      	mov	r7, r0
 80064e2:	4605      	mov	r5, r0
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	e777      	b.n	80063dc <_dtoa_r+0x9cc>
 80064ec:	f000 f9c2 	bl	8006874 <__multadd>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4607      	mov	r7, r0
 80064f4:	2300      	movs	r3, #0
 80064f6:	220a      	movs	r2, #10
 80064f8:	4648      	mov	r0, r9
 80064fa:	f000 f9bb 	bl	8006874 <__multadd>
 80064fe:	4605      	mov	r5, r0
 8006500:	e7f0      	b.n	80064e4 <_dtoa_r+0xad4>
 8006502:	f1bb 0f00 	cmp.w	fp, #0
 8006506:	bfcc      	ite	gt
 8006508:	465e      	movgt	r6, fp
 800650a:	2601      	movle	r6, #1
 800650c:	4456      	add	r6, sl
 800650e:	2700      	movs	r7, #0
 8006510:	9902      	ldr	r1, [sp, #8]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	4648      	mov	r0, r9
 8006518:	f000 fb50 	bl	8006bbc <__lshift>
 800651c:	4621      	mov	r1, r4
 800651e:	9002      	str	r0, [sp, #8]
 8006520:	f000 fbb8 	bl	8006c94 <__mcmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	dcb4      	bgt.n	8006492 <_dtoa_r+0xa82>
 8006528:	d102      	bne.n	8006530 <_dtoa_r+0xb20>
 800652a:	9b00      	ldr	r3, [sp, #0]
 800652c:	07db      	lsls	r3, r3, #31
 800652e:	d4b0      	bmi.n	8006492 <_dtoa_r+0xa82>
 8006530:	4633      	mov	r3, r6
 8006532:	461e      	mov	r6, r3
 8006534:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006538:	2a30      	cmp	r2, #48	@ 0x30
 800653a:	d0fa      	beq.n	8006532 <_dtoa_r+0xb22>
 800653c:	e4b5      	b.n	8005eaa <_dtoa_r+0x49a>
 800653e:	459a      	cmp	sl, r3
 8006540:	d1a8      	bne.n	8006494 <_dtoa_r+0xa84>
 8006542:	2331      	movs	r3, #49	@ 0x31
 8006544:	f108 0801 	add.w	r8, r8, #1
 8006548:	f88a 3000 	strb.w	r3, [sl]
 800654c:	e4ad      	b.n	8005eaa <_dtoa_r+0x49a>
 800654e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006550:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80065ac <_dtoa_r+0xb9c>
 8006554:	b11b      	cbz	r3, 800655e <_dtoa_r+0xb4e>
 8006556:	f10a 0308 	add.w	r3, sl, #8
 800655a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4650      	mov	r0, sl
 8006560:	b017      	add	sp, #92	@ 0x5c
 8006562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006566:	9b07      	ldr	r3, [sp, #28]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f77f ae2e 	ble.w	80061ca <_dtoa_r+0x7ba>
 800656e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006570:	9308      	str	r3, [sp, #32]
 8006572:	2001      	movs	r0, #1
 8006574:	e64d      	b.n	8006212 <_dtoa_r+0x802>
 8006576:	f1bb 0f00 	cmp.w	fp, #0
 800657a:	f77f aed9 	ble.w	8006330 <_dtoa_r+0x920>
 800657e:	4656      	mov	r6, sl
 8006580:	9802      	ldr	r0, [sp, #8]
 8006582:	4621      	mov	r1, r4
 8006584:	f7ff f9b9 	bl	80058fa <quorem>
 8006588:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800658c:	f806 3b01 	strb.w	r3, [r6], #1
 8006590:	eba6 020a 	sub.w	r2, r6, sl
 8006594:	4593      	cmp	fp, r2
 8006596:	ddb4      	ble.n	8006502 <_dtoa_r+0xaf2>
 8006598:	9902      	ldr	r1, [sp, #8]
 800659a:	2300      	movs	r3, #0
 800659c:	220a      	movs	r2, #10
 800659e:	4648      	mov	r0, r9
 80065a0:	f000 f968 	bl	8006874 <__multadd>
 80065a4:	9002      	str	r0, [sp, #8]
 80065a6:	e7eb      	b.n	8006580 <_dtoa_r+0xb70>
 80065a8:	08007ab4 	.word	0x08007ab4
 80065ac:	08007a38 	.word	0x08007a38

080065b0 <_free_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d041      	beq.n	800663c <_free_r+0x8c>
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f0c      	subs	r4, r1, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfb8      	it	lt
 80065c2:	18e4      	addlt	r4, r4, r3
 80065c4:	f000 f8e8 	bl	8006798 <__malloc_lock>
 80065c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <_free_r+0x90>)
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	b933      	cbnz	r3, 80065dc <_free_r+0x2c>
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	6014      	str	r4, [r2, #0]
 80065d2:	4628      	mov	r0, r5
 80065d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d8:	f000 b8e4 	b.w	80067a4 <__malloc_unlock>
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d908      	bls.n	80065f2 <_free_r+0x42>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	1821      	adds	r1, r4, r0
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf01      	itttt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	1809      	addeq	r1, r1, r0
 80065ee:	6021      	streq	r1, [r4, #0]
 80065f0:	e7ed      	b.n	80065ce <_free_r+0x1e>
 80065f2:	461a      	mov	r2, r3
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b10b      	cbz	r3, 80065fc <_free_r+0x4c>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d9fa      	bls.n	80065f2 <_free_r+0x42>
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	1850      	adds	r0, r2, r1
 8006600:	42a0      	cmp	r0, r4
 8006602:	d10b      	bne.n	800661c <_free_r+0x6c>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	4401      	add	r1, r0
 8006608:	1850      	adds	r0, r2, r1
 800660a:	4283      	cmp	r3, r0
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	d1e0      	bne.n	80065d2 <_free_r+0x22>
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	6053      	str	r3, [r2, #4]
 8006616:	4408      	add	r0, r1
 8006618:	6010      	str	r0, [r2, #0]
 800661a:	e7da      	b.n	80065d2 <_free_r+0x22>
 800661c:	d902      	bls.n	8006624 <_free_r+0x74>
 800661e:	230c      	movs	r3, #12
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	e7d6      	b.n	80065d2 <_free_r+0x22>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	1821      	adds	r1, r4, r0
 8006628:	428b      	cmp	r3, r1
 800662a:	bf04      	itt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	6063      	str	r3, [r4, #4]
 8006632:	bf04      	itt	eq
 8006634:	1809      	addeq	r1, r1, r0
 8006636:	6021      	streq	r1, [r4, #0]
 8006638:	6054      	str	r4, [r2, #4]
 800663a:	e7ca      	b.n	80065d2 <_free_r+0x22>
 800663c:	bd38      	pop	{r3, r4, r5, pc}
 800663e:	bf00      	nop
 8006640:	20000b5c 	.word	0x20000b5c

08006644 <malloc>:
 8006644:	4b02      	ldr	r3, [pc, #8]	@ (8006650 <malloc+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f000 b825 	b.w	8006698 <_malloc_r>
 800664e:	bf00      	nop
 8006650:	20000018 	.word	0x20000018

08006654 <sbrk_aligned>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4e0f      	ldr	r6, [pc, #60]	@ (8006694 <sbrk_aligned+0x40>)
 8006658:	460c      	mov	r4, r1
 800665a:	6831      	ldr	r1, [r6, #0]
 800665c:	4605      	mov	r5, r0
 800665e:	b911      	cbnz	r1, 8006666 <sbrk_aligned+0x12>
 8006660:	f000 fe3e 	bl	80072e0 <_sbrk_r>
 8006664:	6030      	str	r0, [r6, #0]
 8006666:	4621      	mov	r1, r4
 8006668:	4628      	mov	r0, r5
 800666a:	f000 fe39 	bl	80072e0 <_sbrk_r>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d103      	bne.n	800667a <sbrk_aligned+0x26>
 8006672:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006676:	4620      	mov	r0, r4
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	1cc4      	adds	r4, r0, #3
 800667c:	f024 0403 	bic.w	r4, r4, #3
 8006680:	42a0      	cmp	r0, r4
 8006682:	d0f8      	beq.n	8006676 <sbrk_aligned+0x22>
 8006684:	1a21      	subs	r1, r4, r0
 8006686:	4628      	mov	r0, r5
 8006688:	f000 fe2a 	bl	80072e0 <_sbrk_r>
 800668c:	3001      	adds	r0, #1
 800668e:	d1f2      	bne.n	8006676 <sbrk_aligned+0x22>
 8006690:	e7ef      	b.n	8006672 <sbrk_aligned+0x1e>
 8006692:	bf00      	nop
 8006694:	20000b58 	.word	0x20000b58

08006698 <_malloc_r>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	1ccd      	adds	r5, r1, #3
 800669e:	f025 0503 	bic.w	r5, r5, #3
 80066a2:	3508      	adds	r5, #8
 80066a4:	2d0c      	cmp	r5, #12
 80066a6:	bf38      	it	cc
 80066a8:	250c      	movcc	r5, #12
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	4606      	mov	r6, r0
 80066ae:	db01      	blt.n	80066b4 <_malloc_r+0x1c>
 80066b0:	42a9      	cmp	r1, r5
 80066b2:	d904      	bls.n	80066be <_malloc_r+0x26>
 80066b4:	230c      	movs	r3, #12
 80066b6:	6033      	str	r3, [r6, #0]
 80066b8:	2000      	movs	r0, #0
 80066ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006794 <_malloc_r+0xfc>
 80066c2:	f000 f869 	bl	8006798 <__malloc_lock>
 80066c6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ca:	461c      	mov	r4, r3
 80066cc:	bb44      	cbnz	r4, 8006720 <_malloc_r+0x88>
 80066ce:	4629      	mov	r1, r5
 80066d0:	4630      	mov	r0, r6
 80066d2:	f7ff ffbf 	bl	8006654 <sbrk_aligned>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	4604      	mov	r4, r0
 80066da:	d158      	bne.n	800678e <_malloc_r+0xf6>
 80066dc:	f8d8 4000 	ldr.w	r4, [r8]
 80066e0:	4627      	mov	r7, r4
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	d143      	bne.n	800676e <_malloc_r+0xd6>
 80066e6:	2c00      	cmp	r4, #0
 80066e8:	d04b      	beq.n	8006782 <_malloc_r+0xea>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	4639      	mov	r1, r7
 80066ee:	4630      	mov	r0, r6
 80066f0:	eb04 0903 	add.w	r9, r4, r3
 80066f4:	f000 fdf4 	bl	80072e0 <_sbrk_r>
 80066f8:	4581      	cmp	r9, r0
 80066fa:	d142      	bne.n	8006782 <_malloc_r+0xea>
 80066fc:	6821      	ldr	r1, [r4, #0]
 80066fe:	1a6d      	subs	r5, r5, r1
 8006700:	4629      	mov	r1, r5
 8006702:	4630      	mov	r0, r6
 8006704:	f7ff ffa6 	bl	8006654 <sbrk_aligned>
 8006708:	3001      	adds	r0, #1
 800670a:	d03a      	beq.n	8006782 <_malloc_r+0xea>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	442b      	add	r3, r5
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	f8d8 3000 	ldr.w	r3, [r8]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	bb62      	cbnz	r2, 8006774 <_malloc_r+0xdc>
 800671a:	f8c8 7000 	str.w	r7, [r8]
 800671e:	e00f      	b.n	8006740 <_malloc_r+0xa8>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	1b52      	subs	r2, r2, r5
 8006724:	d420      	bmi.n	8006768 <_malloc_r+0xd0>
 8006726:	2a0b      	cmp	r2, #11
 8006728:	d917      	bls.n	800675a <_malloc_r+0xc2>
 800672a:	1961      	adds	r1, r4, r5
 800672c:	42a3      	cmp	r3, r4
 800672e:	6025      	str	r5, [r4, #0]
 8006730:	bf18      	it	ne
 8006732:	6059      	strne	r1, [r3, #4]
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	bf08      	it	eq
 8006738:	f8c8 1000 	streq.w	r1, [r8]
 800673c:	5162      	str	r2, [r4, r5]
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f82f 	bl	80067a4 <__malloc_unlock>
 8006746:	f104 000b 	add.w	r0, r4, #11
 800674a:	1d23      	adds	r3, r4, #4
 800674c:	f020 0007 	bic.w	r0, r0, #7
 8006750:	1ac2      	subs	r2, r0, r3
 8006752:	bf1c      	itt	ne
 8006754:	1a1b      	subne	r3, r3, r0
 8006756:	50a3      	strne	r3, [r4, r2]
 8006758:	e7af      	b.n	80066ba <_malloc_r+0x22>
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	42a3      	cmp	r3, r4
 800675e:	bf0c      	ite	eq
 8006760:	f8c8 2000 	streq.w	r2, [r8]
 8006764:	605a      	strne	r2, [r3, #4]
 8006766:	e7eb      	b.n	8006740 <_malloc_r+0xa8>
 8006768:	4623      	mov	r3, r4
 800676a:	6864      	ldr	r4, [r4, #4]
 800676c:	e7ae      	b.n	80066cc <_malloc_r+0x34>
 800676e:	463c      	mov	r4, r7
 8006770:	687f      	ldr	r7, [r7, #4]
 8006772:	e7b6      	b.n	80066e2 <_malloc_r+0x4a>
 8006774:	461a      	mov	r2, r3
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	42a3      	cmp	r3, r4
 800677a:	d1fb      	bne.n	8006774 <_malloc_r+0xdc>
 800677c:	2300      	movs	r3, #0
 800677e:	6053      	str	r3, [r2, #4]
 8006780:	e7de      	b.n	8006740 <_malloc_r+0xa8>
 8006782:	230c      	movs	r3, #12
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	4630      	mov	r0, r6
 8006788:	f000 f80c 	bl	80067a4 <__malloc_unlock>
 800678c:	e794      	b.n	80066b8 <_malloc_r+0x20>
 800678e:	6005      	str	r5, [r0, #0]
 8006790:	e7d6      	b.n	8006740 <_malloc_r+0xa8>
 8006792:	bf00      	nop
 8006794:	20000b5c 	.word	0x20000b5c

08006798 <__malloc_lock>:
 8006798:	4801      	ldr	r0, [pc, #4]	@ (80067a0 <__malloc_lock+0x8>)
 800679a:	f7ff b8ac 	b.w	80058f6 <__retarget_lock_acquire_recursive>
 800679e:	bf00      	nop
 80067a0:	20000b54 	.word	0x20000b54

080067a4 <__malloc_unlock>:
 80067a4:	4801      	ldr	r0, [pc, #4]	@ (80067ac <__malloc_unlock+0x8>)
 80067a6:	f7ff b8a7 	b.w	80058f8 <__retarget_lock_release_recursive>
 80067aa:	bf00      	nop
 80067ac:	20000b54 	.word	0x20000b54

080067b0 <_Balloc>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	69c6      	ldr	r6, [r0, #28]
 80067b4:	4604      	mov	r4, r0
 80067b6:	460d      	mov	r5, r1
 80067b8:	b976      	cbnz	r6, 80067d8 <_Balloc+0x28>
 80067ba:	2010      	movs	r0, #16
 80067bc:	f7ff ff42 	bl	8006644 <malloc>
 80067c0:	4602      	mov	r2, r0
 80067c2:	61e0      	str	r0, [r4, #28]
 80067c4:	b920      	cbnz	r0, 80067d0 <_Balloc+0x20>
 80067c6:	4b18      	ldr	r3, [pc, #96]	@ (8006828 <_Balloc+0x78>)
 80067c8:	4818      	ldr	r0, [pc, #96]	@ (800682c <_Balloc+0x7c>)
 80067ca:	216b      	movs	r1, #107	@ 0x6b
 80067cc:	f000 fda6 	bl	800731c <__assert_func>
 80067d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067d4:	6006      	str	r6, [r0, #0]
 80067d6:	60c6      	str	r6, [r0, #12]
 80067d8:	69e6      	ldr	r6, [r4, #28]
 80067da:	68f3      	ldr	r3, [r6, #12]
 80067dc:	b183      	cbz	r3, 8006800 <_Balloc+0x50>
 80067de:	69e3      	ldr	r3, [r4, #28]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067e6:	b9b8      	cbnz	r0, 8006818 <_Balloc+0x68>
 80067e8:	2101      	movs	r1, #1
 80067ea:	fa01 f605 	lsl.w	r6, r1, r5
 80067ee:	1d72      	adds	r2, r6, #5
 80067f0:	0092      	lsls	r2, r2, #2
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fdb0 	bl	8007358 <_calloc_r>
 80067f8:	b160      	cbz	r0, 8006814 <_Balloc+0x64>
 80067fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067fe:	e00e      	b.n	800681e <_Balloc+0x6e>
 8006800:	2221      	movs	r2, #33	@ 0x21
 8006802:	2104      	movs	r1, #4
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fda7 	bl	8007358 <_calloc_r>
 800680a:	69e3      	ldr	r3, [r4, #28]
 800680c:	60f0      	str	r0, [r6, #12]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e4      	bne.n	80067de <_Balloc+0x2e>
 8006814:	2000      	movs	r0, #0
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	6802      	ldr	r2, [r0, #0]
 800681a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800681e:	2300      	movs	r3, #0
 8006820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006824:	e7f7      	b.n	8006816 <_Balloc+0x66>
 8006826:	bf00      	nop
 8006828:	08007a45 	.word	0x08007a45
 800682c:	08007ac5 	.word	0x08007ac5

08006830 <_Bfree>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	69c6      	ldr	r6, [r0, #28]
 8006834:	4605      	mov	r5, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b976      	cbnz	r6, 8006858 <_Bfree+0x28>
 800683a:	2010      	movs	r0, #16
 800683c:	f7ff ff02 	bl	8006644 <malloc>
 8006840:	4602      	mov	r2, r0
 8006842:	61e8      	str	r0, [r5, #28]
 8006844:	b920      	cbnz	r0, 8006850 <_Bfree+0x20>
 8006846:	4b09      	ldr	r3, [pc, #36]	@ (800686c <_Bfree+0x3c>)
 8006848:	4809      	ldr	r0, [pc, #36]	@ (8006870 <_Bfree+0x40>)
 800684a:	218f      	movs	r1, #143	@ 0x8f
 800684c:	f000 fd66 	bl	800731c <__assert_func>
 8006850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006854:	6006      	str	r6, [r0, #0]
 8006856:	60c6      	str	r6, [r0, #12]
 8006858:	b13c      	cbz	r4, 800686a <_Bfree+0x3a>
 800685a:	69eb      	ldr	r3, [r5, #28]
 800685c:	6862      	ldr	r2, [r4, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006864:	6021      	str	r1, [r4, #0]
 8006866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	08007a45 	.word	0x08007a45
 8006870:	08007ac5 	.word	0x08007ac5

08006874 <__multadd>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	690d      	ldr	r5, [r1, #16]
 800687a:	4607      	mov	r7, r0
 800687c:	460c      	mov	r4, r1
 800687e:	461e      	mov	r6, r3
 8006880:	f101 0c14 	add.w	ip, r1, #20
 8006884:	2000      	movs	r0, #0
 8006886:	f8dc 3000 	ldr.w	r3, [ip]
 800688a:	b299      	uxth	r1, r3
 800688c:	fb02 6101 	mla	r1, r2, r1, r6
 8006890:	0c1e      	lsrs	r6, r3, #16
 8006892:	0c0b      	lsrs	r3, r1, #16
 8006894:	fb02 3306 	mla	r3, r2, r6, r3
 8006898:	b289      	uxth	r1, r1
 800689a:	3001      	adds	r0, #1
 800689c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068a0:	4285      	cmp	r5, r0
 80068a2:	f84c 1b04 	str.w	r1, [ip], #4
 80068a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068aa:	dcec      	bgt.n	8006886 <__multadd+0x12>
 80068ac:	b30e      	cbz	r6, 80068f2 <__multadd+0x7e>
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dc19      	bgt.n	80068e8 <__multadd+0x74>
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	4638      	mov	r0, r7
 80068b8:	3101      	adds	r1, #1
 80068ba:	f7ff ff79 	bl	80067b0 <_Balloc>
 80068be:	4680      	mov	r8, r0
 80068c0:	b928      	cbnz	r0, 80068ce <__multadd+0x5a>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <__multadd+0x84>)
 80068c6:	480d      	ldr	r0, [pc, #52]	@ (80068fc <__multadd+0x88>)
 80068c8:	21ba      	movs	r1, #186	@ 0xba
 80068ca:	f000 fd27 	bl	800731c <__assert_func>
 80068ce:	6922      	ldr	r2, [r4, #16]
 80068d0:	3202      	adds	r2, #2
 80068d2:	f104 010c 	add.w	r1, r4, #12
 80068d6:	0092      	lsls	r2, r2, #2
 80068d8:	300c      	adds	r0, #12
 80068da:	f000 fd11 	bl	8007300 <memcpy>
 80068de:	4621      	mov	r1, r4
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff ffa5 	bl	8006830 <_Bfree>
 80068e6:	4644      	mov	r4, r8
 80068e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068ec:	3501      	adds	r5, #1
 80068ee:	615e      	str	r6, [r3, #20]
 80068f0:	6125      	str	r5, [r4, #16]
 80068f2:	4620      	mov	r0, r4
 80068f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f8:	08007ab4 	.word	0x08007ab4
 80068fc:	08007ac5 	.word	0x08007ac5

08006900 <__hi0bits>:
 8006900:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006904:	4603      	mov	r3, r0
 8006906:	bf36      	itet	cc
 8006908:	0403      	lslcc	r3, r0, #16
 800690a:	2000      	movcs	r0, #0
 800690c:	2010      	movcc	r0, #16
 800690e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006912:	bf3c      	itt	cc
 8006914:	021b      	lslcc	r3, r3, #8
 8006916:	3008      	addcc	r0, #8
 8006918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800691c:	bf3c      	itt	cc
 800691e:	011b      	lslcc	r3, r3, #4
 8006920:	3004      	addcc	r0, #4
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	bf3c      	itt	cc
 8006928:	009b      	lslcc	r3, r3, #2
 800692a:	3002      	addcc	r0, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	db05      	blt.n	800693c <__hi0bits+0x3c>
 8006930:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006934:	f100 0001 	add.w	r0, r0, #1
 8006938:	bf08      	it	eq
 800693a:	2020      	moveq	r0, #32
 800693c:	4770      	bx	lr

0800693e <__lo0bits>:
 800693e:	6803      	ldr	r3, [r0, #0]
 8006940:	4602      	mov	r2, r0
 8006942:	f013 0007 	ands.w	r0, r3, #7
 8006946:	d00b      	beq.n	8006960 <__lo0bits+0x22>
 8006948:	07d9      	lsls	r1, r3, #31
 800694a:	d421      	bmi.n	8006990 <__lo0bits+0x52>
 800694c:	0798      	lsls	r0, r3, #30
 800694e:	bf49      	itett	mi
 8006950:	085b      	lsrmi	r3, r3, #1
 8006952:	089b      	lsrpl	r3, r3, #2
 8006954:	2001      	movmi	r0, #1
 8006956:	6013      	strmi	r3, [r2, #0]
 8006958:	bf5c      	itt	pl
 800695a:	6013      	strpl	r3, [r2, #0]
 800695c:	2002      	movpl	r0, #2
 800695e:	4770      	bx	lr
 8006960:	b299      	uxth	r1, r3
 8006962:	b909      	cbnz	r1, 8006968 <__lo0bits+0x2a>
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	2010      	movs	r0, #16
 8006968:	b2d9      	uxtb	r1, r3
 800696a:	b909      	cbnz	r1, 8006970 <__lo0bits+0x32>
 800696c:	3008      	adds	r0, #8
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	0719      	lsls	r1, r3, #28
 8006972:	bf04      	itt	eq
 8006974:	091b      	lsreq	r3, r3, #4
 8006976:	3004      	addeq	r0, #4
 8006978:	0799      	lsls	r1, r3, #30
 800697a:	bf04      	itt	eq
 800697c:	089b      	lsreq	r3, r3, #2
 800697e:	3002      	addeq	r0, #2
 8006980:	07d9      	lsls	r1, r3, #31
 8006982:	d403      	bmi.n	800698c <__lo0bits+0x4e>
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	f100 0001 	add.w	r0, r0, #1
 800698a:	d003      	beq.n	8006994 <__lo0bits+0x56>
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4770      	bx	lr
 8006990:	2000      	movs	r0, #0
 8006992:	4770      	bx	lr
 8006994:	2020      	movs	r0, #32
 8006996:	4770      	bx	lr

08006998 <__i2b>:
 8006998:	b510      	push	{r4, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	2101      	movs	r1, #1
 800699e:	f7ff ff07 	bl	80067b0 <_Balloc>
 80069a2:	4602      	mov	r2, r0
 80069a4:	b928      	cbnz	r0, 80069b2 <__i2b+0x1a>
 80069a6:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <__i2b+0x24>)
 80069a8:	4805      	ldr	r0, [pc, #20]	@ (80069c0 <__i2b+0x28>)
 80069aa:	f240 1145 	movw	r1, #325	@ 0x145
 80069ae:	f000 fcb5 	bl	800731c <__assert_func>
 80069b2:	2301      	movs	r3, #1
 80069b4:	6144      	str	r4, [r0, #20]
 80069b6:	6103      	str	r3, [r0, #16]
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop
 80069bc:	08007ab4 	.word	0x08007ab4
 80069c0:	08007ac5 	.word	0x08007ac5

080069c4 <__multiply>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	4617      	mov	r7, r2
 80069ca:	690a      	ldr	r2, [r1, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	bfa8      	it	ge
 80069d2:	463b      	movge	r3, r7
 80069d4:	4689      	mov	r9, r1
 80069d6:	bfa4      	itt	ge
 80069d8:	460f      	movge	r7, r1
 80069da:	4699      	movge	r9, r3
 80069dc:	693d      	ldr	r5, [r7, #16]
 80069de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	eb05 060a 	add.w	r6, r5, sl
 80069ea:	42b3      	cmp	r3, r6
 80069ec:	b085      	sub	sp, #20
 80069ee:	bfb8      	it	lt
 80069f0:	3101      	addlt	r1, #1
 80069f2:	f7ff fedd 	bl	80067b0 <_Balloc>
 80069f6:	b930      	cbnz	r0, 8006a06 <__multiply+0x42>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <__multiply+0x13c>)
 80069fc:	4841      	ldr	r0, [pc, #260]	@ (8006b04 <__multiply+0x140>)
 80069fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a02:	f000 fc8b 	bl	800731c <__assert_func>
 8006a06:	f100 0414 	add.w	r4, r0, #20
 8006a0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006a0e:	4623      	mov	r3, r4
 8006a10:	2200      	movs	r2, #0
 8006a12:	4573      	cmp	r3, lr
 8006a14:	d320      	bcc.n	8006a58 <__multiply+0x94>
 8006a16:	f107 0814 	add.w	r8, r7, #20
 8006a1a:	f109 0114 	add.w	r1, r9, #20
 8006a1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006a22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	1beb      	subs	r3, r5, r7
 8006a2a:	3b15      	subs	r3, #21
 8006a2c:	f023 0303 	bic.w	r3, r3, #3
 8006a30:	3304      	adds	r3, #4
 8006a32:	3715      	adds	r7, #21
 8006a34:	42bd      	cmp	r5, r7
 8006a36:	bf38      	it	cc
 8006a38:	2304      	movcc	r3, #4
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	9b02      	ldr	r3, [sp, #8]
 8006a3e:	9103      	str	r1, [sp, #12]
 8006a40:	428b      	cmp	r3, r1
 8006a42:	d80c      	bhi.n	8006a5e <__multiply+0x9a>
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	dd03      	ble.n	8006a50 <__multiply+0x8c>
 8006a48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d055      	beq.n	8006afc <__multiply+0x138>
 8006a50:	6106      	str	r6, [r0, #16]
 8006a52:	b005      	add	sp, #20
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	f843 2b04 	str.w	r2, [r3], #4
 8006a5c:	e7d9      	b.n	8006a12 <__multiply+0x4e>
 8006a5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a62:	f1ba 0f00 	cmp.w	sl, #0
 8006a66:	d01f      	beq.n	8006aa8 <__multiply+0xe4>
 8006a68:	46c4      	mov	ip, r8
 8006a6a:	46a1      	mov	r9, r4
 8006a6c:	2700      	movs	r7, #0
 8006a6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a72:	f8d9 3000 	ldr.w	r3, [r9]
 8006a76:	fa1f fb82 	uxth.w	fp, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a80:	443b      	add	r3, r7
 8006a82:	f8d9 7000 	ldr.w	r7, [r9]
 8006a86:	0c12      	lsrs	r2, r2, #16
 8006a88:	0c3f      	lsrs	r7, r7, #16
 8006a8a:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a98:	4565      	cmp	r5, ip
 8006a9a:	f849 3b04 	str.w	r3, [r9], #4
 8006a9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006aa2:	d8e4      	bhi.n	8006a6e <__multiply+0xaa>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	50e7      	str	r7, [r4, r3]
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006aae:	3104      	adds	r1, #4
 8006ab0:	f1b9 0f00 	cmp.w	r9, #0
 8006ab4:	d020      	beq.n	8006af8 <__multiply+0x134>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	4647      	mov	r7, r8
 8006aba:	46a4      	mov	ip, r4
 8006abc:	f04f 0a00 	mov.w	sl, #0
 8006ac0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ac4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ac8:	fb09 220b 	mla	r2, r9, fp, r2
 8006acc:	4452      	add	r2, sl
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad4:	f84c 3b04 	str.w	r3, [ip], #4
 8006ad8:	f857 3b04 	ldr.w	r3, [r7], #4
 8006adc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ae0:	f8bc 3000 	ldrh.w	r3, [ip]
 8006ae4:	fb09 330a 	mla	r3, r9, sl, r3
 8006ae8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006aec:	42bd      	cmp	r5, r7
 8006aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006af2:	d8e5      	bhi.n	8006ac0 <__multiply+0xfc>
 8006af4:	9a01      	ldr	r2, [sp, #4]
 8006af6:	50a3      	str	r3, [r4, r2]
 8006af8:	3404      	adds	r4, #4
 8006afa:	e79f      	b.n	8006a3c <__multiply+0x78>
 8006afc:	3e01      	subs	r6, #1
 8006afe:	e7a1      	b.n	8006a44 <__multiply+0x80>
 8006b00:	08007ab4 	.word	0x08007ab4
 8006b04:	08007ac5 	.word	0x08007ac5

08006b08 <__pow5mult>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	f012 0203 	ands.w	r2, r2, #3
 8006b12:	4607      	mov	r7, r0
 8006b14:	460e      	mov	r6, r1
 8006b16:	d007      	beq.n	8006b28 <__pow5mult+0x20>
 8006b18:	4c25      	ldr	r4, [pc, #148]	@ (8006bb0 <__pow5mult+0xa8>)
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b22:	f7ff fea7 	bl	8006874 <__multadd>
 8006b26:	4606      	mov	r6, r0
 8006b28:	10ad      	asrs	r5, r5, #2
 8006b2a:	d03d      	beq.n	8006ba8 <__pow5mult+0xa0>
 8006b2c:	69fc      	ldr	r4, [r7, #28]
 8006b2e:	b97c      	cbnz	r4, 8006b50 <__pow5mult+0x48>
 8006b30:	2010      	movs	r0, #16
 8006b32:	f7ff fd87 	bl	8006644 <malloc>
 8006b36:	4602      	mov	r2, r0
 8006b38:	61f8      	str	r0, [r7, #28]
 8006b3a:	b928      	cbnz	r0, 8006b48 <__pow5mult+0x40>
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <__pow5mult+0xac>)
 8006b3e:	481e      	ldr	r0, [pc, #120]	@ (8006bb8 <__pow5mult+0xb0>)
 8006b40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b44:	f000 fbea 	bl	800731c <__assert_func>
 8006b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b4c:	6004      	str	r4, [r0, #0]
 8006b4e:	60c4      	str	r4, [r0, #12]
 8006b50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b58:	b94c      	cbnz	r4, 8006b6e <__pow5mult+0x66>
 8006b5a:	f240 2171 	movw	r1, #625	@ 0x271
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7ff ff1a 	bl	8006998 <__i2b>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	07eb      	lsls	r3, r5, #31
 8006b74:	d50a      	bpl.n	8006b8c <__pow5mult+0x84>
 8006b76:	4631      	mov	r1, r6
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f7ff ff22 	bl	80069c4 <__multiply>
 8006b80:	4631      	mov	r1, r6
 8006b82:	4680      	mov	r8, r0
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff fe53 	bl	8006830 <_Bfree>
 8006b8a:	4646      	mov	r6, r8
 8006b8c:	106d      	asrs	r5, r5, #1
 8006b8e:	d00b      	beq.n	8006ba8 <__pow5mult+0xa0>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	b938      	cbnz	r0, 8006ba4 <__pow5mult+0x9c>
 8006b94:	4622      	mov	r2, r4
 8006b96:	4621      	mov	r1, r4
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ff13 	bl	80069c4 <__multiply>
 8006b9e:	6020      	str	r0, [r4, #0]
 8006ba0:	f8c0 9000 	str.w	r9, [r0]
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e7e4      	b.n	8006b72 <__pow5mult+0x6a>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bae:	bf00      	nop
 8006bb0:	08007b78 	.word	0x08007b78
 8006bb4:	08007a45 	.word	0x08007a45
 8006bb8:	08007ac5 	.word	0x08007ac5

08006bbc <__lshift>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6849      	ldr	r1, [r1, #4]
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	4607      	mov	r7, r0
 8006bce:	4691      	mov	r9, r2
 8006bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd4:	f108 0601 	add.w	r6, r8, #1
 8006bd8:	42b3      	cmp	r3, r6
 8006bda:	db0b      	blt.n	8006bf4 <__lshift+0x38>
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f7ff fde7 	bl	80067b0 <_Balloc>
 8006be2:	4605      	mov	r5, r0
 8006be4:	b948      	cbnz	r0, 8006bfa <__lshift+0x3e>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <__lshift+0xd0>)
 8006bea:	4829      	ldr	r0, [pc, #164]	@ (8006c90 <__lshift+0xd4>)
 8006bec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bf0:	f000 fb94 	bl	800731c <__assert_func>
 8006bf4:	3101      	adds	r1, #1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__lshift+0x1c>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f100 0114 	add.w	r1, r0, #20
 8006c00:	f100 0210 	add.w	r2, r0, #16
 8006c04:	4618      	mov	r0, r3
 8006c06:	4553      	cmp	r3, sl
 8006c08:	db33      	blt.n	8006c72 <__lshift+0xb6>
 8006c0a:	6920      	ldr	r0, [r4, #16]
 8006c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c10:	f104 0314 	add.w	r3, r4, #20
 8006c14:	f019 091f 	ands.w	r9, r9, #31
 8006c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c20:	d02b      	beq.n	8006c7a <__lshift+0xbe>
 8006c22:	f1c9 0e20 	rsb	lr, r9, #32
 8006c26:	468a      	mov	sl, r1
 8006c28:	2200      	movs	r2, #0
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c30:	4310      	orrs	r0, r2
 8006c32:	f84a 0b04 	str.w	r0, [sl], #4
 8006c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3a:	459c      	cmp	ip, r3
 8006c3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c40:	d8f3      	bhi.n	8006c2a <__lshift+0x6e>
 8006c42:	ebac 0304 	sub.w	r3, ip, r4
 8006c46:	3b15      	subs	r3, #21
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	f104 0015 	add.w	r0, r4, #21
 8006c52:	4560      	cmp	r0, ip
 8006c54:	bf88      	it	hi
 8006c56:	2304      	movhi	r3, #4
 8006c58:	50ca      	str	r2, [r1, r3]
 8006c5a:	b10a      	cbz	r2, 8006c60 <__lshift+0xa4>
 8006c5c:	f108 0602 	add.w	r6, r8, #2
 8006c60:	3e01      	subs	r6, #1
 8006c62:	4638      	mov	r0, r7
 8006c64:	612e      	str	r6, [r5, #16]
 8006c66:	4621      	mov	r1, r4
 8006c68:	f7ff fde2 	bl	8006830 <_Bfree>
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c76:	3301      	adds	r3, #1
 8006c78:	e7c5      	b.n	8006c06 <__lshift+0x4a>
 8006c7a:	3904      	subs	r1, #4
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c84:	459c      	cmp	ip, r3
 8006c86:	d8f9      	bhi.n	8006c7c <__lshift+0xc0>
 8006c88:	e7ea      	b.n	8006c60 <__lshift+0xa4>
 8006c8a:	bf00      	nop
 8006c8c:	08007ab4 	.word	0x08007ab4
 8006c90:	08007ac5 	.word	0x08007ac5

08006c94 <__mcmp>:
 8006c94:	690a      	ldr	r2, [r1, #16]
 8006c96:	4603      	mov	r3, r0
 8006c98:	6900      	ldr	r0, [r0, #16]
 8006c9a:	1a80      	subs	r0, r0, r2
 8006c9c:	b530      	push	{r4, r5, lr}
 8006c9e:	d10e      	bne.n	8006cbe <__mcmp+0x2a>
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	3114      	adds	r1, #20
 8006ca4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cb4:	4295      	cmp	r5, r2
 8006cb6:	d003      	beq.n	8006cc0 <__mcmp+0x2c>
 8006cb8:	d205      	bcs.n	8006cc6 <__mcmp+0x32>
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cbe:	bd30      	pop	{r4, r5, pc}
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	d3f3      	bcc.n	8006cac <__mcmp+0x18>
 8006cc4:	e7fb      	b.n	8006cbe <__mcmp+0x2a>
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	e7f9      	b.n	8006cbe <__mcmp+0x2a>
	...

08006ccc <__mdiff>:
 8006ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4648      	mov	r0, r9
 8006cd8:	4614      	mov	r4, r2
 8006cda:	f7ff ffdb 	bl	8006c94 <__mcmp>
 8006cde:	1e05      	subs	r5, r0, #0
 8006ce0:	d112      	bne.n	8006d08 <__mdiff+0x3c>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff fd63 	bl	80067b0 <_Balloc>
 8006cea:	4602      	mov	r2, r0
 8006cec:	b928      	cbnz	r0, 8006cfa <__mdiff+0x2e>
 8006cee:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <__mdiff+0x120>)
 8006cf0:	f240 2137 	movw	r1, #567	@ 0x237
 8006cf4:	483e      	ldr	r0, [pc, #248]	@ (8006df0 <__mdiff+0x124>)
 8006cf6:	f000 fb11 	bl	800731c <__assert_func>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d00:	4610      	mov	r0, r2
 8006d02:	b003      	add	sp, #12
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	bfbc      	itt	lt
 8006d0a:	464b      	movlt	r3, r9
 8006d0c:	46a1      	movlt	r9, r4
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d14:	bfba      	itte	lt
 8006d16:	461c      	movlt	r4, r3
 8006d18:	2501      	movlt	r5, #1
 8006d1a:	2500      	movge	r5, #0
 8006d1c:	f7ff fd48 	bl	80067b0 <_Balloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	b918      	cbnz	r0, 8006d2c <__mdiff+0x60>
 8006d24:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <__mdiff+0x120>)
 8006d26:	f240 2145 	movw	r1, #581	@ 0x245
 8006d2a:	e7e3      	b.n	8006cf4 <__mdiff+0x28>
 8006d2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d30:	6926      	ldr	r6, [r4, #16]
 8006d32:	60c5      	str	r5, [r0, #12]
 8006d34:	f109 0310 	add.w	r3, r9, #16
 8006d38:	f109 0514 	add.w	r5, r9, #20
 8006d3c:	f104 0e14 	add.w	lr, r4, #20
 8006d40:	f100 0b14 	add.w	fp, r0, #20
 8006d44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	46d9      	mov	r9, fp
 8006d50:	f04f 0c00 	mov.w	ip, #0
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	fa1f f38a 	uxth.w	r3, sl
 8006d64:	4619      	mov	r1, r3
 8006d66:	b283      	uxth	r3, r0
 8006d68:	1acb      	subs	r3, r1, r3
 8006d6a:	0c00      	lsrs	r0, r0, #16
 8006d6c:	4463      	add	r3, ip
 8006d6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d7c:	4576      	cmp	r6, lr
 8006d7e:	f849 3b04 	str.w	r3, [r9], #4
 8006d82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d86:	d8e5      	bhi.n	8006d54 <__mdiff+0x88>
 8006d88:	1b33      	subs	r3, r6, r4
 8006d8a:	3b15      	subs	r3, #21
 8006d8c:	f023 0303 	bic.w	r3, r3, #3
 8006d90:	3415      	adds	r4, #21
 8006d92:	3304      	adds	r3, #4
 8006d94:	42a6      	cmp	r6, r4
 8006d96:	bf38      	it	cc
 8006d98:	2304      	movcc	r3, #4
 8006d9a:	441d      	add	r5, r3
 8006d9c:	445b      	add	r3, fp
 8006d9e:	461e      	mov	r6, r3
 8006da0:	462c      	mov	r4, r5
 8006da2:	4544      	cmp	r4, r8
 8006da4:	d30e      	bcc.n	8006dc4 <__mdiff+0xf8>
 8006da6:	f108 0103 	add.w	r1, r8, #3
 8006daa:	1b49      	subs	r1, r1, r5
 8006dac:	f021 0103 	bic.w	r1, r1, #3
 8006db0:	3d03      	subs	r5, #3
 8006db2:	45a8      	cmp	r8, r5
 8006db4:	bf38      	it	cc
 8006db6:	2100      	movcc	r1, #0
 8006db8:	440b      	add	r3, r1
 8006dba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dbe:	b191      	cbz	r1, 8006de6 <__mdiff+0x11a>
 8006dc0:	6117      	str	r7, [r2, #16]
 8006dc2:	e79d      	b.n	8006d00 <__mdiff+0x34>
 8006dc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006dc8:	46e6      	mov	lr, ip
 8006dca:	0c08      	lsrs	r0, r1, #16
 8006dcc:	fa1c fc81 	uxtah	ip, ip, r1
 8006dd0:	4471      	add	r1, lr
 8006dd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006dd6:	b289      	uxth	r1, r1
 8006dd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ddc:	f846 1b04 	str.w	r1, [r6], #4
 8006de0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006de4:	e7dd      	b.n	8006da2 <__mdiff+0xd6>
 8006de6:	3f01      	subs	r7, #1
 8006de8:	e7e7      	b.n	8006dba <__mdiff+0xee>
 8006dea:	bf00      	nop
 8006dec:	08007ab4 	.word	0x08007ab4
 8006df0:	08007ac5 	.word	0x08007ac5

08006df4 <__d2b>:
 8006df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	460f      	mov	r7, r1
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	ec59 8b10 	vmov	r8, r9, d0
 8006e00:	4616      	mov	r6, r2
 8006e02:	f7ff fcd5 	bl	80067b0 <_Balloc>
 8006e06:	4604      	mov	r4, r0
 8006e08:	b930      	cbnz	r0, 8006e18 <__d2b+0x24>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4b23      	ldr	r3, [pc, #140]	@ (8006e9c <__d2b+0xa8>)
 8006e0e:	4824      	ldr	r0, [pc, #144]	@ (8006ea0 <__d2b+0xac>)
 8006e10:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e14:	f000 fa82 	bl	800731c <__assert_func>
 8006e18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e20:	b10d      	cbz	r5, 8006e26 <__d2b+0x32>
 8006e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	f1b8 0300 	subs.w	r3, r8, #0
 8006e2c:	d023      	beq.n	8006e76 <__d2b+0x82>
 8006e2e:	4668      	mov	r0, sp
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	f7ff fd84 	bl	800693e <__lo0bits>
 8006e36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e3a:	b1d0      	cbz	r0, 8006e72 <__d2b+0x7e>
 8006e3c:	f1c0 0320 	rsb	r3, r0, #32
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	430b      	orrs	r3, r1
 8006e46:	40c2      	lsrs	r2, r0
 8006e48:	6163      	str	r3, [r4, #20]
 8006e4a:	9201      	str	r2, [sp, #4]
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	61a3      	str	r3, [r4, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf0c      	ite	eq
 8006e54:	2201      	moveq	r2, #1
 8006e56:	2202      	movne	r2, #2
 8006e58:	6122      	str	r2, [r4, #16]
 8006e5a:	b1a5      	cbz	r5, 8006e86 <__d2b+0x92>
 8006e5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e60:	4405      	add	r5, r0
 8006e62:	603d      	str	r5, [r7, #0]
 8006e64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e68:	6030      	str	r0, [r6, #0]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	b003      	add	sp, #12
 8006e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e72:	6161      	str	r1, [r4, #20]
 8006e74:	e7ea      	b.n	8006e4c <__d2b+0x58>
 8006e76:	a801      	add	r0, sp, #4
 8006e78:	f7ff fd61 	bl	800693e <__lo0bits>
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	6163      	str	r3, [r4, #20]
 8006e80:	3020      	adds	r0, #32
 8006e82:	2201      	movs	r2, #1
 8006e84:	e7e8      	b.n	8006e58 <__d2b+0x64>
 8006e86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e8e:	6038      	str	r0, [r7, #0]
 8006e90:	6918      	ldr	r0, [r3, #16]
 8006e92:	f7ff fd35 	bl	8006900 <__hi0bits>
 8006e96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e9a:	e7e5      	b.n	8006e68 <__d2b+0x74>
 8006e9c:	08007ab4 	.word	0x08007ab4
 8006ea0:	08007ac5 	.word	0x08007ac5

08006ea4 <__ssputs_r>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	688e      	ldr	r6, [r1, #8]
 8006eaa:	461f      	mov	r7, r3
 8006eac:	42be      	cmp	r6, r7
 8006eae:	680b      	ldr	r3, [r1, #0]
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4690      	mov	r8, r2
 8006eb6:	d82d      	bhi.n	8006f14 <__ssputs_r+0x70>
 8006eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ec0:	d026      	beq.n	8006f10 <__ssputs_r+0x6c>
 8006ec2:	6965      	ldr	r5, [r4, #20]
 8006ec4:	6909      	ldr	r1, [r1, #16]
 8006ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eca:	eba3 0901 	sub.w	r9, r3, r1
 8006ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ed2:	1c7b      	adds	r3, r7, #1
 8006ed4:	444b      	add	r3, r9
 8006ed6:	106d      	asrs	r5, r5, #1
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	bf38      	it	cc
 8006edc:	461d      	movcc	r5, r3
 8006ede:	0553      	lsls	r3, r2, #21
 8006ee0:	d527      	bpl.n	8006f32 <__ssputs_r+0x8e>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7ff fbd8 	bl	8006698 <_malloc_r>
 8006ee8:	4606      	mov	r6, r0
 8006eea:	b360      	cbz	r0, 8006f46 <__ssputs_r+0xa2>
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	464a      	mov	r2, r9
 8006ef0:	f000 fa06 	bl	8007300 <memcpy>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	6126      	str	r6, [r4, #16]
 8006f02:	6165      	str	r5, [r4, #20]
 8006f04:	444e      	add	r6, r9
 8006f06:	eba5 0509 	sub.w	r5, r5, r9
 8006f0a:	6026      	str	r6, [r4, #0]
 8006f0c:	60a5      	str	r5, [r4, #8]
 8006f0e:	463e      	mov	r6, r7
 8006f10:	42be      	cmp	r6, r7
 8006f12:	d900      	bls.n	8006f16 <__ssputs_r+0x72>
 8006f14:	463e      	mov	r6, r7
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	f000 f9c6 	bl	80072ac <memmove>
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	1b9b      	subs	r3, r3, r6
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	4433      	add	r3, r6
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f32:	462a      	mov	r2, r5
 8006f34:	f000 fa36 	bl	80073a4 <_realloc_r>
 8006f38:	4606      	mov	r6, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d1e0      	bne.n	8006f00 <__ssputs_r+0x5c>
 8006f3e:	6921      	ldr	r1, [r4, #16]
 8006f40:	4650      	mov	r0, sl
 8006f42:	f7ff fb35 	bl	80065b0 <_free_r>
 8006f46:	230c      	movs	r3, #12
 8006f48:	f8ca 3000 	str.w	r3, [sl]
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f58:	e7e9      	b.n	8006f2e <__ssputs_r+0x8a>
	...

08006f5c <_svfiprintf_r>:
 8006f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	4698      	mov	r8, r3
 8006f62:	898b      	ldrh	r3, [r1, #12]
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	b09d      	sub	sp, #116	@ 0x74
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	d510      	bpl.n	8006f92 <_svfiprintf_r+0x36>
 8006f70:	690b      	ldr	r3, [r1, #16]
 8006f72:	b973      	cbnz	r3, 8006f92 <_svfiprintf_r+0x36>
 8006f74:	2140      	movs	r1, #64	@ 0x40
 8006f76:	f7ff fb8f 	bl	8006698 <_malloc_r>
 8006f7a:	6028      	str	r0, [r5, #0]
 8006f7c:	6128      	str	r0, [r5, #16]
 8006f7e:	b930      	cbnz	r0, 8006f8e <_svfiprintf_r+0x32>
 8006f80:	230c      	movs	r3, #12
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f88:	b01d      	add	sp, #116	@ 0x74
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	2340      	movs	r3, #64	@ 0x40
 8006f90:	616b      	str	r3, [r5, #20]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f96:	2320      	movs	r3, #32
 8006f98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa0:	2330      	movs	r3, #48	@ 0x30
 8006fa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007140 <_svfiprintf_r+0x1e4>
 8006fa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006faa:	f04f 0901 	mov.w	r9, #1
 8006fae:	4623      	mov	r3, r4
 8006fb0:	469a      	mov	sl, r3
 8006fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb6:	b10a      	cbz	r2, 8006fbc <_svfiprintf_r+0x60>
 8006fb8:	2a25      	cmp	r2, #37	@ 0x25
 8006fba:	d1f9      	bne.n	8006fb0 <_svfiprintf_r+0x54>
 8006fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc0:	d00b      	beq.n	8006fda <_svfiprintf_r+0x7e>
 8006fc2:	465b      	mov	r3, fp
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7ff ff6b 	bl	8006ea4 <__ssputs_r>
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f000 80a7 	beq.w	8007122 <_svfiprintf_r+0x1c6>
 8006fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd6:	445a      	add	r2, fp
 8006fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fda:	f89a 3000 	ldrb.w	r3, [sl]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 809f 	beq.w	8007122 <_svfiprintf_r+0x1c6>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fee:	f10a 0a01 	add.w	sl, sl, #1
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	9307      	str	r3, [sp, #28]
 8006ff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ffa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ffc:	4654      	mov	r4, sl
 8006ffe:	2205      	movs	r2, #5
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	484e      	ldr	r0, [pc, #312]	@ (8007140 <_svfiprintf_r+0x1e4>)
 8007006:	f7f9 f8f3 	bl	80001f0 <memchr>
 800700a:	9a04      	ldr	r2, [sp, #16]
 800700c:	b9d8      	cbnz	r0, 8007046 <_svfiprintf_r+0xea>
 800700e:	06d0      	lsls	r0, r2, #27
 8007010:	bf44      	itt	mi
 8007012:	2320      	movmi	r3, #32
 8007014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007018:	0711      	lsls	r1, r2, #28
 800701a:	bf44      	itt	mi
 800701c:	232b      	movmi	r3, #43	@ 0x2b
 800701e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007022:	f89a 3000 	ldrb.w	r3, [sl]
 8007026:	2b2a      	cmp	r3, #42	@ 0x2a
 8007028:	d015      	beq.n	8007056 <_svfiprintf_r+0xfa>
 800702a:	9a07      	ldr	r2, [sp, #28]
 800702c:	4654      	mov	r4, sl
 800702e:	2000      	movs	r0, #0
 8007030:	f04f 0c0a 	mov.w	ip, #10
 8007034:	4621      	mov	r1, r4
 8007036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800703a:	3b30      	subs	r3, #48	@ 0x30
 800703c:	2b09      	cmp	r3, #9
 800703e:	d94b      	bls.n	80070d8 <_svfiprintf_r+0x17c>
 8007040:	b1b0      	cbz	r0, 8007070 <_svfiprintf_r+0x114>
 8007042:	9207      	str	r2, [sp, #28]
 8007044:	e014      	b.n	8007070 <_svfiprintf_r+0x114>
 8007046:	eba0 0308 	sub.w	r3, r0, r8
 800704a:	fa09 f303 	lsl.w	r3, r9, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	46a2      	mov	sl, r4
 8007054:	e7d2      	b.n	8006ffc <_svfiprintf_r+0xa0>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	1d19      	adds	r1, r3, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	9103      	str	r1, [sp, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfbb      	ittet	lt
 8007062:	425b      	neglt	r3, r3
 8007064:	f042 0202 	orrlt.w	r2, r2, #2
 8007068:	9307      	strge	r3, [sp, #28]
 800706a:	9307      	strlt	r3, [sp, #28]
 800706c:	bfb8      	it	lt
 800706e:	9204      	strlt	r2, [sp, #16]
 8007070:	7823      	ldrb	r3, [r4, #0]
 8007072:	2b2e      	cmp	r3, #46	@ 0x2e
 8007074:	d10a      	bne.n	800708c <_svfiprintf_r+0x130>
 8007076:	7863      	ldrb	r3, [r4, #1]
 8007078:	2b2a      	cmp	r3, #42	@ 0x2a
 800707a:	d132      	bne.n	80070e2 <_svfiprintf_r+0x186>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	9203      	str	r2, [sp, #12]
 8007084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007088:	3402      	adds	r4, #2
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007150 <_svfiprintf_r+0x1f4>
 8007090:	7821      	ldrb	r1, [r4, #0]
 8007092:	2203      	movs	r2, #3
 8007094:	4650      	mov	r0, sl
 8007096:	f7f9 f8ab 	bl	80001f0 <memchr>
 800709a:	b138      	cbz	r0, 80070ac <_svfiprintf_r+0x150>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	eba0 000a 	sub.w	r0, r0, sl
 80070a2:	2240      	movs	r2, #64	@ 0x40
 80070a4:	4082      	lsls	r2, r0
 80070a6:	4313      	orrs	r3, r2
 80070a8:	3401      	adds	r4, #1
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b0:	4824      	ldr	r0, [pc, #144]	@ (8007144 <_svfiprintf_r+0x1e8>)
 80070b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070b6:	2206      	movs	r2, #6
 80070b8:	f7f9 f89a 	bl	80001f0 <memchr>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d036      	beq.n	800712e <_svfiprintf_r+0x1d2>
 80070c0:	4b21      	ldr	r3, [pc, #132]	@ (8007148 <_svfiprintf_r+0x1ec>)
 80070c2:	bb1b      	cbnz	r3, 800710c <_svfiprintf_r+0x1b0>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	3307      	adds	r3, #7
 80070c8:	f023 0307 	bic.w	r3, r3, #7
 80070cc:	3308      	adds	r3, #8
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	4433      	add	r3, r6
 80070d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d6:	e76a      	b.n	8006fae <_svfiprintf_r+0x52>
 80070d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070dc:	460c      	mov	r4, r1
 80070de:	2001      	movs	r0, #1
 80070e0:	e7a8      	b.n	8007034 <_svfiprintf_r+0xd8>
 80070e2:	2300      	movs	r3, #0
 80070e4:	3401      	adds	r4, #1
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	4619      	mov	r1, r3
 80070ea:	f04f 0c0a 	mov.w	ip, #10
 80070ee:	4620      	mov	r0, r4
 80070f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f4:	3a30      	subs	r2, #48	@ 0x30
 80070f6:	2a09      	cmp	r2, #9
 80070f8:	d903      	bls.n	8007102 <_svfiprintf_r+0x1a6>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0c6      	beq.n	800708c <_svfiprintf_r+0x130>
 80070fe:	9105      	str	r1, [sp, #20]
 8007100:	e7c4      	b.n	800708c <_svfiprintf_r+0x130>
 8007102:	fb0c 2101 	mla	r1, ip, r1, r2
 8007106:	4604      	mov	r4, r0
 8007108:	2301      	movs	r3, #1
 800710a:	e7f0      	b.n	80070ee <_svfiprintf_r+0x192>
 800710c:	ab03      	add	r3, sp, #12
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	462a      	mov	r2, r5
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <_svfiprintf_r+0x1f0>)
 8007114:	a904      	add	r1, sp, #16
 8007116:	4638      	mov	r0, r7
 8007118:	f7fd fe92 	bl	8004e40 <_printf_float>
 800711c:	1c42      	adds	r2, r0, #1
 800711e:	4606      	mov	r6, r0
 8007120:	d1d6      	bne.n	80070d0 <_svfiprintf_r+0x174>
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	065b      	lsls	r3, r3, #25
 8007126:	f53f af2d 	bmi.w	8006f84 <_svfiprintf_r+0x28>
 800712a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800712c:	e72c      	b.n	8006f88 <_svfiprintf_r+0x2c>
 800712e:	ab03      	add	r3, sp, #12
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	462a      	mov	r2, r5
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <_svfiprintf_r+0x1f0>)
 8007136:	a904      	add	r1, sp, #16
 8007138:	4638      	mov	r0, r7
 800713a:	f7fe f919 	bl	8005370 <_printf_i>
 800713e:	e7ed      	b.n	800711c <_svfiprintf_r+0x1c0>
 8007140:	08007b1e 	.word	0x08007b1e
 8007144:	08007b28 	.word	0x08007b28
 8007148:	08004e41 	.word	0x08004e41
 800714c:	08006ea5 	.word	0x08006ea5
 8007150:	08007b24 	.word	0x08007b24

08007154 <__sflush_r>:
 8007154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715c:	0716      	lsls	r6, r2, #28
 800715e:	4605      	mov	r5, r0
 8007160:	460c      	mov	r4, r1
 8007162:	d454      	bmi.n	800720e <__sflush_r+0xba>
 8007164:	684b      	ldr	r3, [r1, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dc02      	bgt.n	8007170 <__sflush_r+0x1c>
 800716a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	dd48      	ble.n	8007202 <__sflush_r+0xae>
 8007170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007172:	2e00      	cmp	r6, #0
 8007174:	d045      	beq.n	8007202 <__sflush_r+0xae>
 8007176:	2300      	movs	r3, #0
 8007178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800717c:	682f      	ldr	r7, [r5, #0]
 800717e:	6a21      	ldr	r1, [r4, #32]
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	d030      	beq.n	80071e6 <__sflush_r+0x92>
 8007184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	0759      	lsls	r1, r3, #29
 800718a:	d505      	bpl.n	8007198 <__sflush_r+0x44>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007192:	b10b      	cbz	r3, 8007198 <__sflush_r+0x44>
 8007194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800719c:	6a21      	ldr	r1, [r4, #32]
 800719e:	4628      	mov	r0, r5
 80071a0:	47b0      	blx	r6
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	d106      	bne.n	80071b6 <__sflush_r+0x62>
 80071a8:	6829      	ldr	r1, [r5, #0]
 80071aa:	291d      	cmp	r1, #29
 80071ac:	d82b      	bhi.n	8007206 <__sflush_r+0xb2>
 80071ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007258 <__sflush_r+0x104>)
 80071b0:	40ca      	lsrs	r2, r1
 80071b2:	07d6      	lsls	r6, r2, #31
 80071b4:	d527      	bpl.n	8007206 <__sflush_r+0xb2>
 80071b6:	2200      	movs	r2, #0
 80071b8:	6062      	str	r2, [r4, #4]
 80071ba:	04d9      	lsls	r1, r3, #19
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	6022      	str	r2, [r4, #0]
 80071c0:	d504      	bpl.n	80071cc <__sflush_r+0x78>
 80071c2:	1c42      	adds	r2, r0, #1
 80071c4:	d101      	bne.n	80071ca <__sflush_r+0x76>
 80071c6:	682b      	ldr	r3, [r5, #0]
 80071c8:	b903      	cbnz	r3, 80071cc <__sflush_r+0x78>
 80071ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80071cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ce:	602f      	str	r7, [r5, #0]
 80071d0:	b1b9      	cbz	r1, 8007202 <__sflush_r+0xae>
 80071d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071d6:	4299      	cmp	r1, r3
 80071d8:	d002      	beq.n	80071e0 <__sflush_r+0x8c>
 80071da:	4628      	mov	r0, r5
 80071dc:	f7ff f9e8 	bl	80065b0 <_free_r>
 80071e0:	2300      	movs	r3, #0
 80071e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80071e4:	e00d      	b.n	8007202 <__sflush_r+0xae>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b0      	blx	r6
 80071ec:	4602      	mov	r2, r0
 80071ee:	1c50      	adds	r0, r2, #1
 80071f0:	d1c9      	bne.n	8007186 <__sflush_r+0x32>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0c6      	beq.n	8007186 <__sflush_r+0x32>
 80071f8:	2b1d      	cmp	r3, #29
 80071fa:	d001      	beq.n	8007200 <__sflush_r+0xac>
 80071fc:	2b16      	cmp	r3, #22
 80071fe:	d11e      	bne.n	800723e <__sflush_r+0xea>
 8007200:	602f      	str	r7, [r5, #0]
 8007202:	2000      	movs	r0, #0
 8007204:	e022      	b.n	800724c <__sflush_r+0xf8>
 8007206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800720a:	b21b      	sxth	r3, r3
 800720c:	e01b      	b.n	8007246 <__sflush_r+0xf2>
 800720e:	690f      	ldr	r7, [r1, #16]
 8007210:	2f00      	cmp	r7, #0
 8007212:	d0f6      	beq.n	8007202 <__sflush_r+0xae>
 8007214:	0793      	lsls	r3, r2, #30
 8007216:	680e      	ldr	r6, [r1, #0]
 8007218:	bf08      	it	eq
 800721a:	694b      	ldreq	r3, [r1, #20]
 800721c:	600f      	str	r7, [r1, #0]
 800721e:	bf18      	it	ne
 8007220:	2300      	movne	r3, #0
 8007222:	eba6 0807 	sub.w	r8, r6, r7
 8007226:	608b      	str	r3, [r1, #8]
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	dde9      	ble.n	8007202 <__sflush_r+0xae>
 800722e:	6a21      	ldr	r1, [r4, #32]
 8007230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007232:	4643      	mov	r3, r8
 8007234:	463a      	mov	r2, r7
 8007236:	4628      	mov	r0, r5
 8007238:	47b0      	blx	r6
 800723a:	2800      	cmp	r0, #0
 800723c:	dc08      	bgt.n	8007250 <__sflush_r+0xfc>
 800723e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	4407      	add	r7, r0
 8007252:	eba8 0800 	sub.w	r8, r8, r0
 8007256:	e7e7      	b.n	8007228 <__sflush_r+0xd4>
 8007258:	20400001 	.word	0x20400001

0800725c <_fflush_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b913      	cbnz	r3, 800726c <_fflush_r+0x10>
 8007266:	2500      	movs	r5, #0
 8007268:	4628      	mov	r0, r5
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	b118      	cbz	r0, 8007276 <_fflush_r+0x1a>
 800726e:	6a03      	ldr	r3, [r0, #32]
 8007270:	b90b      	cbnz	r3, 8007276 <_fflush_r+0x1a>
 8007272:	f7fe fa27 	bl	80056c4 <__sinit>
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0f3      	beq.n	8007266 <_fflush_r+0xa>
 800727e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007280:	07d0      	lsls	r0, r2, #31
 8007282:	d404      	bmi.n	800728e <_fflush_r+0x32>
 8007284:	0599      	lsls	r1, r3, #22
 8007286:	d402      	bmi.n	800728e <_fflush_r+0x32>
 8007288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728a:	f7fe fb34 	bl	80058f6 <__retarget_lock_acquire_recursive>
 800728e:	4628      	mov	r0, r5
 8007290:	4621      	mov	r1, r4
 8007292:	f7ff ff5f 	bl	8007154 <__sflush_r>
 8007296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007298:	07da      	lsls	r2, r3, #31
 800729a:	4605      	mov	r5, r0
 800729c:	d4e4      	bmi.n	8007268 <_fflush_r+0xc>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	059b      	lsls	r3, r3, #22
 80072a2:	d4e1      	bmi.n	8007268 <_fflush_r+0xc>
 80072a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072a6:	f7fe fb27 	bl	80058f8 <__retarget_lock_release_recursive>
 80072aa:	e7dd      	b.n	8007268 <_fflush_r+0xc>

080072ac <memmove>:
 80072ac:	4288      	cmp	r0, r1
 80072ae:	b510      	push	{r4, lr}
 80072b0:	eb01 0402 	add.w	r4, r1, r2
 80072b4:	d902      	bls.n	80072bc <memmove+0x10>
 80072b6:	4284      	cmp	r4, r0
 80072b8:	4623      	mov	r3, r4
 80072ba:	d807      	bhi.n	80072cc <memmove+0x20>
 80072bc:	1e43      	subs	r3, r0, #1
 80072be:	42a1      	cmp	r1, r4
 80072c0:	d008      	beq.n	80072d4 <memmove+0x28>
 80072c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072ca:	e7f8      	b.n	80072be <memmove+0x12>
 80072cc:	4402      	add	r2, r0
 80072ce:	4601      	mov	r1, r0
 80072d0:	428a      	cmp	r2, r1
 80072d2:	d100      	bne.n	80072d6 <memmove+0x2a>
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072de:	e7f7      	b.n	80072d0 <memmove+0x24>

080072e0 <_sbrk_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	@ (80072fc <_sbrk_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fa fbe4 	bl	8001ab8 <_sbrk>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_sbrk_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_sbrk_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	20000b50 	.word	0x20000b50

08007300 <memcpy>:
 8007300:	440a      	add	r2, r1
 8007302:	4291      	cmp	r1, r2
 8007304:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007308:	d100      	bne.n	800730c <memcpy+0xc>
 800730a:	4770      	bx	lr
 800730c:	b510      	push	{r4, lr}
 800730e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007316:	4291      	cmp	r1, r2
 8007318:	d1f9      	bne.n	800730e <memcpy+0xe>
 800731a:	bd10      	pop	{r4, pc}

0800731c <__assert_func>:
 800731c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800731e:	4614      	mov	r4, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <__assert_func+0x2c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4605      	mov	r5, r0
 8007328:	68d8      	ldr	r0, [r3, #12]
 800732a:	b14c      	cbz	r4, 8007340 <__assert_func+0x24>
 800732c:	4b07      	ldr	r3, [pc, #28]	@ (800734c <__assert_func+0x30>)
 800732e:	9100      	str	r1, [sp, #0]
 8007330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007334:	4906      	ldr	r1, [pc, #24]	@ (8007350 <__assert_func+0x34>)
 8007336:	462b      	mov	r3, r5
 8007338:	f000 f870 	bl	800741c <fiprintf>
 800733c:	f000 f880 	bl	8007440 <abort>
 8007340:	4b04      	ldr	r3, [pc, #16]	@ (8007354 <__assert_func+0x38>)
 8007342:	461c      	mov	r4, r3
 8007344:	e7f3      	b.n	800732e <__assert_func+0x12>
 8007346:	bf00      	nop
 8007348:	20000018 	.word	0x20000018
 800734c:	08007b39 	.word	0x08007b39
 8007350:	08007b46 	.word	0x08007b46
 8007354:	08007b74 	.word	0x08007b74

08007358 <_calloc_r>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	fba1 5402 	umull	r5, r4, r1, r2
 800735e:	b934      	cbnz	r4, 800736e <_calloc_r+0x16>
 8007360:	4629      	mov	r1, r5
 8007362:	f7ff f999 	bl	8006698 <_malloc_r>
 8007366:	4606      	mov	r6, r0
 8007368:	b928      	cbnz	r0, 8007376 <_calloc_r+0x1e>
 800736a:	4630      	mov	r0, r6
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	220c      	movs	r2, #12
 8007370:	6002      	str	r2, [r0, #0]
 8007372:	2600      	movs	r6, #0
 8007374:	e7f9      	b.n	800736a <_calloc_r+0x12>
 8007376:	462a      	mov	r2, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7fe fa3e 	bl	80057fa <memset>
 800737e:	e7f4      	b.n	800736a <_calloc_r+0x12>

08007380 <__ascii_mbtowc>:
 8007380:	b082      	sub	sp, #8
 8007382:	b901      	cbnz	r1, 8007386 <__ascii_mbtowc+0x6>
 8007384:	a901      	add	r1, sp, #4
 8007386:	b142      	cbz	r2, 800739a <__ascii_mbtowc+0x1a>
 8007388:	b14b      	cbz	r3, 800739e <__ascii_mbtowc+0x1e>
 800738a:	7813      	ldrb	r3, [r2, #0]
 800738c:	600b      	str	r3, [r1, #0]
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	1e10      	subs	r0, r2, #0
 8007392:	bf18      	it	ne
 8007394:	2001      	movne	r0, #1
 8007396:	b002      	add	sp, #8
 8007398:	4770      	bx	lr
 800739a:	4610      	mov	r0, r2
 800739c:	e7fb      	b.n	8007396 <__ascii_mbtowc+0x16>
 800739e:	f06f 0001 	mvn.w	r0, #1
 80073a2:	e7f8      	b.n	8007396 <__ascii_mbtowc+0x16>

080073a4 <_realloc_r>:
 80073a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a8:	4607      	mov	r7, r0
 80073aa:	4614      	mov	r4, r2
 80073ac:	460d      	mov	r5, r1
 80073ae:	b921      	cbnz	r1, 80073ba <_realloc_r+0x16>
 80073b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4611      	mov	r1, r2
 80073b6:	f7ff b96f 	b.w	8006698 <_malloc_r>
 80073ba:	b92a      	cbnz	r2, 80073c8 <_realloc_r+0x24>
 80073bc:	f7ff f8f8 	bl	80065b0 <_free_r>
 80073c0:	4625      	mov	r5, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	f000 f841 	bl	800744e <_malloc_usable_size_r>
 80073cc:	4284      	cmp	r4, r0
 80073ce:	4606      	mov	r6, r0
 80073d0:	d802      	bhi.n	80073d8 <_realloc_r+0x34>
 80073d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073d6:	d8f4      	bhi.n	80073c2 <_realloc_r+0x1e>
 80073d8:	4621      	mov	r1, r4
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff f95c 	bl	8006698 <_malloc_r>
 80073e0:	4680      	mov	r8, r0
 80073e2:	b908      	cbnz	r0, 80073e8 <_realloc_r+0x44>
 80073e4:	4645      	mov	r5, r8
 80073e6:	e7ec      	b.n	80073c2 <_realloc_r+0x1e>
 80073e8:	42b4      	cmp	r4, r6
 80073ea:	4622      	mov	r2, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	bf28      	it	cs
 80073f0:	4632      	movcs	r2, r6
 80073f2:	f7ff ff85 	bl	8007300 <memcpy>
 80073f6:	4629      	mov	r1, r5
 80073f8:	4638      	mov	r0, r7
 80073fa:	f7ff f8d9 	bl	80065b0 <_free_r>
 80073fe:	e7f1      	b.n	80073e4 <_realloc_r+0x40>

08007400 <__ascii_wctomb>:
 8007400:	4603      	mov	r3, r0
 8007402:	4608      	mov	r0, r1
 8007404:	b141      	cbz	r1, 8007418 <__ascii_wctomb+0x18>
 8007406:	2aff      	cmp	r2, #255	@ 0xff
 8007408:	d904      	bls.n	8007414 <__ascii_wctomb+0x14>
 800740a:	228a      	movs	r2, #138	@ 0x8a
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007412:	4770      	bx	lr
 8007414:	700a      	strb	r2, [r1, #0]
 8007416:	2001      	movs	r0, #1
 8007418:	4770      	bx	lr
	...

0800741c <fiprintf>:
 800741c:	b40e      	push	{r1, r2, r3}
 800741e:	b503      	push	{r0, r1, lr}
 8007420:	4601      	mov	r1, r0
 8007422:	ab03      	add	r3, sp, #12
 8007424:	4805      	ldr	r0, [pc, #20]	@ (800743c <fiprintf+0x20>)
 8007426:	f853 2b04 	ldr.w	r2, [r3], #4
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f000 f83f 	bl	80074b0 <_vfiprintf_r>
 8007432:	b002      	add	sp, #8
 8007434:	f85d eb04 	ldr.w	lr, [sp], #4
 8007438:	b003      	add	sp, #12
 800743a:	4770      	bx	lr
 800743c:	20000018 	.word	0x20000018

08007440 <abort>:
 8007440:	b508      	push	{r3, lr}
 8007442:	2006      	movs	r0, #6
 8007444:	f000 fa08 	bl	8007858 <raise>
 8007448:	2001      	movs	r0, #1
 800744a:	f7fa fabd 	bl	80019c8 <_exit>

0800744e <_malloc_usable_size_r>:
 800744e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007452:	1f18      	subs	r0, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbc      	itt	lt
 8007458:	580b      	ldrlt	r3, [r1, r0]
 800745a:	18c0      	addlt	r0, r0, r3
 800745c:	4770      	bx	lr

0800745e <__sfputc_r>:
 800745e:	6893      	ldr	r3, [r2, #8]
 8007460:	3b01      	subs	r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	b410      	push	{r4}
 8007466:	6093      	str	r3, [r2, #8]
 8007468:	da08      	bge.n	800747c <__sfputc_r+0x1e>
 800746a:	6994      	ldr	r4, [r2, #24]
 800746c:	42a3      	cmp	r3, r4
 800746e:	db01      	blt.n	8007474 <__sfputc_r+0x16>
 8007470:	290a      	cmp	r1, #10
 8007472:	d103      	bne.n	800747c <__sfputc_r+0x1e>
 8007474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007478:	f000 b932 	b.w	80076e0 <__swbuf_r>
 800747c:	6813      	ldr	r3, [r2, #0]
 800747e:	1c58      	adds	r0, r3, #1
 8007480:	6010      	str	r0, [r2, #0]
 8007482:	7019      	strb	r1, [r3, #0]
 8007484:	4608      	mov	r0, r1
 8007486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748a:	4770      	bx	lr

0800748c <__sfputs_r>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	4606      	mov	r6, r0
 8007490:	460f      	mov	r7, r1
 8007492:	4614      	mov	r4, r2
 8007494:	18d5      	adds	r5, r2, r3
 8007496:	42ac      	cmp	r4, r5
 8007498:	d101      	bne.n	800749e <__sfputs_r+0x12>
 800749a:	2000      	movs	r0, #0
 800749c:	e007      	b.n	80074ae <__sfputs_r+0x22>
 800749e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a2:	463a      	mov	r2, r7
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff ffda 	bl	800745e <__sfputc_r>
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	d1f3      	bne.n	8007496 <__sfputs_r+0xa>
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074b0 <_vfiprintf_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460d      	mov	r5, r1
 80074b6:	b09d      	sub	sp, #116	@ 0x74
 80074b8:	4614      	mov	r4, r2
 80074ba:	4698      	mov	r8, r3
 80074bc:	4606      	mov	r6, r0
 80074be:	b118      	cbz	r0, 80074c8 <_vfiprintf_r+0x18>
 80074c0:	6a03      	ldr	r3, [r0, #32]
 80074c2:	b90b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x18>
 80074c4:	f7fe f8fe 	bl	80056c4 <__sinit>
 80074c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d405      	bmi.n	80074da <_vfiprintf_r+0x2a>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d402      	bmi.n	80074da <_vfiprintf_r+0x2a>
 80074d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d6:	f7fe fa0e 	bl	80058f6 <__retarget_lock_acquire_recursive>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	071b      	lsls	r3, r3, #28
 80074de:	d501      	bpl.n	80074e4 <_vfiprintf_r+0x34>
 80074e0:	692b      	ldr	r3, [r5, #16]
 80074e2:	b99b      	cbnz	r3, 800750c <_vfiprintf_r+0x5c>
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 f938 	bl	800775c <__swsetup_r>
 80074ec:	b170      	cbz	r0, 800750c <_vfiprintf_r+0x5c>
 80074ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f0:	07dc      	lsls	r4, r3, #31
 80074f2:	d504      	bpl.n	80074fe <_vfiprintf_r+0x4e>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f8:	b01d      	add	sp, #116	@ 0x74
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	0598      	lsls	r0, r3, #22
 8007502:	d4f7      	bmi.n	80074f4 <_vfiprintf_r+0x44>
 8007504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007506:	f7fe f9f7 	bl	80058f8 <__retarget_lock_release_recursive>
 800750a:	e7f3      	b.n	80074f4 <_vfiprintf_r+0x44>
 800750c:	2300      	movs	r3, #0
 800750e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007510:	2320      	movs	r3, #32
 8007512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007516:	f8cd 800c 	str.w	r8, [sp, #12]
 800751a:	2330      	movs	r3, #48	@ 0x30
 800751c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076cc <_vfiprintf_r+0x21c>
 8007520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007524:	f04f 0901 	mov.w	r9, #1
 8007528:	4623      	mov	r3, r4
 800752a:	469a      	mov	sl, r3
 800752c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007530:	b10a      	cbz	r2, 8007536 <_vfiprintf_r+0x86>
 8007532:	2a25      	cmp	r2, #37	@ 0x25
 8007534:	d1f9      	bne.n	800752a <_vfiprintf_r+0x7a>
 8007536:	ebba 0b04 	subs.w	fp, sl, r4
 800753a:	d00b      	beq.n	8007554 <_vfiprintf_r+0xa4>
 800753c:	465b      	mov	r3, fp
 800753e:	4622      	mov	r2, r4
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ffa2 	bl	800748c <__sfputs_r>
 8007548:	3001      	adds	r0, #1
 800754a:	f000 80a7 	beq.w	800769c <_vfiprintf_r+0x1ec>
 800754e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007550:	445a      	add	r2, fp
 8007552:	9209      	str	r2, [sp, #36]	@ 0x24
 8007554:	f89a 3000 	ldrb.w	r3, [sl]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 809f 	beq.w	800769c <_vfiprintf_r+0x1ec>
 800755e:	2300      	movs	r3, #0
 8007560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007568:	f10a 0a01 	add.w	sl, sl, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	9307      	str	r3, [sp, #28]
 8007570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007574:	931a      	str	r3, [sp, #104]	@ 0x68
 8007576:	4654      	mov	r4, sl
 8007578:	2205      	movs	r2, #5
 800757a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757e:	4853      	ldr	r0, [pc, #332]	@ (80076cc <_vfiprintf_r+0x21c>)
 8007580:	f7f8 fe36 	bl	80001f0 <memchr>
 8007584:	9a04      	ldr	r2, [sp, #16]
 8007586:	b9d8      	cbnz	r0, 80075c0 <_vfiprintf_r+0x110>
 8007588:	06d1      	lsls	r1, r2, #27
 800758a:	bf44      	itt	mi
 800758c:	2320      	movmi	r3, #32
 800758e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007592:	0713      	lsls	r3, r2, #28
 8007594:	bf44      	itt	mi
 8007596:	232b      	movmi	r3, #43	@ 0x2b
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759c:	f89a 3000 	ldrb.w	r3, [sl]
 80075a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075a2:	d015      	beq.n	80075d0 <_vfiprintf_r+0x120>
 80075a4:	9a07      	ldr	r2, [sp, #28]
 80075a6:	4654      	mov	r4, sl
 80075a8:	2000      	movs	r0, #0
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4621      	mov	r1, r4
 80075b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075b4:	3b30      	subs	r3, #48	@ 0x30
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d94b      	bls.n	8007652 <_vfiprintf_r+0x1a2>
 80075ba:	b1b0      	cbz	r0, 80075ea <_vfiprintf_r+0x13a>
 80075bc:	9207      	str	r2, [sp, #28]
 80075be:	e014      	b.n	80075ea <_vfiprintf_r+0x13a>
 80075c0:	eba0 0308 	sub.w	r3, r0, r8
 80075c4:	fa09 f303 	lsl.w	r3, r9, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	46a2      	mov	sl, r4
 80075ce:	e7d2      	b.n	8007576 <_vfiprintf_r+0xc6>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	1d19      	adds	r1, r3, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfbb      	ittet	lt
 80075dc:	425b      	neglt	r3, r3
 80075de:	f042 0202 	orrlt.w	r2, r2, #2
 80075e2:	9307      	strge	r3, [sp, #28]
 80075e4:	9307      	strlt	r3, [sp, #28]
 80075e6:	bfb8      	it	lt
 80075e8:	9204      	strlt	r2, [sp, #16]
 80075ea:	7823      	ldrb	r3, [r4, #0]
 80075ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ee:	d10a      	bne.n	8007606 <_vfiprintf_r+0x156>
 80075f0:	7863      	ldrb	r3, [r4, #1]
 80075f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f4:	d132      	bne.n	800765c <_vfiprintf_r+0x1ac>
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9203      	str	r2, [sp, #12]
 80075fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007602:	3402      	adds	r4, #2
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076dc <_vfiprintf_r+0x22c>
 800760a:	7821      	ldrb	r1, [r4, #0]
 800760c:	2203      	movs	r2, #3
 800760e:	4650      	mov	r0, sl
 8007610:	f7f8 fdee 	bl	80001f0 <memchr>
 8007614:	b138      	cbz	r0, 8007626 <_vfiprintf_r+0x176>
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	eba0 000a 	sub.w	r0, r0, sl
 800761c:	2240      	movs	r2, #64	@ 0x40
 800761e:	4082      	lsls	r2, r0
 8007620:	4313      	orrs	r3, r2
 8007622:	3401      	adds	r4, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762a:	4829      	ldr	r0, [pc, #164]	@ (80076d0 <_vfiprintf_r+0x220>)
 800762c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007630:	2206      	movs	r2, #6
 8007632:	f7f8 fddd 	bl	80001f0 <memchr>
 8007636:	2800      	cmp	r0, #0
 8007638:	d03f      	beq.n	80076ba <_vfiprintf_r+0x20a>
 800763a:	4b26      	ldr	r3, [pc, #152]	@ (80076d4 <_vfiprintf_r+0x224>)
 800763c:	bb1b      	cbnz	r3, 8007686 <_vfiprintf_r+0x1d6>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	3307      	adds	r3, #7
 8007642:	f023 0307 	bic.w	r3, r3, #7
 8007646:	3308      	adds	r3, #8
 8007648:	9303      	str	r3, [sp, #12]
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	443b      	add	r3, r7
 800764e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007650:	e76a      	b.n	8007528 <_vfiprintf_r+0x78>
 8007652:	fb0c 3202 	mla	r2, ip, r2, r3
 8007656:	460c      	mov	r4, r1
 8007658:	2001      	movs	r0, #1
 800765a:	e7a8      	b.n	80075ae <_vfiprintf_r+0xfe>
 800765c:	2300      	movs	r3, #0
 800765e:	3401      	adds	r4, #1
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	4619      	mov	r1, r3
 8007664:	f04f 0c0a 	mov.w	ip, #10
 8007668:	4620      	mov	r0, r4
 800766a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766e:	3a30      	subs	r2, #48	@ 0x30
 8007670:	2a09      	cmp	r2, #9
 8007672:	d903      	bls.n	800767c <_vfiprintf_r+0x1cc>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0c6      	beq.n	8007606 <_vfiprintf_r+0x156>
 8007678:	9105      	str	r1, [sp, #20]
 800767a:	e7c4      	b.n	8007606 <_vfiprintf_r+0x156>
 800767c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007680:	4604      	mov	r4, r0
 8007682:	2301      	movs	r3, #1
 8007684:	e7f0      	b.n	8007668 <_vfiprintf_r+0x1b8>
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	462a      	mov	r2, r5
 800768c:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <_vfiprintf_r+0x228>)
 800768e:	a904      	add	r1, sp, #16
 8007690:	4630      	mov	r0, r6
 8007692:	f7fd fbd5 	bl	8004e40 <_printf_float>
 8007696:	4607      	mov	r7, r0
 8007698:	1c78      	adds	r0, r7, #1
 800769a:	d1d6      	bne.n	800764a <_vfiprintf_r+0x19a>
 800769c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x1fe>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x1fe>
 80076a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076aa:	f7fe f925 	bl	80058f8 <__retarget_lock_release_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	065b      	lsls	r3, r3, #25
 80076b2:	f53f af1f 	bmi.w	80074f4 <_vfiprintf_r+0x44>
 80076b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b8:	e71e      	b.n	80074f8 <_vfiprintf_r+0x48>
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462a      	mov	r2, r5
 80076c0:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <_vfiprintf_r+0x228>)
 80076c2:	a904      	add	r1, sp, #16
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7fd fe53 	bl	8005370 <_printf_i>
 80076ca:	e7e4      	b.n	8007696 <_vfiprintf_r+0x1e6>
 80076cc:	08007b1e 	.word	0x08007b1e
 80076d0:	08007b28 	.word	0x08007b28
 80076d4:	08004e41 	.word	0x08004e41
 80076d8:	0800748d 	.word	0x0800748d
 80076dc:	08007b24 	.word	0x08007b24

080076e0 <__swbuf_r>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	460e      	mov	r6, r1
 80076e4:	4614      	mov	r4, r2
 80076e6:	4605      	mov	r5, r0
 80076e8:	b118      	cbz	r0, 80076f2 <__swbuf_r+0x12>
 80076ea:	6a03      	ldr	r3, [r0, #32]
 80076ec:	b90b      	cbnz	r3, 80076f2 <__swbuf_r+0x12>
 80076ee:	f7fd ffe9 	bl	80056c4 <__sinit>
 80076f2:	69a3      	ldr	r3, [r4, #24]
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	071a      	lsls	r2, r3, #28
 80076fa:	d501      	bpl.n	8007700 <__swbuf_r+0x20>
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	b943      	cbnz	r3, 8007712 <__swbuf_r+0x32>
 8007700:	4621      	mov	r1, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f82a 	bl	800775c <__swsetup_r>
 8007708:	b118      	cbz	r0, 8007712 <__swbuf_r+0x32>
 800770a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800770e:	4638      	mov	r0, r7
 8007710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	1a98      	subs	r0, r3, r2
 8007718:	6963      	ldr	r3, [r4, #20]
 800771a:	b2f6      	uxtb	r6, r6
 800771c:	4283      	cmp	r3, r0
 800771e:	4637      	mov	r7, r6
 8007720:	dc05      	bgt.n	800772e <__swbuf_r+0x4e>
 8007722:	4621      	mov	r1, r4
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fd99 	bl	800725c <_fflush_r>
 800772a:	2800      	cmp	r0, #0
 800772c:	d1ed      	bne.n	800770a <__swbuf_r+0x2a>
 800772e:	68a3      	ldr	r3, [r4, #8]
 8007730:	3b01      	subs	r3, #1
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	6022      	str	r2, [r4, #0]
 800773a:	701e      	strb	r6, [r3, #0]
 800773c:	6962      	ldr	r2, [r4, #20]
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	429a      	cmp	r2, r3
 8007742:	d004      	beq.n	800774e <__swbuf_r+0x6e>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d5e1      	bpl.n	800770e <__swbuf_r+0x2e>
 800774a:	2e0a      	cmp	r6, #10
 800774c:	d1df      	bne.n	800770e <__swbuf_r+0x2e>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f7ff fd83 	bl	800725c <_fflush_r>
 8007756:	2800      	cmp	r0, #0
 8007758:	d0d9      	beq.n	800770e <__swbuf_r+0x2e>
 800775a:	e7d6      	b.n	800770a <__swbuf_r+0x2a>

0800775c <__swsetup_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4b29      	ldr	r3, [pc, #164]	@ (8007804 <__swsetup_r+0xa8>)
 8007760:	4605      	mov	r5, r0
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	460c      	mov	r4, r1
 8007766:	b118      	cbz	r0, 8007770 <__swsetup_r+0x14>
 8007768:	6a03      	ldr	r3, [r0, #32]
 800776a:	b90b      	cbnz	r3, 8007770 <__swsetup_r+0x14>
 800776c:	f7fd ffaa 	bl	80056c4 <__sinit>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	0719      	lsls	r1, r3, #28
 8007776:	d422      	bmi.n	80077be <__swsetup_r+0x62>
 8007778:	06da      	lsls	r2, r3, #27
 800777a:	d407      	bmi.n	800778c <__swsetup_r+0x30>
 800777c:	2209      	movs	r2, #9
 800777e:	602a      	str	r2, [r5, #0]
 8007780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800778a:	e033      	b.n	80077f4 <__swsetup_r+0x98>
 800778c:	0758      	lsls	r0, r3, #29
 800778e:	d512      	bpl.n	80077b6 <__swsetup_r+0x5a>
 8007790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007792:	b141      	cbz	r1, 80077a6 <__swsetup_r+0x4a>
 8007794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <__swsetup_r+0x46>
 800779c:	4628      	mov	r0, r5
 800779e:	f7fe ff07 	bl	80065b0 <_free_r>
 80077a2:	2300      	movs	r3, #0
 80077a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	2300      	movs	r3, #0
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f043 0308 	orr.w	r3, r3, #8
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	b94b      	cbnz	r3, 80077d6 <__swsetup_r+0x7a>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077cc:	d003      	beq.n	80077d6 <__swsetup_r+0x7a>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4628      	mov	r0, r5
 80077d2:	f000 f883 	bl	80078dc <__smakebuf_r>
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	f013 0201 	ands.w	r2, r3, #1
 80077de:	d00a      	beq.n	80077f6 <__swsetup_r+0x9a>
 80077e0:	2200      	movs	r2, #0
 80077e2:	60a2      	str	r2, [r4, #8]
 80077e4:	6962      	ldr	r2, [r4, #20]
 80077e6:	4252      	negs	r2, r2
 80077e8:	61a2      	str	r2, [r4, #24]
 80077ea:	6922      	ldr	r2, [r4, #16]
 80077ec:	b942      	cbnz	r2, 8007800 <__swsetup_r+0xa4>
 80077ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077f2:	d1c5      	bne.n	8007780 <__swsetup_r+0x24>
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	0799      	lsls	r1, r3, #30
 80077f8:	bf58      	it	pl
 80077fa:	6962      	ldrpl	r2, [r4, #20]
 80077fc:	60a2      	str	r2, [r4, #8]
 80077fe:	e7f4      	b.n	80077ea <__swsetup_r+0x8e>
 8007800:	2000      	movs	r0, #0
 8007802:	e7f7      	b.n	80077f4 <__swsetup_r+0x98>
 8007804:	20000018 	.word	0x20000018

08007808 <_raise_r>:
 8007808:	291f      	cmp	r1, #31
 800780a:	b538      	push	{r3, r4, r5, lr}
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	d904      	bls.n	800781c <_raise_r+0x14>
 8007812:	2316      	movs	r3, #22
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800781e:	b112      	cbz	r2, 8007826 <_raise_r+0x1e>
 8007820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007824:	b94b      	cbnz	r3, 800783a <_raise_r+0x32>
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f830 	bl	800788c <_getpid_r>
 800782c:	4622      	mov	r2, r4
 800782e:	4601      	mov	r1, r0
 8007830:	4628      	mov	r0, r5
 8007832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007836:	f000 b817 	b.w	8007868 <_kill_r>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d00a      	beq.n	8007854 <_raise_r+0x4c>
 800783e:	1c59      	adds	r1, r3, #1
 8007840:	d103      	bne.n	800784a <_raise_r+0x42>
 8007842:	2316      	movs	r3, #22
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	2001      	movs	r0, #1
 8007848:	e7e7      	b.n	800781a <_raise_r+0x12>
 800784a:	2100      	movs	r1, #0
 800784c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007850:	4620      	mov	r0, r4
 8007852:	4798      	blx	r3
 8007854:	2000      	movs	r0, #0
 8007856:	e7e0      	b.n	800781a <_raise_r+0x12>

08007858 <raise>:
 8007858:	4b02      	ldr	r3, [pc, #8]	@ (8007864 <raise+0xc>)
 800785a:	4601      	mov	r1, r0
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	f7ff bfd3 	b.w	8007808 <_raise_r>
 8007862:	bf00      	nop
 8007864:	20000018 	.word	0x20000018

08007868 <_kill_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	@ (8007888 <_kill_r+0x20>)
 800786c:	2300      	movs	r3, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f7fa f897 	bl	80019a8 <_kill>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d102      	bne.n	8007884 <_kill_r+0x1c>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	b103      	cbz	r3, 8007884 <_kill_r+0x1c>
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	20000b50 	.word	0x20000b50

0800788c <_getpid_r>:
 800788c:	f7fa b884 	b.w	8001998 <_getpid>

08007890 <__swhatbuf_r>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	460c      	mov	r4, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	2900      	cmp	r1, #0
 800789a:	b096      	sub	sp, #88	@ 0x58
 800789c:	4615      	mov	r5, r2
 800789e:	461e      	mov	r6, r3
 80078a0:	da0d      	bge.n	80078be <__swhatbuf_r+0x2e>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	bf14      	ite	ne
 80078ae:	2340      	movne	r3, #64	@ 0x40
 80078b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078b4:	2000      	movs	r0, #0
 80078b6:	6031      	str	r1, [r6, #0]
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	b016      	add	sp, #88	@ 0x58
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	466a      	mov	r2, sp
 80078c0:	f000 f848 	bl	8007954 <_fstat_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	dbec      	blt.n	80078a2 <__swhatbuf_r+0x12>
 80078c8:	9901      	ldr	r1, [sp, #4]
 80078ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078d2:	4259      	negs	r1, r3
 80078d4:	4159      	adcs	r1, r3
 80078d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078da:	e7eb      	b.n	80078b4 <__swhatbuf_r+0x24>

080078dc <__smakebuf_r>:
 80078dc:	898b      	ldrh	r3, [r1, #12]
 80078de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e0:	079d      	lsls	r5, r3, #30
 80078e2:	4606      	mov	r6, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	d507      	bpl.n	80078f8 <__smakebuf_r+0x1c>
 80078e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	2301      	movs	r3, #1
 80078f2:	6163      	str	r3, [r4, #20]
 80078f4:	b003      	add	sp, #12
 80078f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f8:	ab01      	add	r3, sp, #4
 80078fa:	466a      	mov	r2, sp
 80078fc:	f7ff ffc8 	bl	8007890 <__swhatbuf_r>
 8007900:	9f00      	ldr	r7, [sp, #0]
 8007902:	4605      	mov	r5, r0
 8007904:	4639      	mov	r1, r7
 8007906:	4630      	mov	r0, r6
 8007908:	f7fe fec6 	bl	8006698 <_malloc_r>
 800790c:	b948      	cbnz	r0, 8007922 <__smakebuf_r+0x46>
 800790e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007912:	059a      	lsls	r2, r3, #22
 8007914:	d4ee      	bmi.n	80078f4 <__smakebuf_r+0x18>
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	f043 0302 	orr.w	r3, r3, #2
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	e7e2      	b.n	80078e8 <__smakebuf_r+0xc>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	6020      	str	r0, [r4, #0]
 8007926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007932:	b15b      	cbz	r3, 800794c <__smakebuf_r+0x70>
 8007934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007938:	4630      	mov	r0, r6
 800793a:	f000 f81d 	bl	8007978 <_isatty_r>
 800793e:	b128      	cbz	r0, 800794c <__smakebuf_r+0x70>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	431d      	orrs	r5, r3
 8007950:	81a5      	strh	r5, [r4, #12]
 8007952:	e7cf      	b.n	80078f4 <__smakebuf_r+0x18>

08007954 <_fstat_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d07      	ldr	r5, [pc, #28]	@ (8007974 <_fstat_r+0x20>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	4611      	mov	r1, r2
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	f7fa f881 	bl	8001a68 <_fstat>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	d102      	bne.n	8007970 <_fstat_r+0x1c>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	b103      	cbz	r3, 8007970 <_fstat_r+0x1c>
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	bf00      	nop
 8007974:	20000b50 	.word	0x20000b50

08007978 <_isatty_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d06      	ldr	r5, [pc, #24]	@ (8007994 <_isatty_r+0x1c>)
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7fa f880 	bl	8001a88 <_isatty>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_isatty_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_isatty_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000b50 	.word	0x20000b50

08007998 <_init>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr

080079a4 <_fini>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr
